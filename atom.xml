<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Manjusaka</title>
  
  <subtitle>写代码的香港记者</subtitle>
  <link href="https://manjusaka.blog/atom.xml" rel="self"/>
  
  <link href="https://manjusaka.blog/"/>
  <updated>2022-11-20T15:39:13.821Z</updated>
  <id>https://manjusaka.blog/</id>
  
  <author>
    <name>Manjusaka</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重回 Windows 之路</title>
    <link href="https://manjusaka.blog/posts/2022/11/12/the-road-back-to-windows/"/>
    <id>https://manjusaka.blog/posts/2022/11/12/the-road-back-to-windows/</id>
    <published>2022-11-12T04:27:15.000Z</published>
    <updated>2022-11-20T15:39:13.821Z</updated>
    
    <content type="html"><![CDATA[<p>最近会回到 Windows 下办公了两周多，简单记录下自己的使用体验</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近刚配置了一台高配的主机（i9-13900k+4090），之前的 MBP 沦为开会本，开始尝试把 PC 作为主力机使用，由于驱动太新没搞上合适的 Linux 发行版，Ubuntu 系动不动又在“Ubuntu 内部错误”，所以我开始使用 Windows 作为自己的工作生活主力机。两周使用下来发现 Windows 的使用体验还是超出我的预期了。下面大概聊聊</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>时隔多年主力使用 Windows，感觉进步还是蛮大的，主要体现在</p><ol><li>系统交互上</li><li>开发者体验上</li></ol><p>系统交互上，Windows 吸收了不少其余的系统和软件的精髓，感觉进步不小，写几个我印象里比较深的吧</p><ol><li>开始菜单栏进行了改进，比之前感觉更好用了</li><li>File Explorer 的改进，比如支持 Tab 什么的，还是很舒服的</li><li>非常优秀的分屏功能，将窗口拖到屏幕上方就能选择不同的分屏比例和应用，同时在切换任务的时候，有 Task Group 的概念。这不比 macOS 高了不知道10个 Linux？</li><li>全局深色主题支持比之前好很多了</li></ol><p>整体使用下来，体验比前面的 Windows 好了不少，给人带来不少惊喜</p><p>然后在开发者体验方面，巨硬这几年拥抱开源的战略在 Windows 的开发者体验的优化体现的很不错</p><ol><li>WSL2 目前实测比 WSL1 时期好用了太多，IDE 以及其余的工具都能很好的支持</li><li>WSL2 的兼容性也出乎我的意料，我搞内核依赖的 BCC/eBPF 等工具都能在 WSL2 上正常运行，很不错</li><li>Visual Studio 对于 CMake 的支持超出了我的意料，非常不错</li></ol><p>果然巨硬现在是开发者的好朋友啊（</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>虽然 Windows 体验上有了很大的提升，但是还是有一些缺点的</p><ol><li>BUG 不少，比如在任务管理器里面重新排序任务之类的会卡界面（也有可能和我用的 dev channel 的 insider preview 有关</li><li>WSL2 的小问题不少，比如内存泄露，比如导出备份失败之类的</li><li>Windows 下面的权限管理始终是个问题，我迄今都没想明白，原神作为一个游戏要 UAC 干什么？检查我电脑上装莉莉丝的游戏了吗？</li><li>虽然有了 scope 这样的工具，Windows 上的软件包的管理还是有点蛋疼</li><li>好像没看到有类似 MacOS 上 setapp 这样的集中的软件分销体系，不知道是不是我没找到。反正买软件太分散了也挺蛋疼的</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近会回到 Windows 下办公了两周多，简单记录下自己的使用体验&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://manjusaka.blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="杂记" scheme="https://manjusaka.blog/categories/%E6%8A%80%E6%9C%AF/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="杂记" scheme="https://manjusaka.blog/tags/%E6%9D%82%E8%AE%B0/"/>
    
    <category term="技术" scheme="https://manjusaka.blog/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>容器 CPU 和 Memory 限制行为简述</title>
    <link href="https://manjusaka.blog/posts/2022/08/07/A-simple-introduction-about-cpu-and-memory-limit-in-docker/"/>
    <id>https://manjusaka.blog/posts/2022/08/07/A-simple-introduction-about-cpu-and-memory-limit-in-docker/</id>
    <published>2022-08-07T16:00:00.000Z</published>
    <updated>2022-11-20T15:39:13.817Z</updated>
    
    <content type="html"><![CDATA[<p>这篇是给之前没啥容器经验的选手准备的一篇文章，主要是讲一下容器的 CPU 和 Memory 限制行为。</p><span id="more"></span><h2 id="CPU-限制"><a href="#CPU-限制" class="headerlink" title="CPU 限制"></a>CPU 限制</h2><p>首先 Mac 或者是 Windows 选手在使用 Docker Desktop 的时候，会设置 Docker Desktop 的 CPU 限制，默认是 1，也就是说 Docker Desktop 只能使用 1 个 CPU。这是因为 Docker Desktop 裹了一层虚拟机（Windows 下应该是 WSL2/Hyper-V，Mac 下可能是 QEMU）。这相当于我们在一个特定 CPU 数量的宿主机中跑 Docker</p><p>首先提到 CPU 限制，本质上是限制进程的 CPU 使用的时间片，在 Linux 下，进程存在三种调度优先级</p><ol><li>SCHED_NORMAL</li><li>SCHED_FIFO</li><li>SCHED_RR</li></ol><p>1 用的是 Linux 中 CFS 调度器，而常见普通进程都是 SCHED_NORMAL 。OK 前提知识带过</p><p>说回容器中的 CPU 限制，目前主流语境下，容器特指以 Docker 为代表的一系列的基于 Linux 中 CGroup 和 Namespace 进行隔离的技术方案。那么在这个语境下，CPU 限制的实现利用了Linux CGroup 中三个 CPU Subsystem。我们主要关心的如下四个参数</p><ol><li>cpu.cfs_period_us</li><li>cpu.cfs_quota_us</li><li>cpu.shares</li><li>cpuset.cpus</li></ol><p>现在分别来聊一下</p><p>首先说 cpu.shares，在 Docker 中的使用参数是 –cpu-shares，本质上是一个下限的软限制，用来设定 CPU 的利用率权重。默认值是 1024。这里对于相对值可能理解有点抽象。那么我们来看个例子 假如一个 1core 的主机运行 3 个 container，其中一个 cpu-shares 设置为 1024，而其它 cpu-shares 被设置成 512。当 3 个容器中的进程尝试使用 100% CPU 的时候（因为 cpu.shares 针对的是下限，只有使用 100% CPU 很重要，此时才可以体现设置值），则设置 1024 的容器会占用 50% 的 CPU 时间。那再举个例子，之前这个场景，其余的两个容器如果都没有太多任务，那么空余出来的 CPU 时间，是可以继续被第一个 1024 的容器继续使用的</p><p>接下来聊一下 cpu.cfs_quota_us 和 cpu.cfs_period_us ，这两个是需要组合使用才能生效，本质上含义是在 cpu.cfs_period_us 的单位时间内，进程最多可以利用 cpu.cfs_quota_us （单位都是 us），如果 quota 耗尽，那么进程会被内核 throttle 。在 Docker 下，你可以利用 –cpu-period 和 –cpu-quota 这两个值分别进行设置。也可以通过 –cpu 来进行设置，当我们设置 –cpu 为 2 的时候，容器会保证 cpu.cfs_quota_us 两倍于 cpu.cfs_period_us，剩下的就以此类推了（Docker 默认的 cpu.cfs_period_us 的阈值是 100ms 即 10000us）</p><p>现在已经聊了三个参数了，那么我们什么时候该用什么参数呢。通常来说，对于性能相对敏感的进程，我们可以使用 cpu.shares 来保证进程尽可能多的使用 CPU），业务进程可以利用 cpu.cfs_quota_us 和 cpu.cfs_period_us 来保证相对较好的公平分配。但是这样也带来一个问题，就是对于业务流量比较大的应用，可能会因为频繁被 throtlle 导致我们的 RT 等指标出现毛刺。Linux 5.12 之后有了一个新功能，cpu.cfs_burst_us ，即进程可以在 CPU 利用率比较低的空闲时段积累一定的 credit，然后在密集使用的时候换取一定的 buffer，实现更少的 throttle 和更高的 CPU 利用率（当然这个特性还暂时没有被主流容器所完全支持）</p><p>现在新的问题来了，无论 share 还是 cpu.cfs_quota_us 和 cpu.cfs_period_us 被 throttle 的概率都不少，如果我们想让进程更好的利用 CPU 怎么办？答案就是 cpuset.cpus ，Docker 中的参数是 –cpuset-cpus，可以让进程进行绑核处理</p><p>嗯，CPU 的部分就到这里</p><h2 id="Mem-限制"><a href="#Mem-限制" class="headerlink" title="Mem 限制"></a>Mem 限制</h2><p>还是前提科普</p><p>首先 Mac 或者是 Windows 选手在使用 Docker Desktop 的时候，会设置 Docker Desktop 的 Mem 限制，这相当于我们在一个特定 Mem 数量的宿主机中跑 Docker</p><p>然后在我们今天的语境下，Mem 资源的限制还是依托于 CGroup 的 Memory Subsystem，参数有很多，我们目前只需要关心</p><ol><li>memory.limit_in_bytes</li></ol><p>含义即是容器的最大内存限制，如果设置为 -1，代表着无任何内存的限制。在 Docker 中的参数是 –memory。</p><p>行为的话分为这样两种情况</p><ol><li>如果系统内存还有空余，但是容器内存超过了 Limit, 那么容器进程会被 OOMKiller Kill 掉</li><li>如果系统内存先于容器达到了内核阈值，那么 OOMKiller 会在整个系统范围内根据根据负载等多个因素计算一个 score，然后 rank 后从高到低进行 OOM Kill 的操作</li></ol><p>当然实际上还有一种额外的情况。可以通过 –oom-kill-disable 参数设置 memory.oom_control 的值。如果设置为1，那么容器内存超过 Limit 就不会被 OOM Kill 掉而是会被暂停，如果设置为0，那么容器内存超过 Limit 就会被 OOM Kill 掉</p><p>嗯关于 Mem 的行为差不多就这些</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>差不多就这样吧，纯新手向的文章，水文一篇，大家别介意（</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇是给之前没啥容器经验的选手准备的一篇文章，主要是讲一下容器的 CPU 和 Memory 限制行为。&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/Linux/"/>
    
    
    <category term="编程" scheme="https://manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://manjusaka.blog/tags/Linux/"/>
    
    <category term="容器" scheme="https://manjusaka.blog/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Weekly Contest 287 题解</title>
    <link href="https://manjusaka.blog/posts/2022/04/05/leetcode-weekly-contest-287/"/>
    <id>https://manjusaka.blog/posts/2022/04/05/leetcode-weekly-contest-287/</id>
    <published>2022-04-05T13:00:00.000Z</published>
    <updated>2022-11-20T15:39:13.817Z</updated>
    
    <content type="html"><![CDATA[<p>好久没打周赛了，打了一次周赛，简单的写个题解</p><span id="more"></span><h2 id="2224-Minimum-Number-of-Operations-to-Convert-Time"><a href="#2224-Minimum-Number-of-Operations-to-Convert-Time" class="headerlink" title="2224. Minimum Number of Operations to Convert Time"></a>2224. Minimum Number of Operations to Convert Time</h2><p>题面：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">You are given two strings current and correct representing two 24-hour times.</span><br><span class="line"></span><br><span class="line">24-hour times are formatted as &quot;HH:MM&quot;, where HH is between 00 and 23, and MM is between 00 and 59. The earliest 24-hour time is 00:00, and the latest is 23:59.</span><br><span class="line"></span><br><span class="line">In one operation you can increase the time current by 1, 5, 15, or 60 minutes. You can perform this operation any number of times.</span><br><span class="line"></span><br><span class="line">Return the minimum number of operations needed to convert current to correct.</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: current = &quot;02:30&quot;, correct = &quot;04:35&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation:</span><br><span class="line">We can convert current to correct in 3 operations as follows:</span><br><span class="line">- Add 60 minutes to current. current becomes &quot;03:30&quot;.</span><br><span class="line">- Add 60 minutes to current. current becomes &quot;04:30&quot;.</span><br><span class="line">- Add 5 minutes to current. current becomes &quot;04:35&quot;.</span><br><span class="line">It can be proven that it is not possible to convert current to correct in fewer than 3 operations.</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: current = &quot;11:00&quot;, correct = &quot;11:01&quot;</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: We only have to add one minute to current, so the minimum number of operations needed is 1.</span><br></pre></td></tr></table></figure><p>这题没啥好说的吧，直接暴力计算时间写就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">convertTime</span>(<span class="params">self, current: <span class="built_in">str</span>, correct: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        correct_time = correct.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        current_time = current.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        minutes = <span class="built_in">int</span>(correct_time[<span class="number">1</span>]) - <span class="built_in">int</span>(current_time[<span class="number">1</span>])</span><br><span class="line">        hours = <span class="built_in">int</span>(correct_time[<span class="number">0</span>]) - <span class="built_in">int</span>(current_time[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> correct_time[<span class="number">1</span>] &lt; current_time[<span class="number">1</span>]:</span><br><span class="line">            minutes += <span class="number">60</span></span><br><span class="line">            hours -= <span class="number">1</span></span><br><span class="line">        results = hours</span><br><span class="line">        flag = [<span class="number">15</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">            <span class="keyword">if</span> minutes &gt;= i:</span><br><span class="line">                results += (minutes // i)</span><br><span class="line">                minutes = minutes % i</span><br><span class="line">        <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure><h2 id="2225-Find-Players-With-Zero-or-One-Losses"><a href="#2225-Find-Players-With-Zero-or-One-Losses" class="headerlink" title="2225. Find Players With Zero or One Losses"></a>2225. Find Players With Zero or One Losses</h2><p>题面：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">You are given an integer array matches where matches[i] = [winneri, loseri] indicates that the player winneri defeated player loseri in a match.</span><br><span class="line"></span><br><span class="line">Return a list answer of size 2 where:</span><br><span class="line"></span><br><span class="line">answer[0] is a list of all players that have not lost any matches.</span><br><span class="line">answer[1] is a list of all players that have lost exactly one match.</span><br><span class="line">The values in the two lists should be returned in increasing order.</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">You should only consider the players that have played at least one match.</span><br><span class="line">The testcases will be generated such that no two matches will have the same outcome.</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: matches = [[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]</span><br><span class="line">Output: [[1,2,10],[4,5,7,8]]</span><br><span class="line">Explanation:</span><br><span class="line">Players 1, 2, and 10 have not lost any matches.</span><br><span class="line">Players 4, 5, 7, and 8 each have lost one match.</span><br><span class="line">Players 3, 6, and 9 each have lost two matches.</span><br><span class="line">Thus, answer[0] = [1,2,10] and answer[1] = [4,5,7,8].</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: matches = [[2,3],[1,3],[5,4],[6,4]]</span><br><span class="line">Output: [[1,2,5,6],[]]</span><br><span class="line">Explanation:</span><br><span class="line">Players 1, 2, 5, and 6 have not lost any matches.</span><br><span class="line">Players 3 and 4 each have lost two matches.</span><br><span class="line">Thus, answer[0] = [1,2,5,6] and answer[1] = [].</span><br></pre></td></tr></table></figure><p>这题实际上就遍历统计就行，时间复杂度 O(N) 空间复杂度 O(N)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findWinners</span>(<span class="params">self, matches: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        index = defaultdict(<span class="keyword">lambda</span>: [<span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> winner, loser <span class="keyword">in</span> matches:</span><br><span class="line">            index[winner][<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">            index[loser][<span class="number">1</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="built_in">sorted</span>([k <span class="keyword">for</span> k, v <span class="keyword">in</span> index.items() <span class="keyword">if</span> v[<span class="number">0</span>] &gt; <span class="number">0</span> <span class="keyword">and</span> v[<span class="number">1</span>] == <span class="number">0</span>]),</span><br><span class="line">            <span class="built_in">sorted</span>([k <span class="keyword">for</span> k, v <span class="keyword">in</span> index.items() <span class="keyword">if</span> v[<span class="number">1</span>] == <span class="number">1</span>]),</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><h2 id="2226-Maximum-Candies-Allocated-to-K-Children"><a href="#2226-Maximum-Candies-Allocated-to-K-Children" class="headerlink" title="2226. Maximum Candies Allocated to K Children"></a>2226. Maximum Candies Allocated to K Children</h2><p>草，这题题号真有意思，尊。。。。</p><p>题面：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">You are given a 0-indexed integer array candies. Each element in the array denotes a pile of candies of size candies[i]. You can divide each pile into any number of sub piles, but you cannot merge two piles together.</span><br><span class="line"></span><br><span class="line">You are also given an integer k. You should allocate piles of candies to k children such that each child gets the same number of candies. Each child can take at most one pile of candies and some piles of candies may go unused.</span><br><span class="line"></span><br><span class="line">Return the maximum number of candies each child can get.</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: candies = [5,8,6], k = 3</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: We can divide candies[1] into 2 piles of size 5 and 3, and candies[2] into 2 piles of size 5 and 1. We now have five piles of candies of sizes 5, 5, 3, 5, and 1. We can allocate the 3 piles of size 5 to 3 children. It can be proven that each child cannot receive more than 5 candies.</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: candies = [2,5], k = 11</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: There are 11 children but only 7 candies in total, so it is impossible to ensure each child receives at least one candy. Thus, each child gets no candy and the answer is 0.</span><br></pre></td></tr></table></figure><p>这题实际上最开始没想清楚，后面仔细想了下，实际上是个二分的题目</p><p>首先假设，我们所有的糖的和为 y, 假设被 k 整除后的值是 z（含义是最大的能够整数分割的数），那么我们题目里孩子能获得的最大的糖果的数量的值域一定是 [0,z]</p><p>这个区间是具备单调性（单调递增），那么就具备了二分的条件。那么我们二分的题目是什么？假设中间值是 mid ，我们计算每推糖果能够按照 mid 分成几份并求和，如果和小于 k ，那么意味着值比我们目标值大，否则则比目标值小。持续逼近即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maximumCandies</span>(<span class="params">self, candies: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">sum</span>(candies) // k</span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            mid = (left + right + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> k &gt; <span class="built_in">sum</span>(candy // mid <span class="keyword">for</span> candy <span class="keyword">in</span> candies):</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = mid</span><br><span class="line">        <span class="keyword">return</span> left</span><br></pre></td></tr></table></figure><h2 id="2227-Encrypt-and-Decrypt-Strings"><a href="#2227-Encrypt-and-Decrypt-Strings" class="headerlink" title="2227. Encrypt and Decrypt Strings"></a>2227. Encrypt and Decrypt Strings</h2><p>这题实际上比第三题简单</p><p>题面：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">You are given a character array keys containing unique characters and a string array values containing strings of length 2. You are also given another string array dictionary that contains all permitted original strings after decryption. You should implement a data structure that can encrypt or decrypt a 0-indexed string.</span><br><span class="line"></span><br><span class="line">A string is encrypted with the following process:</span><br><span class="line"></span><br><span class="line">For each character c in the string, we find the index i satisfying keys[i] == c in keys.</span><br><span class="line">Replace c with values[i] in the string.</span><br><span class="line">A string is decrypted with the following process:</span><br><span class="line"></span><br><span class="line">For each substring s of length 2 occurring at an even index in the string, we find an i such that values[i] == s. If there are multiple valid i, we choose any one of them. This means a string could have multiple possible strings it can decrypt to.</span><br><span class="line">Replace s with keys[i] in the string.</span><br><span class="line">Implement the Encrypter class:</span><br><span class="line"></span><br><span class="line">Encrypter(char[] keys, String[] values, String[] dictionary) Initializes the Encrypter class with keys, values, and dictionary.</span><br><span class="line">String encrypt(String word1) Encrypts word1 with the encryption process described above and returns the encrypted string.</span><br><span class="line">int decrypt(String word2) Returns the number of possible strings word2 could decrypt to that also appear in dictionary.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;Encrypter&quot;, &quot;encrypt&quot;, &quot;decrypt&quot;]</span><br><span class="line">[[[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;], [&quot;ei&quot;, &quot;zf&quot;, &quot;ei&quot;, &quot;am&quot;], [&quot;abcd&quot;, &quot;acbd&quot;, &quot;adbc&quot;, &quot;badc&quot;, &quot;dacb&quot;, &quot;cadb&quot;, &quot;cbda&quot;, &quot;abad&quot;]], [&quot;abcd&quot;], [&quot;eizfeiam&quot;]]</span><br><span class="line">Output</span><br><span class="line">[null, &quot;eizfeiam&quot;, 2]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">Encrypter encrypter = new Encrypter([[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;], [&quot;ei&quot;, &quot;zf&quot;, &quot;ei&quot;, &quot;am&quot;], [&quot;abcd&quot;, &quot;acbd&quot;, &quot;adbc&quot;, &quot;badc&quot;, &quot;dacb&quot;, &quot;cadb&quot;, &quot;cbda&quot;, &quot;abad&quot;]);</span><br><span class="line">encrypter.encrypt(&quot;abcd&quot;); // return &quot;eizfeiam&quot;. </span><br><span class="line">                           // &#x27;a&#x27; maps to &quot;ei&quot;, &#x27;b&#x27; maps to &quot;zf&quot;, &#x27;c&#x27; maps to &quot;ei&quot;, and &#x27;d&#x27; maps to &quot;am&quot;.</span><br><span class="line">encrypter.decrypt(&quot;eizfeiam&quot;); // return 2. </span><br><span class="line">                              // &quot;ei&quot; can map to &#x27;a&#x27; or &#x27;c&#x27;, &quot;zf&quot; maps to &#x27;b&#x27;, and &quot;am&quot; maps to &#x27;d&#x27;. </span><br><span class="line">                              // Thus, the possible strings after decryption are &quot;abad&quot;, &quot;cbad&quot;, &quot;abcd&quot;, and &quot;cbcd&quot;. </span><br><span class="line">                              // 2 of those strings, &quot;abad&quot; and &quot;abcd&quot;, appear in dictionary, so the answer is 2.</span><br></pre></td></tr></table></figure><p>这题加密部分其实直接按照规则写就行了，然后解密部分有个方法就是提前将字典里面的值预计算一次，然后就能 O(1) 计算了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Encrypter</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, keys: <span class="type">List</span>[<span class="built_in">str</span>], values: <span class="type">List</span>[<span class="built_in">str</span>], dictionary: <span class="type">List</span>[<span class="built_in">str</span>]</span>):</span><br><span class="line">        self.index = &#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">zip</span>(keys, values)&#125;</span><br><span class="line">        self.counter = Counter(self.encrypt(item) <span class="keyword">for</span> item <span class="keyword">in</span> dictionary)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, word1: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(self.index.get(letter, <span class="string">&quot; &quot;</span>) <span class="keyword">for</span> letter <span class="keyword">in</span> word1)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, word2: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> self.counter[word2]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;好久没打周赛了，打了一次周赛，简单的写个题解&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="刷题" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="Python" scheme="https://manjusaka.blog/tags/Python/"/>
    
    <category term="编程" scheme="https://manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="leetcode" scheme="https://manjusaka.blog/tags/leetcode/"/>
    
    <category term="刷题" scheme="https://manjusaka.blog/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>简单聊聊在 Linux 内核中的网络质量监控</title>
    <link href="https://manjusaka.blog/posts/2022/01/31/a-simple-introduction-about-network-monitoring-in-linux-kernel/"/>
    <id>https://manjusaka.blog/posts/2022/01/31/a-simple-introduction-about-network-monitoring-in-linux-kernel/</id>
    <published>2022-01-31T13:00:00.000Z</published>
    <updated>2022-11-20T15:39:13.817Z</updated>
    
    <content type="html"><![CDATA[<p>这可能是2021年最后一篇文章（农历年），也可能是2022年第一篇文章，不过这完全取决于我什么时候写完。这次来简单聊聊 Linux 中的网络监控</p><span id="more"></span><h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>这篇文章，既是一篇水文，又不是一篇水文。不过还是新手向的一个文章。这篇文章实际上在我的草稿箱里呆了一年多的时间了，灵感最初源自我在阿里的一些工作（某种意义上算是国内领先的（但也是比较小众的工作（XD</p><p>随着技术的发展，大家对于服务的稳定性要求越来越高，而保证服务质量的前提就是有着合格的监控的覆盖面（阿里对于服务稳定性的要求叫做 “1-5-10” 即，一分钟发现，五分钟处理，十分钟自愈，而这样一个对于稳定性的要求没有足够的覆盖面的监控的话，那么一切等于圈圈）。而在这其中，网络质量的监控是重中之重</p><p>在讨论网络质量的监控之前，我们需要来明确网络质量这个定义的覆盖范围。</p><ol><li>网络链路上的异常情况</li><li>服务端网络的处理能力</li></ol><p>在明确这样的覆盖范围后，我们可以来思考什么样的指标代表着网络质量的降低。（注：本文主要分析 TCP 及 over TCP 协议的监控，后续不再赘述）</p><ol><li>毫无疑问，如果我们存在丢包的情况</li><li>发送/接收队列阻塞</li><li>超时</li></ol><p>那么我们可以再来看下具体细节</p><ol><li>如 RFC793<sup>1</sup> 提出的 RTO，RFC6298<sup>2</sup> 提出的 Retransmission Timer 等指标，可以衡量包传送时间。一个粗略的概括是，这两个指标越大代表着网络质量越低</li><li>如 RFC2018<sup>3</sup> 提出的 SACK，一个不精确的概括是 SACK 越多，代表着丢包越多</li><li>如果我们的链接频繁的被 RST，那么也代表着我们的网络质量存在问题</li></ol><p>当然在实际的生产过程中，我们还可以从很多其余的指标来辅助衡量网络质量，不过因为本文主要是介绍思路以 prototype 为主，所以不做过多赘述</p><p>在明确我们这篇文章中要获取什么指标后，我们再来分析一下我们怎么样去获取这些指标</p><h2 id="内核网络质量监控"><a href="#内核网络质量监控" class="headerlink" title="内核网络质量监控"></a>内核网络质量监控</h2><h3 id="暴力版"><a href="#暴力版" class="headerlink" title="暴力版"></a>暴力版</h3><p>从内核中获取网络的 metric ，本质上来说是从内核获取运行状态。说道这点，对 Linux 有所了解的同学第一反应肯定是说从 <strong>The Proc Filesystem</strong><sup>4</sup> 看一下能不能拿到具体的指标。Yep， 不错的思路，实际上的确可以拿到一部分的指标（这也是 <code>netstat</code> 等一些网络工具的原理)</p><p>在 <code>/proc/net/tcp</code> 中，我们可以获取到内核吐出的 Metric，现在包括这样一些</p><ol><li>连接状态</li><li>本地端口，地址</li><li>远程端口，地址</li><li>接收队列长度</li><li>发送队列长度</li><li>慢启动阈值</li><li>RTO 值</li><li>连接所属的 socket 的 inode id</li><li>uid</li><li>delay ack 软时钟</li></ol><p>完整的解释可以参考 <strong>proc_net_tcp.txt</strong><sup>5</sup></p><p>这样的做法针对于 prototype 可能说是可以的，不过其固有的几个弊端限制了在生产上大规模使用</p><ol><li>内核已经明确不推荐使用 <strong>proc_net_tcp.txt</strong><sup>5</sup>，换句话说，并不保证未来的兼容性与维护</li><li>内核直接提供的 metric 信息还是太少，一些关于 RTT，SRTT 这样的指标还是没法获取，也没法获取 SACK 等一些特定事件。</li><li>根据内核输出的 metric。存在的问题是实时性和精度的问题，换句话说，我们在不考虑精度的情况下可以去做这方面的尝试</li><li><strong>proc_net_tcp.txt</strong><sup>5</sup> 是和 network namespace 进行绑定的，换句话说，在容器的场景下，我们需要遍历可能存在的多个 network namespace ，不断的走 <code>nsenter</code> 去获取对应的 Metric</li></ol><p>所以在这样的背景下，<strong>proc_net_tcp.txt</strong><sup>5</sup> 并不太适合比较大规模的使用场景。所以我们需要对其做更近一步的优化</p><h3 id="优化-1-0-版"><a href="#优化-1-0-版" class="headerlink" title="优化 1.0 版"></a>优化 1.0 版</h3><p>在上文里，我们提到了关于直接从 <strong>The Proc Filesystem</strong><sup>4</sup> 中获取数据的弊端。其中一条很重要的是提到了</p><blockquote><p>内核已经明确不推荐使用 <strong>proc_net_tcp.txt</strong><sup>5</sup>，换句话说，并不保证未来的兼容性与维护</p></blockquote><p>那么推荐的做法是什么呢？答案是 <strong>netlink+sock_diag</strong> </p><p>简单介绍下 netlink<sup>6</sup> 是 Linux 2.2 引入的一种 Kernel Space 与 User Space 进行通信的机制，最早由 RFC3549<sup>7</sup> 提出。官方对于 netlink<sup>6</sup> 的描述大概是这样</p><blockquote><p>Netlink is used to transfer information between the kernel anduser-space processes. It consists of a standard sockets-based interface for user space processes and an internal kernel API for kernel modules.<br>The internal kernel interface is not documented in this manual page.  There is also an obsolete netlink interface via netlink character devices; this interface is not documented here and is provided only for backward compatibility.</p></blockquote><p>简而言之大概是用户可以利用 netlink<sup>6</sup> 很方便的与内核中的不同的 Kernel Module 进行数据交互</p><p>而在我们这样的场景下，我们就需要利用到 sock_diag<sup>8</sup>，官方对此的描述是</p><blockquote><p>The sock_diag netlink subsystem provides a mechanism for obtaining information about sockets of various address families from the kernel.  This subsystem can be used to obtain information about individual sockets or request a list of sockets.</p></blockquote><p>这里简而言之是说我们可以利用 sock_diag<sup>7</sup> 来获取不同 socket 的连接状态及相应的指标。（我们能获取到上文提到的所有指标，也能获得更细的 RTT 等指标）啊对了，这里要注意，netlink<sup>6</sup> 可以通过设置参数来从所有的 Network Namespace 获取指标。</p><p>在使用 netlink<sup>6</sup> 时，可能直接用 Pure C 来写比较繁琐。所幸，社区已经有不少封装成熟的 Lib，比如这里我选用 vishvananda 所封装的 netlink 库<sup>8</sup>，这里我给一个 Demo</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/vishvananda/netlink&quot;</span></span><br><span class="line"><span class="string">&quot;syscall&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">results, err := netlink.SocketDiagTCPInfo(syscall.AF_INET)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> results &#123;</span><br><span class="line"><span class="keyword">if</span> item.TCPInfo != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Source:%s, Dest:%s, RTT:%d\n&quot;</span>, item.InetDiagMsg.ID.Source.String(), item.InetDiagMsg.ID.Destination.String(), item.TCPInfo.Rtt)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行示例大概是这样</p><p><img src="https://user-images.githubusercontent.com/7054676/151838248-eadaacf0-3d7a-4542-a091-9d401c37339c.png" alt="netlink"></p><p>OK，现在我们能用官方推荐的 Best Practice 来获取到更全更细的指标，也无需操心 Network namespace 的问题，但是我们最开始的几个问题还有一个比较棘手，就是实时性的问题。</p><p>因为如果我们选择周期性的轮询，那么如果在我们的轮询间隔中发生了网络波动，我们将丢失掉对应的现场。所以我们怎么样去解决实时性的问题呢？</p><h3 id="优化-2-0-版"><a href="#优化-2-0-版" class="headerlink" title="优化 2.0 版"></a>优化 2.0 版</h3><p>如果要在具体的比如重传，connection reset 等事件发生的时候，直接触发我们的调用。看过我之前博客的同学，可能第一时间考虑使用 eBPF + kprobe 的组合，在一些诸如 <code>tcp_reset</code> ，<code>tcp_retransmit_skb</code> 之类的关键调用上打点来获取实时的数据。Sounds good！</p><p>不过实际上还是有一些小小的问题</p><ol><li>kprobe 的开销在高频的情况下，相对来说会比较大一些</li><li>如果我们仅仅需要一些诸如 source_address, dest_address, source_port, dest_port 之类的信息，我们直接走 kprobe 拿完整地 skb 再来 cast 属实有点浪费</li></ol><p>所以我们有什么更好的方法吗？有的！</p><p>在 Linux 中，对于一系列的类似我们需求这样的特殊事件的触发与回调的场景，有一套基础设施叫做 Tracepoint<sup>9</sup>。这套设施，能够很好的帮我们处理监听事件并回调的需求。而在 Linux 4.15 以及 4.16 之后，Linux 新增了6个 tcp 相关的 Tracepoint<sup>9</sup></p><p>分别是</p><ol><li>tcp:tcp_destroy_sock</li><li>tcp:tcp_probe</li><li>tcp:tcp_receive_reset</li><li>tcp:tcp_retransmit_skb</li><li>tcp:tcp_retransmit_synack</li><li>tcp:tcp_send_reset</li></ol><p>这些 Tracepoint<sup>9</sup> 的含义，大家看名字可能就能明白了</p><p>而在这些 Tracepoint<sup>9</sup> 触发的时候，他们会给注册回调函数传入若干参数，这里我也给大家列一下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">tcp:tcp_retransmit_skb</span><br><span class="line">    const void * skbaddr;</span><br><span class="line">    const void * skaddr;</span><br><span class="line">    __u16 sport;</span><br><span class="line">    __u16 dport;</span><br><span class="line">    __u8 saddr[4];</span><br><span class="line">    __u8 daddr[4];</span><br><span class="line">    __u8 saddr_v6[16];</span><br><span class="line">    __u8 daddr_v6[16];</span><br><span class="line">tcp:tcp_send_reset</span><br><span class="line">    const void * skbaddr;</span><br><span class="line">    const void * skaddr;</span><br><span class="line">    __u16 sport;</span><br><span class="line">    __u16 dport;</span><br><span class="line">    __u8 saddr[4];</span><br><span class="line">    __u8 daddr[4];</span><br><span class="line">    __u8 saddr_v6[16];</span><br><span class="line">    __u8 daddr_v6[16];</span><br><span class="line">tcp:tcp_receive_reset</span><br><span class="line">    const void * skaddr;</span><br><span class="line">    __u16 sport;</span><br><span class="line">    __u16 dport;</span><br><span class="line">    __u8 saddr[4];</span><br><span class="line">    __u8 daddr[4];</span><br><span class="line">    __u8 saddr_v6[16];</span><br><span class="line">    __u8 daddr_v6[16];</span><br><span class="line">tcp:tcp_destroy_sock</span><br><span class="line">    const void * skaddr;</span><br><span class="line">    __u16 sport;</span><br><span class="line">    __u16 dport;</span><br><span class="line">    __u8 saddr[4];</span><br><span class="line">    __u8 daddr[4];</span><br><span class="line">    __u8 saddr_v6[16];</span><br><span class="line">    __u8 daddr_v6[16];</span><br><span class="line">tcp:tcp_retransmit_synack</span><br><span class="line">    const void * skaddr;</span><br><span class="line">    const void * req;</span><br><span class="line">    __u16 sport;</span><br><span class="line">    __u16 dport;</span><br><span class="line">    __u8 saddr[4];</span><br><span class="line">    __u8 daddr[4];</span><br><span class="line">    __u8 saddr_v6[16];</span><br><span class="line">    __u8 daddr_v6[16];</span><br><span class="line">tcp:tcp_probe</span><br><span class="line">    __u8 saddr[sizeof(struct sockaddr_in6)];</span><br><span class="line">    __u8 daddr[sizeof(struct sockaddr_in6)];</span><br><span class="line">    __u16 sport;</span><br><span class="line">    __u16 dport;</span><br><span class="line">    __u32 mark;</span><br><span class="line">    __u16 length;</span><br><span class="line">    __u32 snd_nxt;</span><br><span class="line">    __u32 snd_una;</span><br><span class="line">    __u32 snd_cwnd;</span><br><span class="line">    __u32 ssthresh;</span><br><span class="line">    __u32 snd_wnd;</span><br><span class="line">    __u32 srtt;</span><br><span class="line">    __u32 rcv_wnd;</span><br></pre></td></tr></table></figure><p>嗯，看到这里，大家可能心里应该有个数了，那么我们还是来写一下示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bcc <span class="keyword">import</span> BPF</span><br><span class="line"></span><br><span class="line">bpf_text = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">BPF_RINGBUF_OUTPUT(tcp_event, 65536);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">enum tcp_event_type &#123;</span></span><br><span class="line"><span class="string">    retrans_event,</span></span><br><span class="line"><span class="string">    recv_rst_event,</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">struct event_data_t &#123;</span></span><br><span class="line"><span class="string">    enum tcp_event_type type;</span></span><br><span class="line"><span class="string">    u16 sport;</span></span><br><span class="line"><span class="string">    u16 dport;</span></span><br><span class="line"><span class="string">    u8 saddr[4];</span></span><br><span class="line"><span class="string">    u8 daddr[4];</span></span><br><span class="line"><span class="string">    u32 pid;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">TRACEPOINT_PROBE(tcp, tcp_retransmit_skb)</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    struct event_data_t event_data=&#123;&#125;;</span></span><br><span class="line"><span class="string">    event_data.type = retrans_event;</span></span><br><span class="line"><span class="string">    event_data.sport = args-&gt;sport;</span></span><br><span class="line"><span class="string">    event_data.dport = args-&gt;dport;</span></span><br><span class="line"><span class="string">    event_data.pid=bpf_get_current_pid_tgid()&gt;&gt;32;</span></span><br><span class="line"><span class="string">    bpf_probe_read_kernel(&amp;event_data.saddr,sizeof(event_data.saddr), args-&gt;saddr);</span></span><br><span class="line"><span class="string">    bpf_probe_read_kernel(&amp;event_data.daddr,sizeof(event_data.daddr), args-&gt;daddr);</span></span><br><span class="line"><span class="string">    tcp_event.ringbuf_output(&amp;event_data, sizeof(struct event_data_t), 0);</span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">TRACEPOINT_PROBE(tcp, tcp_receive_reset)</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    struct event_data_t event_data=&#123;&#125;;</span></span><br><span class="line"><span class="string">    event_data.type = recv_rst_event;</span></span><br><span class="line"><span class="string">    event_data.sport = args-&gt;sport;</span></span><br><span class="line"><span class="string">    event_data.dport = args-&gt;dport;</span></span><br><span class="line"><span class="string">    event_data.pid=bpf_get_current_pid_tgid()&gt;&gt;32;</span></span><br><span class="line"><span class="string">    bpf_probe_read_kernel(&amp;event_data.saddr,sizeof(event_data.saddr), args-&gt;saddr);</span></span><br><span class="line"><span class="string">    bpf_probe_read_kernel(&amp;event_data.daddr,sizeof(event_data.daddr), args-&gt;daddr);</span></span><br><span class="line"><span class="string">    tcp_event.ringbuf_output(&amp;event_data, sizeof(struct event_data_t), 0);</span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">bpf = BPF(text=bpf_text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_event_data</span>(<span class="params">cpu, data, size</span>):</span><br><span class="line">    event = bpf[<span class="string">&quot;tcp_event&quot;</span>].event(data)</span><br><span class="line">    event_type = <span class="string">&quot;retransmit&quot;</span> <span class="keyword">if</span> event.<span class="built_in">type</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&quot;recv_rst&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(</span><br><span class="line">        <span class="string">&quot;%s %d %d %s %s %d&quot;</span></span><br><span class="line">        % (</span><br><span class="line">            event_type,</span><br><span class="line">            event.sport,</span><br><span class="line">            event.dport,</span><br><span class="line">            <span class="string">&quot;.&quot;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> event.saddr]),</span><br><span class="line">            <span class="string">&quot;.&quot;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> event.daddr]),</span><br><span class="line">            event.pid,</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bpf[<span class="string">&quot;tcp_event&quot;</span>].open_ring_buffer(process_event_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    bpf.ring_buffer_consume()</span><br></pre></td></tr></table></figure><p>我这里使用了 <code>tcp_receive_reset</code> 和 <code>tcp_retransmit_skb</code> 来监控我们机器上的程序。为了演示具体的效果，我先用 Go 写了一个访问 Google 的程序，然后通过 <code>sudo iptables -I OUTPUT -p tcp -m string --algo kmp --hex-string &quot;|c02bc02fc02cc030cca9cca8c009c013c00ac014009c009d002f0035c012000a130113021303|&quot; -j REJECT --reject-with tcp-reset</code> 来给这个 Go 程序注入 Connection Reset （这里的注入原理是 Go 默认库的发起 HTTPS 链接的 Client Hello 特征是固定的，我用 iptables 识别出方向流量，然后重置链接）</p><p>效果如下</p><p><img src="https://user-images.githubusercontent.com/7054676/151841316-8c954deb-e7a6-4229-80d6-4134d884a003.png" alt="Tracepoint"></p><p>嗯，写到这里，你可能想明白了，我们可以将 Tracepoint<sup>9</sup> 和 netlink<sup>6</sup> 结合使用来满足我们实时性的需求</p><h3 id="优化-3-0-版"><a href="#优化-3-0-版" class="headerlink" title="优化 3.0 版"></a>优化 3.0 版</h3><p>实际上写到现在，也更多的是讲一些 Prototype 和思路上的介绍。而为了能满足生产上的需要，还有很多的工作要做（这也是我之前所做的工作的一部分），包括不仅限于：</p><ol><li>工程上的性能优化，避免影响服务</li><li>Kubernetes 等容器平台的兼容</li><li>对接 Prometheus 等数据监控平台</li><li>可能需要嵌入 CNI 来获取更简便的监控路径等等</li></ol><p>实际上社区在这一块也有很多很有意思的工作，比如 Cilium 等，大家有兴趣也可以关注下。而我后续拾掇拾掇代码，也会在合适的时候将我之前的一些实现路径给开源出来。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章差不多就写到这里，内核的网络监控终归是比较小众的领域。希望我这里面的一些经验能够帮助上大家。嗯，祝大家新年快乐！虎年大吉！（下一篇文章就是写去年的年终总结了）</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li>RFC793: <a href="https://datatracker.ietf.org/doc/html/rfc793">https://datatracker.ietf.org/doc/html/rfc793</a></li><li>RFC6298：<a href="https://datatracker.ietf.org/doc/html/rfc6298">https://datatracker.ietf.org/doc/html/rfc6298</a></li><li>RFC2018：<a href="https://datatracker.ietf.org/doc/html/rfc2018">https://datatracker.ietf.org/doc/html/rfc2018</a></li><li>The /proc Filesystem：<a href="https://www.kernel.org/doc/html/latest/filesystems/proc.html">https://www.kernel.org/doc/html/latest/filesystems/proc.html</a></li><li>proc_net_tcp.txt：<a href="https://www.kernel.org/doc/Documentation/networking/proc_net_tcp.txt">https://www.kernel.org/doc/Documentation/networking/proc_net_tcp.txt</a></li><li>netlink：<a href="https://man7.org/linux/man-pages/man7/netlink.7.html">https://man7.org/linux/man-pages/man7/netlink.7.html</a></li><li>sock_diag：<a href="https://man7.org/linux/man-pages/man7/sock_diag.7.html">https://man7.org/linux/man-pages/man7/sock_diag.7.html</a></li><li>vishvananda/netlink：<a href="https://github.com/vishvananda/netlink">https://github.com/vishvananda/netlink</a><br>9: Linux Tracepoint：<a href="https://www.kernel.org/doc/html/latest/trace/tracepoints.html">https://www.kernel.org/doc/html/latest/trace/tracepoints.html</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;这可能是2021年最后一篇文章（农历年），也可能是2022年第一篇文章，不过这完全取决于我什么时候写完。这次来简单聊聊 Linux 中的网络监控&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/Linux/"/>
    
    
    <category term="编程" scheme="https://manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://manjusaka.blog/tags/Linux/"/>
    
    <category term="笔记" scheme="https://manjusaka.blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="水文" scheme="https://manjusaka.blog/tags/%E6%B0%B4%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>简单聊聊容器中的 UID 中的一点小坑</title>
    <link href="https://manjusaka.blog/posts/2021/12/03/a-simple-introduction-about-uid-docker/"/>
    <id>https://manjusaka.blog/posts/2021/12/03/a-simple-introduction-about-uid-docker/</id>
    <published>2021-12-03T13:00:00.000Z</published>
    <updated>2022-11-20T15:39:13.817Z</updated>
    
    <content type="html"><![CDATA[<p>今天不太舒服，在家请假了一天。突然想起最近因为一些小问题，看了下关于容器中 UID 的东西。所以简单来聊聊这方面的东西。算个新手向的文章</p><span id="more"></span><h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>最近帮 FrostMing 把他的 <a href="https://github.com/frostming/tokei-pie-cooker">tokei-pie-cooker</a> 部署到我的 K8S 上做成一个 SaaS 服务。Frost 最开始给我了一个镜像地址。然后我啪的一下复制粘贴了一个 Deployment 出来</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tokei-pie</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">tokei-pie</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">tokei-pie</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">12</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">tokei-pie</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">tokei-pie</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tokei-pie</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">frostming/tokei-pie-cooker:latest</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;2Gi&quot;</span></span><br><span class="line">            <span class="attr">ephemeral-storage:</span> <span class="string">&quot;3Gi&quot;</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;500m&quot;</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;500Mi&quot;</span></span><br><span class="line">            <span class="attr">ephemeral-storage:</span> <span class="string">&quot;1Gi&quot;</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">runAsNonRoot:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>啪的一下，很快嘛，很简单对吧，限制下 Storage 用量，限制一下 NonRoot ，以免我被人打穿。Fine，<code>kubectl apply -f</code> 一下。Ops，</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: container has runAsNonRoot and image has non-numeric user (tokei), cannot verify user is non-root (pod: &quot;tokei-pie-6c6fd5cb84-s4bz7_tokei-pie(239057ea-fe47-40a9-8041-966c65344a44)&quot;, container: tokei-pie)</span><br></pre></td></tr></table></figure><p>噢，被 K8$ 拦截了，拦截点在 <code>pkg/kubelet/kuberruntime/security_context_others.go</code> 中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">verifyRunAsNonRoot</span><span class="params">(pod *v1.Pod, container *v1.Container, uid *<span class="type">int64</span>, username <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">effectiveSc := securitycontext.DetermineEffectiveSecurityContext(pod, container)</span><br><span class="line"><span class="comment">// If the option is not set, or if running as root is allowed, return nil.</span></span><br><span class="line"><span class="keyword">if</span> effectiveSc == <span class="literal">nil</span> || effectiveSc.RunAsNonRoot == <span class="literal">nil</span> || !*effectiveSc.RunAsNonRoot &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> effectiveSc.RunAsUser != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> *effectiveSc.RunAsUser == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;container&#x27;s runAsUser breaks non-root policy (pod: %q, container: %s)&quot;</span>, format.Pod(pod), container.Name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> uid != <span class="literal">nil</span> &amp;&amp; *uid == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;container has runAsNonRoot and image will run as root (pod: %q, container: %s)&quot;</span>, format.Pod(pod), container.Name)</span><br><span class="line"><span class="keyword">case</span> uid == <span class="literal">nil</span> &amp;&amp; <span class="built_in">len</span>(username) &gt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;container has runAsNonRoot and image has non-numeric user (%s), cannot verify user is non-root (pod: %q, container: %s)&quot;</span>, username, format.Pod(pod), container.Name)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简而言之，K8$ 先会从镜像的 manifact 中拿镜像的 Runing Username. 如果你镜像里有设置 Runing Username 且你设置了 runAsNoneRoot ，同时你没设置 Run uid，那么会报错。Make Sense，如果你指定的用户名的 uid 是0，那么实际上还是打穿了 SecurityContext 的限制</p><p>找 Frost 要了下他的 Dockerfile，如下</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.10</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> useradd -m tokei</span></span><br><span class="line"><span class="keyword">USER</span> tokei</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> templates /app/templates</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> app.py .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> gunicorn_config.py .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> PATH=<span class="string">&quot;/home/tokei/.local/bin:$PATH&quot;</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;gunicorn&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;gunicorn_config.py&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>OK, 平平淡淡，没有异常。OK，那我啪的一下改了 Deployment，新版如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tokei-pie</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">tokei-pie</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">tokei-pie</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">12</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">tokei-pie</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">tokei-pie</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tokei-pie</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">frostming/tokei-pie-cooker:latest</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;2Gi&quot;</span></span><br><span class="line">            <span class="attr">ephemeral-storage:</span> <span class="string">&quot;3Gi&quot;</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;500m&quot;</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;500Mi&quot;</span></span><br><span class="line">            <span class="attr">ephemeral-storage:</span> <span class="string">&quot;1Gi&quot;</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">runAsNonRoot:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">runAsUser:</span> <span class="number">10086</span></span><br></pre></td></tr></table></figure><p>这里选了我自己的 Magic Number， 10086，这下总没问题了吧，我又 duang 的一下执行了 <code>kubectl apply -f</code>。Oooops，船新的报错</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/python: can&#x27;t open file &#x27;/home/tokei/.local/bin/gunicorn&#x27;: [Errno 13] Permission denied</span><br></pre></td></tr></table></figure><p>OK，那我抛弃我的 Magic Number，换成传说中的数字，1000 来看一下。OK，Works！</p><p>那么这一切到底是为什么呢？那么接下来小编会来告诉你（XD</p><h2 id="简单的介绍，完整的快乐"><a href="#简单的介绍，完整的快乐" class="headerlink" title="简单的介绍，完整的快乐"></a>简单的介绍，完整的快乐</h2><h3 id="容器中的-UID"><a href="#容器中的-UID" class="headerlink" title="容器中的 UID"></a>容器中的 UID</h3><p>首先讲一点前置的知识。首先在 Linux 中的 UID 分配规律。首先在一个 Linux UserNamespace 中，UID 默认的范围是从 0 - 60000。其中 UID 0 是 Root 的保留 UID。从理论上来讲，用户 UID/GID 的创建的范围是从 1 到 60000</p><p>但是实际上可能会更复杂一些，通常各发行版的内置的一些服务，可能会自带一些特殊的用户，比如经典的 www-data （之前没事喜欢搭博客的同学对这个肯定不陌生）。所以实践中，一个 User Namespace 内，一个 UID 的起始，通常是 500 或者 1000。具体的设置，取决于一个特殊文件的设置，<a href="https://man7.org/linux/man-pages/man5/login.defs.5.html">login.defs</a>，路径是 <code>/etc/login.defs</code></p><p>官方文档中描述如下：</p><blockquote><p>Range of user IDs used for the creation of regular users by useradd or newusers. The default value for UID_MIN (resp.  UID_MAX) is 1000 (resp. 60000).</p></blockquote><p>在我们调用 <a href="https://man7.org/linux/man-pages/man8/useradd.8.html"><code>useradd</code></a> 来在构建 Dockerfile 时添加用户。这个时候，在相关操作执行完毕后，会在 <a href="https://linux.die.net/man/5/passwd"><code>/etc/passwd</code></a> 这个特殊文件中添加对应的用户信息。以 Frost 的 Dockerfile 为例，最终的 passwd 文件内容如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</span><br><span class="line">man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</span><br><span class="line">mail:x:8:8:mail:/var/mail:/usr/sbin/nologin</span><br><span class="line">news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</span><br><span class="line">proxy:x:13:13:proxy:/bin:/usr/sbin/nologin</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</span><br><span class="line">backup:x:34:34:backup:/var/backups:/usr/sbin/nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</span><br><span class="line">irc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</span><br><span class="line">_apt:x:100:65534::/nonexistent:/usr/sbin/nologin</span><br><span class="line">tokei:x:1000:1000::/home/tokei:/bin/sh</span><br></pre></td></tr></table></figure><p>那么构建文件结束后，我们来看一下我们常见的容器运行时之一的 Docker 对此相关的处理。</p><p>这里还要科普一点前置的知识，现在 Docker 实际上只能算一个 Daemon+CLI，它核心的功能是调用其背后的 containerd。而 containerd 最终通过 runc 来创建相关的容器</p><p>那我们这里看一下 runc 对此相关的处理</p><p>在 runc 创建容器的时候，会调用 <code>runc/libcontainer/init_linux.go.finalizeNamespace</code> 这个函数完成一些设置，而在这个函数中，会调用 <code>runc/libcontainer/init_linux.go.setupUser</code> 这个函数来完成 Exec User 的设置，我们来看下源码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupUser</span><span class="params">(config *initConfig)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// Set up defaults.</span></span><br><span class="line">defaultExecUser := user.ExecUser&#123;</span><br><span class="line">Uid:  <span class="number">0</span>,</span><br><span class="line">Gid:  <span class="number">0</span>,</span><br><span class="line">Home: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">passwdPath, err := user.GetPasswdPath()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">groupPath, err := user.GetGroupPath()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">execUser, err := user.GetExecUserPath(config.User, &amp;defaultExecUser, passwdPath, groupPath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> addGroups []<span class="type">int</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(config.AdditionalGroups) &gt; <span class="number">0</span> &#123;</span><br><span class="line">addGroups, err = user.GetAdditionalGroupsPath(config.AdditionalGroups, groupPath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rather than just erroring out later in setuid(2) and setgid(2), check</span></span><br><span class="line"><span class="comment">// that the user is mapped here.</span></span><br><span class="line"><span class="keyword">if</span> _, err := config.Config.HostUID(execUser.Uid); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;cannot set uid to unmapped user in user namespace&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> _, err := config.Config.HostGID(execUser.Gid); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;cannot set gid to unmapped user in user namespace&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> config.RootlessEUID &#123;</span><br><span class="line"><span class="comment">// We cannot set any additional groups in a rootless container and thus</span></span><br><span class="line"><span class="comment">// we bail if the user asked us to do so. <span class="doctag">TODO:</span> We currently can&#x27;t do</span></span><br><span class="line"><span class="comment">// this check earlier, but if libcontainer.Process.User was typesafe</span></span><br><span class="line"><span class="comment">// this might work.</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(addGroups) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;cannot set any additional groups in a rootless container&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Before we change to the container&#x27;s user make sure that the processes</span></span><br><span class="line"><span class="comment">// STDIO is correctly owned by the user that we are switching to.</span></span><br><span class="line"><span class="keyword">if</span> err := fixStdioPermissions(config, execUser); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setgroups, err := ioutil.ReadFile(<span class="string">&quot;/proc/self/setgroups&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; !os.IsNotExist(err) &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This isn&#x27;t allowed in an unprivileged user namespace since Linux 3.19.</span></span><br><span class="line"><span class="comment">// There&#x27;s nothing we can do about /etc/group entries, so we silently</span></span><br><span class="line"><span class="comment">// ignore setting groups here (since the user didn&#x27;t explicitly ask us to</span></span><br><span class="line"><span class="comment">// set the group).</span></span><br><span class="line">allowSupGroups := !config.RootlessEUID &amp;&amp; <span class="type">string</span>(bytes.TrimSpace(setgroups)) != <span class="string">&quot;deny&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> allowSupGroups &#123;</span><br><span class="line">suppGroups := <span class="built_in">append</span>(execUser.Sgids, addGroups...)</span><br><span class="line"><span class="keyword">if</span> err := unix.Setgroups(suppGroups); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := system.Setgid(execUser.Gid); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := system.Setuid(execUser.Uid); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if we didn&#x27;t get HOME already, set it based on the user&#x27;s HOME</span></span><br><span class="line"><span class="keyword">if</span> envHome := os.Getenv(<span class="string">&quot;HOME&quot;</span>); envHome == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := os.Setenv(<span class="string">&quot;HOME&quot;</span>, execUser.Home); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大家看注释应该差不多能理解这段代码在干啥，在这段代码将会调用 <code>runc/libcontainer/user/user.go.GetExecUserPath</code> 和 <code>runc/libcontainer/user/user.go.GetExecUser</code> 来获取 exec 时的 UID，我们来看一下这块的实现（下面代码我精简了一部（</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetExecUser</span><span class="params">(userSpec <span class="type">string</span>, defaults *ExecUser, passwd, group io.Reader)</span></span> (*ExecUser, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> defaults == <span class="literal">nil</span> &#123;</span><br><span class="line">defaults = <span class="built_in">new</span>(ExecUser)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Copy over defaults.</span></span><br><span class="line">user := &amp;ExecUser&#123;</span><br><span class="line">Uid:   defaults.Uid,</span><br><span class="line">Gid:   defaults.Gid,</span><br><span class="line">Sgids: defaults.Sgids,</span><br><span class="line">Home:  defaults.Home,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sgids slice *cannot* be nil.</span></span><br><span class="line"><span class="keyword">if</span> user.Sgids == <span class="literal">nil</span> &#123;</span><br><span class="line">user.Sgids = []<span class="type">int</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Allow for userArg to have either &quot;user&quot; syntax, or optionally &quot;user:group&quot; syntax</span></span><br><span class="line"><span class="keyword">var</span> userArg, groupArg <span class="type">string</span></span><br><span class="line">parseLine([]<span class="type">byte</span>(userSpec), &amp;userArg, &amp;groupArg)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert userArg and groupArg to be numeric, so we don&#x27;t have to execute</span></span><br><span class="line"><span class="comment">// Atoi *twice* for each iteration over lines.</span></span><br><span class="line">uidArg, uidErr := strconv.Atoi(userArg)</span><br><span class="line">gidArg, gidErr := strconv.Atoi(groupArg)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Find the matching user.</span></span><br><span class="line">users, err := ParsePasswdFilter(passwd, <span class="function"><span class="keyword">func</span><span class="params">(u User)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">if</span> userArg == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="comment">// Default to current state of the user.</span></span><br><span class="line"><span class="keyword">return</span> u.Uid == user.Uid</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> uidErr == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// If the userArg is numeric, always treat it as a UID.</span></span><br><span class="line"><span class="keyword">return</span> uidArg == u.Uid</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> u.Name == userArg</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; passwd != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> userArg == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">userArg = strconv.Itoa(user.Uid)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;unable to find user %s: %v&quot;</span>, userArg, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> matchedUserName <span class="type">string</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(users) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// First match wins, even if there&#x27;s more than one matching entry.</span></span><br><span class="line">matchedUserName = users[<span class="number">0</span>].Name</span><br><span class="line">user.Uid = users[<span class="number">0</span>].Uid</span><br><span class="line">user.Gid = users[<span class="number">0</span>].Gid</span><br><span class="line">user.Home = users[<span class="number">0</span>].Home</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> userArg != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="comment">// If we can&#x27;t find a user with the given username, the only other valid</span></span><br><span class="line"><span class="comment">// option is if it&#x27;s a numeric username with no associated entry in passwd.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> uidErr != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// Not numeric.</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;unable to find user %s: %v&quot;</span>, userArg, ErrNoPasswdEntries)</span><br><span class="line">&#125;</span><br><span class="line">user.Uid = uidArg</span><br><span class="line"></span><br><span class="line"><span class="comment">// Must be inside valid uid range.</span></span><br><span class="line"><span class="keyword">if</span> user.Uid &lt; minID || user.Uid &gt; maxID &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrRange</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Okay, so it&#x27;s numeric. We can just roll with this.</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里看着很复杂，实际上总结下来就这样</p><ol><li><p>首先从 <code>/etc/passwd</code> 读取已知的所有的用户</p></li><li><p>如果用户启动时传入的是用户名，那么判断是否有用户名和启动参数传入的相等，没有则启动失败</p></li><li><p>如果用户启动传入的是 UID，那么如果在已知用户中有对应的用户，那么设置为该用户。如果没有，则将进程的 UID 设置为传入的 UID</p></li><li><p>如果用户什么都没传入，那么以 <code>/etc/passwd</code> 中第一个用户来作为 exec 用户。默认情况下第一个用户通常是指 UID 为 0 的 root 用户。</p></li></ol><p>OK 那么回到我们的 Deployment 中，那我们不难得出如下的结论</p><ol><li><p>如果我们没有设置 runAsUser ，且镜像里也没指定启动用户，那么我们容器中的进程将以当前 user namespace 中 uid 为 0 的 root 用户启动</p></li><li><p>如果在 Dockerfile 中设定了启动时的用户，且没有设置 runAsUser，那么将以我们在 Dockerfile 中的用户启动</p></li><li><p>如果我们设置了 runAsUser 且 Dockerfile 中也指定了相关的用户，那么将以 runAsUser 所指定的 UID 启动进程</p></li></ol><p>OK 那么，到这里看似问题解决了。但是这里有个新的疑问。通常来说，我们创建文件之类的操作，默认的权限都是 <code>755</code> ，即对于非当前用户，也非当前用户组内的成员，有可读可执行权限。按道理说不应该出现前文所说的 <code>[Errno 13] Permission denied</code> 情况。</p><p>我进容器看了下报错的文件，的确也和我估计的一样，是 755 权限</p><p><img src="https://user-images.githubusercontent.com/7054676/144605351-630025e7-33a7-421e-b471-cb4cc5a217fe.png" alt="gunicorn.py"></p><p>那么问题出在哪呢？问题出在 <code>~/.local/</code> 这个文件夹，</p><p><img src="https://user-images.githubusercontent.com/7054676/144605509-1caf1ac5-85a9-406d-8a7c-5f6714dca6f3.png" alt="~/.local"></p><p>是的没错，这里的 <code>.local</code> 是 700 权限，即对于非当前用户，也非当前用户组内的成员，没有对当前目录的可执行权限。这里大家可能有点迷惑，目录的可执行权限是什么？这里引用下官方文档 <a href="https://www.linux.com/training-tutorials/understanding-linux-file-permissions/">Understanding Linux File Permissions</a> 中的描述</p><blockquote><p>execute – The Execute permission affects a user’s capability to execute a file or view the contents of a directory.</p></blockquote><p>OK，好吧，如果没有对应的目录的可执行权限，那么我们也没法执行该目录里的文件，即便我们有文件的可执行权限。</p><p>而我这里翻了一下 pip 的源码。发现 pip 在用户态安装的时候，如果不存在 .local 目录，那么会创建 .local 目录并将权限设置为 700。</p><p>OK 到这里我们的整个问题的因果链就已经完全建立了</p><blockquote><p>在 dockerfile 中创建并设置用户 tokei，uid 1000 -&gt; pip 创建了 700 的 .local， .local 归属 UID 1000 的用户-&gt; 我们 runAsUser 设置为 非 1000 的数字 -&gt; 无 .local 的可执行权限 -&gt; 报错</p></blockquote><p>说实话，我能理解 pip 为什么这么设计，但是我觉得这样的设计是有一点 broke 了一些约定俗成的规矩的，其合理性有待商榷</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个问题其实不算难查，但是发生的位置是我有点没有想到的，从我的角度来看，归根结底还是在与 pip 不遵守基本法造成的23333</p><p>这里留个题目大家有兴趣可以思考下。我们都知道 Docker 有个命令是 <code>docker cp</code> 是从宿主机往运行的容器中拷贝文件/从容器中往宿主机中拷贝文件。有个参数是 <code>-a</code> ，即保留原文件的 UID/GID，那么如果我们用这个参数从宿主机/容器往容器/宿主机中拷贝文件，那么我们 ls -lh 时，可以看到怎样的 User/UserGroup 信息。</p><p>OK，这篇水文就先写到这里，写水文真快乐。周末要是有时间的话，可以再写个水文简单聊聊一个关于最近遇到的一个很有趣的根据特征封锁 SSL 流量的手法分析</p><p>好了，溜了溜了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天不太舒服，在家请假了一天。突然想起最近因为一些小问题，看了下关于容器中 UID 的东西。所以简单来聊聊这方面的东西。算个新手向的文章&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/Linux/"/>
    
    
    <category term="编程" scheme="https://manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://manjusaka.blog/tags/Linux/"/>
    
    <category term="笔记" scheme="https://manjusaka.blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="水文" scheme="https://manjusaka.blog/tags/%E6%B0%B4%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>聊聊 sk_buff 中一个冷门字段: nohdr</title>
    <link href="https://manjusaka.blog/posts/2021/11/22/a-litte-introduction-about-nohdr-filed-in-skbuff/"/>
    <id>https://manjusaka.blog/posts/2021/11/22/a-litte-introduction-about-nohdr-filed-in-skbuff/</id>
    <published>2021-11-22T13:00:00.000Z</published>
    <updated>2022-11-20T15:39:13.817Z</updated>
    
    <content type="html"><![CDATA[<p>今天遇到一个很有意思的问题，“nohdr 字段到底有什么用”，在这里写个水文简单记录一下</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h3><p>首先来说，不管介绍再冷门的字段，既然涉及到 SKBUFF ，那么就得先来对 sk_buff 做个简单的介绍</p><p>简而言之，sk_buff 是 Linux 网络子系统的核心数据结构，从链路层到我们最终对数据包的操作，背后都离不开 sk_buff </p><p>sk_buff 要完全讲解基本就相当于把 Linux 网络系统完全讲解了，所以讲完是不可能讲完的，这辈子都不可能的！</p><p>简单聊几个关键，可能会帮助大家理解我们本文提到的冷门字段 nohdr 的关键字段吧</p><p>首先来讲，最重要的三个字段：<code>data</code> ，<code>mac</code> 和 <code>nh</code> ，分别代表着当前 sk_buff 的数据区的起始地址，L2 header 的起始地址，L3 Header 的起始地址。用一个图方便大家理解</p><p><img src="https://user-images.githubusercontent.com/7054676/142876157-422a2115-15bb-4b9e-8ed7-9335c09b695f.png" alt="sk_buff 三剑客"></p><p>看了图的同学可能会有点明白了，实际上在内核里，也是一层一层的通过指针偏移，不断的添加新的 header 来处理网络请求。和我们直觉相符。可能有同学会问，我既然知道 L3 Header 的起始地址，IP 之类的 L3 协议的 header 长度是固定的。我是不是可以算出 L4 的偏移，然后手动处理。</p><p>Bingo，内核里有 <code>tcphdr</code> 的数据结构（对应 IP 是 <code>iphdr</code> ），你根据偏移，手动 cast 就可以手动处理。不过详细做法以后再聊</p><p>接着两个比较重要的字段，是 <code>len</code> 和 <code>data_len</code> ，这两个字段都是标识数据长度，但是简要来说，len 代表着当前 sk_buff 所有数据的长度（即包含当前协议的 header 和 payload），data_len 代表当前有效数据长度（即当前协议 payload 长度）</p><p>OK，前情提要到此结束</p><h3 id="关于-nohdr"><a href="#关于-nohdr" class="headerlink" title="关于 nohdr"></a>关于 nohdr</h3><p>花开两朵，各表一支。聊了 sk_buff 一些预备知识，我们来聊一下 <code>nohdr</code> 这个字段。说实话这个字段真的很冷门</p><p>首先官方对此有对应描述</p><blockquote><p>The ‘nohdr’ field is used in the support of TCP Segmentation Offload (‘TSO’ for short). Most devices supporting this feature need to make some minor modifications to the TCP and IP headers of an outgoing packet to get it in the right form for the hardware to process. We do not want these modifications to be seen by packet sniffers and the like. So we use this ‘nohdr’ field and a special bit in the data area reference count to keep track of whether the device needs to replace the data area before making the packet header modifications.</p></blockquote><p>嗯，这段属实有点拗口。首先 TSO 大家肯定有所所了解。利用网卡来对大数据包进行分段（具体 Linux 下 GSO/TSO 的实现可以改天鸽一篇文章来聊），那么在这种情况下，网卡可能会需要对 header 部分进行一点小的修改来完成分片的操作。</p><p>但是有些时候，我们对于 L4 这一层的包，我并不需要关心其被修改的 Header ，只需要关心其 payload，那么怎么搞。这个时候就是 <code>nohdr</code> 发挥作用了。</p><p>在这里， <code>nohdr</code> 生效还需要配合另外一个字段，<code>dataref</code> 。 <code>dataref</code> 是一个计数字段，其具体的含义是指当前 data 字段所指向的数据区，被多少个 sk_buff 所引用。在这里有两种情况</p><ol><li><p>在 nohdr 为 0 的情况下，dataref 值为数据区的引用计数</p></li><li><p>在 nohdr 为 1 的情况下，高16位，是数据区中 payload 数据区的引用计数，低16位是数据区的引用计数</p></li></ol><p>对此官方有这样的描述</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* We divide dataref into two halves. The higher 16 bits hold references * to the payload part of skb-&gt;data. The lower 16 bits hold references to * the entire skb-&gt;data. It is up to the users of the skb to agree on * where the payload starts.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* * All users must obey the rule that the skb-&gt;data reference count must be * greater than or equal to the payload reference count.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* * Holding a reference to the payload part means that the user does not * care about modifications to the header part of skb-&gt;data.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SKB_DATAREF_SHIFT 16 #<span class="keyword">define</span> SKB_DATAREF_MASK ((1 &lt;&lt; SKB_DATAREF_SHIFT) - 1)</span></span><br></pre></td></tr></table></figure><p>实际上这里也不太难理解为什么这么设计。首先来说，我们在内核里去获取数据包的时候，有些时候不需要去关心具体的 header，只需要关心具体的 payload。 而我们对于 payload 的引用计数，也需要单独的处理来保证其正确性。这样确保我们的数据还没处理完的时候。数据片不会被内核提前释放。当然这里需要大家在处理这块的时候需要保证数据区的引用计数要大于 payload 的引用计数（感觉这里像约定大于配置的做法？（当然这里不遵守约定的后果就是你内核 dump 了2333</p><p>在最后，我们的内核也通过 dataref 来在合适的时机释放数据区的内存空间，释放条件是满足以下其一即可</p><ol><li>!skb-&gt;cloned: skb 没有 被 clone</li><li>!atomic_sub_return(skb-&gt;nohdr ? (1 &lt;&lt; SKB_DATAREF_SHIFT) + 1 : 1, &amp;skb_shinfo(skb)-&gt;dataref) 即在 nohdr 为 1 的时候通过 dataref-(1 &lt;&lt; SKB_DATAREF_SHIFT) + 1) 判断是否需要释放数据区。而 nohdr 为 0 的时候通过 dataref-1 来决定是否需要释放数据区</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>水文差不多就这样。。<code>nohdr</code> 真的是个很冷门的字段。嗯，因为这篇水文的一些 reference 是在地铁上查的。。我就懒得列在文章里了。。差不多这样。。写题去了。。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天遇到一个很有意思的问题，“nohdr 字段到底有什么用”，在这里写个水文简单记录一下&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/Linux/"/>
    
    
    <category term="编程" scheme="https://manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://manjusaka.blog/tags/Linux/"/>
    
    <category term="笔记" scheme="https://manjusaka.blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="水文" scheme="https://manjusaka.blog/tags/%E6%B0%B4%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>关于 Node.js 中 execSync 的一点问题</title>
    <link href="https://manjusaka.blog/posts/2021/08/24/a-little-problem-about-posix-node-js-execsync/"/>
    <id>https://manjusaka.blog/posts/2021/08/24/a-little-problem-about-posix-node-js-execsync/</id>
    <published>2021-08-24T13:00:00.000Z</published>
    <updated>2022-11-20T15:39:13.817Z</updated>
    
    <content type="html"><![CDATA[<p>很久没写水文了，昨天帮人查了一个 Node.js 中 <code>execSync</code> 这个函数特殊行为的问题，很有趣，所以大概记录下来水一篇文章</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>首先老哥给了一张截图</p><p><img src="https://user-images.githubusercontent.com/7054676/130622339-57e6a954-926e-4741-93a9-bc1ba0d155d8.png" alt="问题截图"></p><p>首先基本问题可以抽象为在 Node.js 中利用 <code>execSync</code> 这个函数执行 <code>ps -Af | grep -q -E -c &quot;\\-\\-user-data-dir=\\.+App&quot;</code> 这样一条命令的时候，Node.js 时不时会报错。具体堆栈大概为</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Uncaught Error: Command failed: ps -Af | grep -q -E -c &quot;\-\-user-data-dir=\.+App&quot;</span><br><span class="line">    at checkExecSyncError (child_process.js:616:11)</span><br><span class="line">    at Object.execSync (child_process.js:652:15) &#123;</span><br><span class="line">  status: 1,</span><br><span class="line">  signal: null,</span><br><span class="line">  output: [ null, &lt;Buffer &gt;, &lt;Buffer &gt; ],</span><br><span class="line">  pid: 89073,</span><br><span class="line">  stdout: &lt;Buffer &gt;,</span><br><span class="line">  stderr: &lt;Buffer &gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是同样的命令在终端上并不会有类似的现象。所以这个问题有点困扰人</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先先看一下 Node.js 文档中对 <code>execSync</code> 的描述</p><blockquote><p>The child_process.execSync() method is generally identical to child_process.exec() with the exception that the method will not return until the child process has fully closed. When a timeout has been encountered and killSignal is sent, the method won’t return until the process has completely exited. If the child process intercepts and handles the SIGTERM signal and doesn’t exit, the parent process will wait until the child process has exited.<br>If the process times out or has a non-zero exit code, this method will throw. The Error object will contain the entire result from child_process.spawnSync().<br>Never pass unsanitized user input to this function. Any input containing shell metacharacters may be used to trigger arbitrary command execution.</p></blockquote><p>大意就是，这个函数通过子进程来执行一个命令，在命令执行超时之前会一直等待。OK 没有问题。那接下来，我们先来看一下上面提到的报错堆栈以及 <code>execSync</code> 的实现代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">execSync</span>(<span class="params">command, options</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> opts = <span class="title function_">normalizeExecArgs</span>(command, options, <span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> inheritStderr = !opts.<span class="property">options</span>.<span class="property">stdio</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> ret = <span class="title function_">spawnSync</span>(opts.<span class="property">file</span>, opts.<span class="property">options</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (inheritStderr &amp;&amp; ret.<span class="property">stderr</span>)</span><br><span class="line">    process.<span class="property">stderr</span>.<span class="title function_">write</span>(ret.<span class="property">stderr</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> err = <span class="title function_">checkExecSyncError</span>(ret, opts.<span class="property">args</span>, command);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (err)</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret.<span class="property">stdout</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkExecSyncError</span>(<span class="params">ret, args, cmd</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> err;</span><br><span class="line">  <span class="keyword">if</span> (ret.<span class="property">error</span>) &#123;</span><br><span class="line">    err = ret.<span class="property">error</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret.<span class="property">status</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> msg = <span class="string">&#x27;Command failed: &#x27;</span>;</span><br><span class="line">    msg += cmd || <span class="title class_">ArrayPrototypeJoin</span>(args, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret.<span class="property">stderr</span> &amp;&amp; ret.<span class="property">stderr</span>.<span class="property">length</span> &gt; <span class="number">0</span>)</span><br><span class="line">      msg += <span class="string">`\n<span class="subst">$&#123;ret.stderr.toString()&#125;</span>`</span>;</span><br><span class="line">    <span class="comment">// eslint-disable-next-line no-restricted-syntax</span></span><br><span class="line">    err = <span class="keyword">new</span> <span class="title class_">Error</span>(msg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="title class_">ObjectAssign</span>(err, ret);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们能看到，这里 <code>execSync</code> 在执行完命令执行代码后，会进入 <code>checkExecSyncError</code> 来检查子进程的 <code>Exit Status Code</code> 是否为0，不为0则认为命令执行出错，然后抛出异常。</p><p>看起来没有问题，那么也就是我们执行命令的时候出错了？那我们验证下吧</p><p>对于这种涉及 Linux 下 Syscall 问题排查的工具（这个问题在 Mac 等环境下也存在，不过我为了方便排查，跑去 Linux 上复现了），除了 <code>strace</code> 好像也暂时找不到更成熟方便的工具了（虽然基于 eBPF 也能做，但是说实话自己现撸绝对没 <code>strace</code> 的效果好。</p><p>那么上命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo strace -t -f -p <span class="variable">$PID</span> -o error_trace.txt</span><br></pre></td></tr></table></figure><blockquote><p>tips: 在使用 strace 的时候可以利用 -f 参数，可以 trace 被 trace 进程创建的子进程</p></blockquote><p>好了执行命令，成功拿到整个 syscall 的调用链路，OK 开始分析</p><p>首先我们将目光很快定位到了最关键的部分（因为整个文件太长，有将近 4K 行，我就直接挑重点部分分析了）</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">894259 13:21:23 clone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7f12d9465a50) = 896940</span><br><span class="line">...</span><br><span class="line">896940 13:21:23 execve(&quot;/bin/sh&quot;, [&quot;/bin/sh&quot;, &quot;-c&quot;, &quot;ps -Af | grep -E -c \&quot;\\-\\-user-da&quot;...], 0x4aae230 /* 40 vars */ &lt;unfinished ...&gt;</span><br><span class="line">...</span><br><span class="line">896940 13:21:24 &lt;... wait4 resumed&gt;[&#123;WIFEXITED(s) &amp;&amp; WEXITSTATUS(s) == 1&#125;], 0, NULL) = 896942</span><br><span class="line">896940 13:21:24 --- SIGCHLD &#123;si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=896942, si_uid=1000, si_status=1, si_utime=0, si_stime=0&#125; ---</span><br><span class="line">896940 13:21:24 rt_sigreturn(&#123;mask=[]&#125;) = 896942</span><br><span class="line">896940 13:21:24 exit_group(1)           = ?</span><br><span class="line">896940 13:21:24 +++ exited with 1 +++</span><br></pre></td></tr></table></figure><p>首先这里科普一下，Node.js 中没有直接使用 <code>fork</code> 来创建新的进程，而是使用 <code>clone</code> 来创建新的进程，至于两者之间的差别，要详细说的话，可以单独水一篇超长文了（我先立个 flag）这里先用官方的说法大概描述下</p><blockquote><p>These system calls create a new (“child”) process, in a manner similar to fork(2).<br>By contrast with fork(2), these system calls provide more precise control over what pieces of execution context are shared between the calling process and the child process.  For example, using these system calls, the caller can control whether or not the two processes share the virtual address space, the table of file descriptors, and the table of signal handlers.  These system calls also allow the new child process to be placed in separate namespaces(7).</p></blockquote><p>用简短的概括性的话来描述就是,<code>clone</code> 提供了 <code>fork</code> 近似的语义,不过通过 <code>clone</code> ,开发者能更细粒度的控制进程/线程创建过程中的细节</p><p>OK, 这里我们看到 <code>894259</code> 这个主进程通过 <code>clone</code> 创建了 <code>896940</code> 这个进程。在执行过程中, <code>896940</code> 这个进程利用 <code>execve</code> 这个 syscall 通过 sh (这是 <code>execSync</code> 的默认行为)我们的命令 <code>ps -Af | grep -q -E -c &quot;\\-\\-user-data-dir=\\.+App&quot;</code>。 OK，我们也看到了，<code>896940</code> 在退出的时候，的确是以 1 的 exit code 退出的，和我们之前的分析一致。那么换句话说，在我们执行命令的时候，有 error 的出现。那么这里的 error 出现在哪呢？</p><p>我们分析一下命令，如果熟悉常见 shell 的同学可能发现了，我们的命令中实际上使用了管道操作符 | ，不精确的来说，当这个操作符出现的时候，前后两个命令将分别在两个进程执行，然后通过 pipe 进行 IPC。那么换句话说，我们可以很快定位这两个进程，直接快速搜了一下文本</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">896941 13:21:23 execve(&quot;/bin/ps&quot;, [&quot;ps&quot;, &quot;-Af&quot;], 0x564c16f6ec38 /* 40 vars */) = 0</span><br><span class="line">...</span><br><span class="line">896942 13:21:23 execve(&quot;/bin/grep&quot;, [&quot;grep&quot;, &quot;-E&quot;, &quot;-c&quot;, &quot;\\-\\-user-data-dir=\\.*&quot;], 0x564c16f6ecb0 /* 40 vars */ &lt;unfinished ...&gt;</span><br><span class="line">...</span><br><span class="line">896941 13:21:24 &lt;... exit_group resumed&gt;) = ?</span><br><span class="line">896941 13:21:24 +++ exited with 0 +++</span><br><span class="line">...</span><br><span class="line">896942 13:21:24 exit_group(1)           = ?</span><br><span class="line">896942 13:21:24 +++ exited with 1 +++</span><br></pre></td></tr></table></figure><p>OK，我们发现 <code>896942</code> 即执行 <code>grep</code> 的进程直接以 exit code 1 退出了。那么这是为什么呢？？看了下 <code>grep</code> 的官方文档，，卧操，差点吐血</p><blockquote><p>Normally, the exit status is 0 if selected lines are found and 1 otherwise. But the exit status is 2 if an error occurred, unless the -q or –quiet or –silent option is used and a selected line is found. Note, however, that POSIX only mandates, for programs such as grep, cmp, and diff, that the exit status in case of error be greater than 1; it is therefore advisable, for the sake of portability, to use logic that tests for this general condition instead of strict equality with 2.</p></blockquote><p>如果 grep 没有匹配到数据，那么会以 1 作为 exit code 退出进程。。如果匹配到了，则0退出。。但是，但是，卧操，卧操。。按照标准语义，exit code 1 的含义难道不是 <code>Operation not permitted</code> 吗？？完全不按基本法出牌！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>实际上通篇看了下来，我们可以总结出两个原因</p><ol><li>Node.js 在对 POSIX 相关 API 进行抽象封装的时候，直接按照了标准语义，给用户兜底了。虽然从理论上讲这应该是个应用自决的行为</li><li>grep 没有按照基本法办事</li></ol><p>说实话我也不知道怎么去评价这两方面谁更坑一点。按照前面所说么处理子进程的 exit code 从理论上讲这应该是个应用自决的行为，但是 Node.js 自己做了一层封装，在节省用户心智的同时，遇到一些非标场景，也会有不小的隐患了。。</p><p>只能说不断根据不同的场景做 trade-off 吧</p><p>好了，这篇文章就到这里了，因为是临时起义，所以我就懒得将相关 Reference 列在文里了。差不多这样吧，水文目标达成.jpg</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;很久没写水文了，昨天帮人查了一个 Node.js 中 &lt;code&gt;execSync&lt;/code&gt; 这个函数特殊行为的问题，很有趣，所以大概记录下来水一篇文章&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/Linux/"/>
    
    
    <category term="编程" scheme="https://manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://manjusaka.blog/tags/Linux/"/>
    
    <category term="笔记" scheme="https://manjusaka.blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="水文" scheme="https://manjusaka.blog/tags/%E6%B0%B4%E6%96%87/"/>
    
    <category term="Node.js" scheme="https://manjusaka.blog/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>关于我自己被性侵经历的访谈记录</title>
    <link href="https://manjusaka.blog/posts/2021/05/07/something-I-want-to-share-about-sex-assault1/"/>
    <id>https://manjusaka.blog/posts/2021/05/07/something-I-want-to-share-about-sex-assault1/</id>
    <published>2021-05-07T13:00:00.000Z</published>
    <updated>2022-11-20T15:39:13.821Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章是我 2020 年 12 月接受华中师范大学关于儿童性侵的采访所产生采访稿。在这次采访中，我完整的复盘了在我12岁那年发生在我身上的强奸事件。在这次采访中，我完整回顾了当时我和我家庭的一些反应，也表达了我一些关于性侵这件事的看法。我希望每个人都能平安顺利的过完一生，但是如果有不好的事情发生的时候，我希望这篇文章能帮到你。Everything is gonna be OK。</p><span id="more"></span><h2 id="采访稿"><a href="#采访稿" class="headerlink" title="采访稿"></a>采访稿</h2><table><thead><tr><th><strong>时间标签</strong></th><th><strong>说话人</strong></th><th><strong>逐字稿</strong></th><th><strong>备忘录</strong></th></tr></thead><tbody><tr><td></td><td>访谈对象：</td><td>Hello，你好。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>Hi，你好啊。好，那在开始之前我再说一下我们的知情同意书吧，就是前面也发给你过。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>哦，对，我看了，啊，签名我忘了签了。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>没事，等一下发给我也行。知情同意书主要包括研究目标：就是聚焦于探索儿童期性创伤经历者的创伤应对和表露过程。然后你说的话对于我来说，都很重要，所以需要录音，我们的访谈大概持续是三十到六十分钟。如果说这次访谈中断或者没有完成的话，可以协商下一次。参与这个研究，你随时都有权利选择退出，访谈过程中或遇到一些你不想回答的问题，你都可以选择拒绝回答。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>嗯，没问题没问题。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>还有一些小小的风险，就是可能会谈到一些触动你情绪的这件事的时候，可能就会引起你的情绪有些波动。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>嗯，没事儿，快乐水我已经准备好了（笑）。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，好，但是呢我会就是照顾到你的情绪，因为我是有做过心理咨询的经验的。嗯，然后还有就是你的个人隐私处理问题。首先就是这个录音我会给它变进行一个变音，我处理好逐字稿之后就会把它删除。然后还有就是你的一些能够辨认出你个人信息的内容，我会进行一个匿名化的处理。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>之后你生成的就说是paper，我能够拿到一份拷贝吗？</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，你是说论文吗？可以。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对，是的是的是的，没错，就是你的相关研究结果。因为我其实对这个事情很好奇，因为我我其实一直是在做性侵这方面公益的。但是据我所知的话，其实国内这方面对于专门性侵受害者的研究，其实我觉得好像还是一个很偏门的领域。我其实挺好奇的。对，因为当时你在这个过程中说的时候，我其实也挺好奇的你为啥会选择这个方向。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>这个通过我看论文的时候我就发现了，因为国内真的很少，就是比较权威的论文，真的非常少。我参考的文献全部都是英文的，就看论文的时候还是挺痛苦的。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>就是因为我自己亲身经历，还有我去跟就是给别人做。因为我之前在做公益嘛，就是校园暴力，其实校园性侵属于校园暴力一种嘛。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>然后的话做的时候，我发现其实国内对于这方面，研究特别少。包括就是说起因、结果的研究，包括怎么样去做进行一个系统性的，就是说是受创伤后的心理干涉的介入。我觉得这方面研究好像都很少，我其实挺好奇的。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，确实很少。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>哎，你们导师也是专门做这一块的？</td><td></td></tr><tr><td></td><td>访谈者：</td><td>没有，我们导师主要是做危机干预和自杀预防的。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>啊，对，自杀干预前几年好像也是比较少。做自杀干预很有必要，我的好朋友八月份就离世了，就因为这抑郁症。来吧，我们现在就开始吧。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，行，好，那开始之前我再做一个自我介绍吧。尽管前面已经介绍过了，我是来自河南信阳，然后今年26岁，是现在是在华中师范心理学院的在读研究生。然后很高兴，也很感谢你能够愿意支持，然后参与这个研究。好，在开始之前你也就是简单做一个自我介绍，包括年龄啊，职业还有居住地和婚姻状况。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>啊，我现在很明显未婚，然后的话成都人，然后年龄的话，我九四年的跟你同岁。然后但是不知道我们月份谁大谁小。然后现在程序员然后在阿里。嗯，对，就是差不多这个情况。我受侵犯的年纪。我想想具体年份，啊，零七年到现在已经是快14年了，已经是十多年了。所以当时应该是我13岁的时候。13岁未满，07年2月，我没记错的话。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>还是能够记得很清楚的。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对，因为我其实我自己是选择把我很多事情公开出来。因为我觉得国内对于同性……因为我其实是比较，呃，在常规的…（遭遇性侵）这样是比较少见的，我是同性的性侵。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对对，然后然后大家可能更focus 在就是说我异性的性侵。但是国内的性侵的话，对于同性性侵其实这一块比异性的研究更少，而且是什么，法律也不完善。所以说我是会刻意的记忆，然后把这个事情分享出来。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>这比一般女生更需要勇气。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>啊，其实还好，其实还好。对，我觉得其实男生来讲，就拿我自己的亲身经历来讲，其实男生受创伤它是一个持续的过程，它是一个持续的过程，可能你小时候觉得做出这个事情有点无所谓。但是当你大了之后，潜意识了，因为我之前抑郁过嘛，我之前抑郁过，去做过心理诊断。然后当时就是说是心理咨询师就确定了诱因，有一个其中的诱因可能就是这件事引发了一个长期性的一个p t s d 。然后，对，然后可能说比女性来得更猛一些。但是可能说，但是在社会舆论氛围上相对能够获得就更多的，就是说可能说宽容一些，或者说是我也不知道怎么界定啊。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，好，那现在我们就开始吧，就按照我的访谈提纲。我们就像讲故事那样的方式，以时间发展顺序来讲一下。就是当时遭遇侵犯的背景，然后还有你当时是怎么去应对处理的。在这个过程中你经历了怎么样的一个心路历程。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>哦，o k ，其实我的话当时是在住宿学校，然后的话，因为就是这个事情可能就比较长。就是我在住宿学校，然后我当时也不算太合群的一个人。然后就是可能就说校官就界定了，界定了就是说这个是一个小孩子，而且他可能也是有性需求嘛。然后现在我想起来他部队退役的，然后就这是一个性需求。嗯，那么他会长期的培养我一个服服从。就比如说平时就因为我当时是就是有点不听话的小孩子嘛。然后就比如说训练军姿啊训练或者其他的，那么服从之后呢，然后就在事发当天晚上，然后把我拉到一个卧室去，然后去喝了一些酒，然后这个事情。就是我彻底就失去了反抗的这个意识了，就是说，那么这个事情就发生了。至于发生之后的话，就是说发生之后，我第二天早上回去，然后我爸请我吃香肠，当时刚过年不久嘛，我们家还有香肠，然后我就回家，因为那个时候是晚上是周五晚上，然后第二天周六回家，然后当时就觉得不太对劲，然后就很不爽，然后跟我爸说了这事。然后我家里人就发现，就可能说知道我被性侵了，然后就赶紧去报警，然后做了就是精液采集，然后做了笔录。然后后面的话，在大概在一年之后，他定罪之前，又重新做了一次我的d n a 鉴定。因为体液采集是从我身上采集的嘛，然后做了一次d n a 鉴定。然后你要说心路历程的话，其实，嗯，跟女孩子不同的是，男孩子其实可能最开始在小时候，最开始可能他并不会认识到这是一次强奸。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>其实女孩子也不知道。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>呃，女孩子可能最开始知道，因为女孩子可能从小父母就教育她，说你那个地方很羞羞的嘛，然后你就，然后不能让男孩子碰。然后或者碰到这个地方对你不好，可能是有这样一个介绍。那么女孩子最开始会就会觉得这个地方是有个耻辱感，就有个很明确的耻辱感，很明确的被侵犯感。而男孩子可能说，就我自己的亲身经验来讲，你最开始其实反应可能可能并不会太强烈。就可能你最开始都不知道这发生了什么，就觉得很不舒服很不爽。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>然后你第二天早上就跟你父亲说了？</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对，因为当时我觉得就很不爽。对，然后又因为香肠那个诱因嘛，然后这个东西大家都理解，然后就是加上香肠这个诱因。然后的话就我父亲就发现我的异样，然后就去报警。对。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>那你父亲还挺细致的一个人。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对，我父亲，其实这一件事情我一直很感谢我父亲。因为如果说是传统家长，可能就会考虑说，啊，出于名誉考虑遮盖子嘛，对，遮盖子，然后就说或者说：哎，事情发生就发生了，过。然后就报警了，然后最后那个哥们儿是以猥亵儿童罪被判4年，我就记得没错。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>4年。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对，因为因为男生很尴尬的一点，就是说他不是…因為國內的法律的性侵，它强奸是针对于女性的一个性器官的插入说，而对于男生来讲它其实是没有强奸这个说法的，而我当时凑巧的是我年龄小于十四岁，然后所以说他以那个侵犯儿童、猥亵儿童罪，刑法二百三十几条，我记得没错的话，然后他就入刑了。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，就是这样看来的话，家庭关系其实也很重要。你和父亲的交流……</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>非常的重要，非常的重要，我觉得其实很……就是说我自己身边也有被性侵的。其实这个事情的伤害程度很取决于家庭对这个事情的处理。如果你家庭觉得说：这是一个性侵。那么我及时报警，然后寻求公权或者说警察的帮助。那么这个事情呢受伤害或者说再配合再更开明一点，配合及时的心理介入干涉。那么这个伤害会控制到非常小的点。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，就是你父亲知道之后，他当时的一个反应是什么样的，还有包括你的家里人反应？</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>呃，我其实我父亲他在我面前其实没有表现太多的焦虑。嗯，对我父亲懂得，家长嘛，就是可能说再天大的事，可能也不能在孩子面前（焦虑，不淡定）…我母亲当时是在成都，然后我在小地方，我小时候出生在小地方，这个钢铁城市嘛，然后，对，我父亲然后当时其实是很淡定的，当时他做了两件事，我没记错的话，第一个他给他朋友打电话，就是说他怕警察不认这个事情。于是他找他朋友咨询：我能不能去其他的诊所？先将精液或者说其他的体液部分固定下来，然后后面发现这些事情好像并不合规。然后我父亲就当时把我带到了那个住宿学校的辖区的派出所去做了那个就是说笔录，包括第一波的体液采集，对。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>你父亲真的很厉害。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>嗯，对。然后就是后面的话，然后出于其他考虑，然后他就将我带来成都了嘛。对，然后的话就说是和那个环境做隔离。因为这个事情整个公开报道出去其实还是会对你的成长造成一个影响，因为这个特别是教育系统，就是基本上是教育系统，你一出去，一转学，大家一打听就知道这孩子不太对劲（笑）。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯。就是那你对于你父亲当时那个处理，你当时心里面就是有一个什么样的状态？</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>嗯，其实我当时还是懵懂的状态，其实还是懵懂的状态。就是说，包括体液采集，做笔录的时候，我当时其实并没有意识到这个事情是一个强奸。我当时其实心里没有很明确的这个词，这个是对于男生的一个强奸。然后我其实就觉得这可能是个不好的事情。嗯，然后呢那么我就配合警察，把这个事情完全记录、说出来。然后做笔录，其实还是小孩子对于，就是说当时去做这一套，我父亲替我拍了板之后，我当时做这一套核心的一个动机，更可能还是说，呃，小孩子对于长辈，对于就是说是或者说其他的一个服从，就是我当时并没有意识到这个东西发生了什么。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，那你后来什么时候开始意识到这件事情它的一个性质是什么的？</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>唔，其实初步意识到应该是在高中，然后完整的去复盘我自己的这件事儿的话，应该是在大学。应该是在快毕业的时候，当时其实，呃，我完整的复盘其实诱因应该是国内的me too 运动。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯嗯。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对，实际上是应该是me too 运动。然后诱因…，我其实之前有个粗浅的复盘，但是真正的去重新的就是从头到尾的去审视这件事是就应该是me too，对，然后的话对，差不多就是这样一个情况。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>就是这件事情对你有什么影响？就是从它发生一直到现在的话，对你有什么影响？</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>呃，其实我觉得你要说真正的影响很难量化。因为就是说很多东西就包括我去做心理咨询之后，其实医生的看法就是说这个事情是潜移默化的，就是说潜移默化的一个伤害，就是说是长期性的一个p t s d。然后当时我去医院去确诊，然后就因为我当时是确诊抑郁症嘛，然后重度抑郁，然后是伴自杀焦虑，然后的话就是自杀倾向。然后的话，呃，当时其实医生当时听我把这个事情清理完整描述过之后，医生的评价就是说是你这个抑郁的有一部分其实就是来源于你这件事儿。嗯，就说，对，对，因为就是什么，因为我是抑郁需要吃药并伴做那个心理干涉嘛，然后，对，但是就是说你要说这件事情有什么明显的，就是说后遗（症），一个就是要很量化的，就是说你觉得这个事情对你影响有多大，我觉得这没量化。我觉得这个东西是一个潜移默化的过程。因为我当时是在受侵害的，最开始他是没有做到一个系统的心理干涉，我是没有做到的。对，可能对于同性的时候，可能说最开始你觉得没什么，但是越想越想觉得有事儿。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>那你诊断为抑郁症的时候，大概是多大？</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>啊，应该是在17年。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，在三年前。就是在此之前就没有表现出来一些具体的症状？</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>有，其实有我一直神经衰弱，但是我其实在大学的时候应该是有，但是我是没有去确诊的，因为就是说没有确诊。对，但是正式确认是在17年。对，然后的话，所以说我觉得这个事情可能更可能来讲还是一个长期的一个潜移默化的。就是说它并不会对你就是说你一下子觉得：哎，你自己不是一个干净的人，你一下子觉得你想跳楼了。我觉得这个不存在，但是可能就是说潜移默化的过程。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>那你觉得这种潜移默化主要是来自于哪里呢？</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>我觉得可能最开始就是打破你自己的，就说是一个完整感。就是说你自己觉得自己是一个不完整，或者说是你觉得你自己是…用这种传统的话来讲呢，就是你自己是个不干净的，懂我意思吧？</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对，就是我自己猜的话，潜意识可能会给自己加一个这样的，其实我觉得可能说。呃，然后你就会觉得你自己说话会比别人低一头或者是其他。对，我觉得这个可能还是一个社会氛围所造成的吧。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，就是在高中之后慢慢的开始有这种意识。那其实对是小一点的话，你其实还是不太知道这件事情是什么性质？</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对，对，对，男生其实很麻烦的一件事就在这个地方，最开始如果你是被性侵的那个男生，男生你在小时候你可能会觉得这是一个游戏，你可能会去更觉得这是一个游戏。但是你在大了之后，你会发现慢慢觉得这不是…（一个词，听不清）欸？怎么这么不太对劲啊？</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，就是慢慢的意识到的。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对，是的，没错。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>你就是最开始就已经选择，也不是说你主动告诉你父亲，就是你父亲他自己觉察到这件事情。那再后来你有没有再表露过这件事情？嗯，再一次向别人说这件事情的时候是什么时候，然后是什么原因？</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>我其实应该是还是在大学吧。然后我其实之前其实只跟几个好朋友说过，然后我正式选择公开这件事情，应该还是在大学或者说快毕业，me too事件之后，因为我觉得可能说我的经（历），因为我当时其实有个背景是我也是在做公益，我之前是救援队的。然后的话我之前大学在救援队服务，然后是以私人身份去做一些，然后就包括啊校园校园暴力和校园性侵，资助我也在做。呃，我可能觉得，更觉得这件事的话，可能就是说，我需要让这件事变得有意义。然后于是我选择就是说公开的把我这个经历分享出来。因为我觉得可能说，呃，一个事情如果只能变成你自己的痛苦，或者说你自己的建议，那么你自己是否痛苦其实是没有太大意义的。对，而且我这个事情又是相对来说对别人更容易产生帮助的，因为其实你知道儿童期间的性侵其实是很常见的一个事情。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯嗯。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对，其实是，然后家庭，就是说父母的干涉又是非常重要的。我选择的在知乎，你看到我的那个答案，包括我选择的一些社群里面把这个事情，呃，就是说我自己的当时的经历，以及我家庭所做的一些手段，包括我家庭当时做的不足的地方，就因为认知的关系嘛，没有给我寻求及时的心理介入，这些事情分享出来我就是希望说，我自己能够把这些，啊，把我自己的经历能够变得更为有意义一点，然后不仅限于我自己所受到的伤害。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>做的真的很好。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>唉，（深深叹一口气）对，这也是我参加你的这个研究的原因吧。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，我也看到，你说这就是你分享的意义。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>嗯嗯，对，对，我觉得其实就是说你自己每个人受伤害嘛，然后要怎么样去把自己受到的创伤，受到的伤害变得让它具备除了伤害以外更多的意义。我觉得这是一个很好玩的话题。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，很有意义，很有价值的。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>嗯，对，这就是我自己选择的，我自己披露出来的一个啊，心理活动。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>好，还有就是你刚才提到也告诉过好朋友，那你是在什么时候告诉好朋友，然后他们又是怎么回应你，他们当时的这个态度和反应是什么样的？</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>他们其实就觉得就是说：不可思议。就是这样子，然后就觉得就觉得说，出于保护我，就告诉我这件事情还是不要跟别人说。出于好意，就是让我这件事情不要跟别人说。然后这个事情不要跟别人说，其实后面相处也是没有什么太大的变化，因为好朋友嘛，对。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>那也是因为你非常的信任他们。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对，因为其实是在闲聊的时候嘛，就是闲聊的时候就说了这事。这个没有什么可以防备的，就说了这事儿，虽然我父母我一直在告诉我说：这个事情你千万不要给别人说啊。但是我从小都不是个好小孩。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，就是在朋友那里，其实也是得到了一定的支持。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>嗯，是的，没错。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>还有很多小孩就是选择告诉父母的话，他还会造成二次伤害。所以就是说你父亲的这种处理真的特别可贵。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对，对，是的，我觉得其实是被性侵伤害的（人），从我自己打过交道来看，其实是很大一部分伤害是来自原生家庭。这个我们毫不避讳的讲的是其实很多包括就觉得说可能说女孩子就觉得说：啊，你嫁不出去了，就直接原生家庭给的压力，就“你嫁不出去了，你怎么这样？”就受害者有罪推定嘛，是吧，受害者有罪推定。“哎，当时谁叫你穿那么少干嘛，然后叫你再穿这么少？”其实我父母也有，我母亲也有一点这种就说：哎，叫你当时不合群，你要是合群，你教官就不会挑上你了嘛！”我觉得这种东西其实是没有必要的那个谴（责），苛责。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>对对对，明明就是加害者的错，反过来还要去揪你的毛病。对，所以面对母亲的那种那种责怪，你其实感觉怎么样？。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>我母亲其实也不是恶意的嘛。她其实就是说教育我要去合群嘛。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对，其实我小时候我一直不太想去为了合群而合群，但是他们长辈嘛，她为了教育我去合群，就是说可能说举了一个不恰当的例子。但是不恰当的例子其实呢也是说，目前我跟你说性侵的伤害，就是说遇到了一个现状，很多时候的压力和伤害其实是更多的是，就是说比性侵这件事情伤害更大的，可能说是来自于原生家庭的一个苛责。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，对，确实是。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>好，你觉得有什么是促进你来表述这件事情，有什么是阻碍你来表述这件事情的？</td><td></td></tr><tr><td></td><td>访谈者：</td><td>哦，其实阻碍我去表述这件事情的因素并不多。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>嗯，我也发现了。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>对，因为我觉得你们说“关我吊事儿”，就是用术语来说就是就是“关我什么事儿”。然后我说我的，你们看的惯就看，看不惯就不看，你们又不给我发钱，发工资是不是？我这个人的性格是比较，就是比较那个就怎么说，就反常规的吧，所以说我觉得还好。再一个就是说促进我表露的话，可能就还是说，呃，国内就是说是目前就是说是对于性侵受害者态度的一个变化。嗯，就说是一个……就是因为之前，可能说在零几年或者说前几年或者更早的时候，觉得性侵它是一个非常shame的事情，就是说你不光彩。就是说“how shame you “就是说你怎么能这样，就是就刚才我举的例子吧，你被性侵了，你一定是穿的太少了，你一定是穿的太骚了，或者说你一定是穿的太浪了。啊，这种就是受害者有罪论。这几年国内其实是对性侵受害者态度其实是逐渐变好了。而且就是我刚才说了嘛，另外一个契机可能就是说是me too。然后我觉得可能说，啊，把这个事情公布出来，然后让别人，能够帮到别人，我觉得是能够去抚慰自己被性侵。就特别说如果有一些人告诉你说：我孩子，呃，但是我不希望有这样一天，啊，但是就是如果说有一天跟你说，有个当父亲或当母亲跟你说：我孩子被性侵性了，我按照你说的做了。其实我觉得如果说是有这样一件事情，它其实是能够治愈很多东西的。但是我不希望有一天会出现这种情况。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>嗯。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>对，然后我觉得这可能说是，呃，一个是算是一个自我的拯救吧。第二个就是说可能说还是希望就是说能够帮…就说是用自己的一些东西去回馈一些什么。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>嗯。当你回忆了整个的这样的一个经历之后，你现在是有什么感受？用一个词来概括一下。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>啊！还好。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>还好？用一个词来概括的话？</td><td></td></tr><tr><td></td><td>访谈者：</td><td>啊，还好，就是跟产品经理撕完逼之后的，怎么说，啊，轻松。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>轻松？</td><td></td></tr><tr><td></td><td>访谈者：</td><td>对，轻松吧，我觉得其实，我觉得怎么说呢？我觉得其实这样面对面聊这个问题，其实聊完之后其实还是会有些轻松感的，对，就像跟产品经理撕完批之后，然后你会觉得：哇，爽死了。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>程序员的快乐。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>啊，是的。那能再具体一点说一下，为什么是这种感觉呢？</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>因为我觉得其实你在网上以一个虚拟的身份去说，可能说大家都知道迈克萨卡的i d 是我。因为我可能说我觉得我在这个社区比较活跃，大家可能觉得迈克萨卡的i d 是我，我也会在微信群里面说，大家看到啊，这个啊微信i d是迈克萨卡的人是我。但是我觉得可能说跟你就是一个真人的去one on one的去说，就是相对来说是一个陌生人。我跟我女朋友其实是很深入地聊过这件事儿的。就是说，呃，跟你一个陌生人去one on one的去聊这件事儿，其实也是在治愈自己那个心里面的一个东西，对，其实是因为，因为潜意识来讲可能最开始我觉得这还是一件shame的事情。所以我想的是在网上以一个虚拟的身份去做。那我去给你做访谈，就其实说我有一些枷锁，其实还是（非常大的？）（没听清楚）。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯嗯，你刚才我联系你时你说去抽根烟，我就觉得，嗯，可能就是就觉得又要去面对这个事情，情绪上需要准备一下。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>哦，其实你是第一个就是说以一个相对陌生人的身份去忘one on one的去聊这件事儿。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>那个单词是怎么你能说慢点吗？one什么？</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>就是one on one，就是一对一，就是一对一，面对面。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>哦哦。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对，我们这边应该就是叫one on one，然后就是跟老板one on one的聊天。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>哦哦，在我打断你之前，你刚才要说什么，你接着说吧。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>哦，没有没有，其实我觉得，对，就是说你自己以一个虚拟的身份去说这个事情，就是说是有温度的去说这个事情，我觉得其实是两种体验吧。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，确实是。你刚才提到你女朋友，因为你女朋友毕竟是你除了爸妈之外关系最亲密的人嘛，你告诉了她这件事情，那你再具体说一下，就是你告诉她的这个经过吧，还有你做了什么思想工作？</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>就是在晚上休息之前，我给她就聊到了小时候这件事情，其实也没什么，因为我的事情她都知道，她其实没有什么，我就只是在去聊一些东西。她其实也没什么反应，就是觉得很心疼心疼。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，心疼。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对，对，对，然后其实我觉得跟亲密的人聊这个事情，其实是没有什么。当然前提是你亲密的人不会再苛责你：你当时为什么穿的那么少，那么浪？对，就是……（没听清楚）其实我觉得去聊这种事情，我觉得是，嗯，也是能够促进感情的一种比较好的方式吧。就是说是互相剖析嘛。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，就是那种完全信任的那种状态。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>是的，没错。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>你对于儿童性侵犯的一个现状有什么样的认识？</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>很严重，非常严重，因为性侵其实它是一个很大的概念。我可能下面的话会说的比较露骨一点，不要介意啊。就是说性侵，它可能并不仅仅限于就是说，呃，一个强奸的一个行为。就是插入了，它可能是边缘性的一个性侵，可说搂搂抱抱，对于小女孩或小男孩的一个搂搂抱抱，乃至于说是对于性器官的一个接触，对。然后而且这个，其实现在是越发多样了。可能往常的人来说，我觉得就是说，往常的人来说，就觉得说啊，男生对于女的是一个性侵。后面可能就是说，大家发现男的对于男的其实是一个性侵。但是可能现在这些情况可能会更加多样，就可能说，呃，我并不会去做一些实质性的侵入的工作。我可能就只是说，哎，我见到一个萝莉，我去搂搂抱抱，或者说我心生邪念了，我去做一些性器官的接触。或者说我，或者说是…因为我其实见到，如果你有关注，其实见到很多案例，就可能说，呃，我叫一个小女孩用棒棒糖让她来帮我口一次，也就是说是口交一次，对吧，嗯，其实见过这种案例的，对，然后或者说是，呃，或者说是叫一个小男孩来给口一次，或者说是其他，而且这个他身份可能是会有变化的。可能后面会多样的，就是说我一个二十多岁的女生，或者说就是我自己的生活比较开放。嗯，对，然后我去我去勾搭一个小孩，然后我去跟他发生性关系。其实在我看来这种其实也是一种性侵。因为在小男孩性观念没有成熟之前，你这个操作是会对他造成很大影响的，他的性取向或者性操作会有很大影响吧。包括现在其实同性恋也放到台面上来讲了，就是说我同性恋去强行掰弯一个人，或者说我去性侵一个小男孩，其实也是一个，就是说性侵它其实是现在很严重，儿童性侵其实是很严重的一件事。而且现在是多样化。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，但是相关的法律确实还没有跟得上。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>是的，没错。对，就比如说，呃，我一个，呃就比如说我一个二十多岁三十多岁的女生，我去性侵一个男生，一个十多岁的男生，如果说我是有其他身份的，我是一个老师，或者说是一个在其他国家，他是能够得到一个，就可能说是更重的处罚。而国内的话，其实这一块的法律行为是没有完善的。就可能说如果这个男生小于14岁，你可能会以侵犯儿童，猥亵儿童罪的名义去入刑。然后就比如说小于14岁是强奸这种，其实仅限于女性，没有男性，因为国内强奸它采取的还是一个插入的说法，性器官男生对于女生的一个侵犯。所以说我觉得其实我国法律有其实还有很大的空间要走。包括就是说是在被性侵之后的及时的心理介入。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，对对对，真的是急需完善的一个状态。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对，其实是国内，其实现在性侵其实是多样化的。比如说是儿童性侵，其实多样化。因为其实生活好了嘛，大家其实会想怎么回事？而且其实比如说同性同龄之间的性侵，其实也是非常严重的。就比如说校园暴力的凌辱的行为，就由凌辱转化为性侵，这种事情其实都没有被重视的。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>还有很长的路要要走。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>是的，没错，是的，没错。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>然后你觉得对于遭遇过儿童期性侵犯的受害者来说，他需要哪些力量的介入和帮助？</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>哦，我觉得最强力的是公权力。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>什么？公权力？</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>嗯，公权力的介入，就是政府部门的介入。就我当时其实这个事情实际上还没有太大，是因为派出所的人给我留下很深的印象。对，当时因为没来得及吃晚饭嘛，然后我当时我还记得就是说那个派出所当时应该和我父亲那边还在联系……（信号原因，没听清）因为一般像这种小地方的警察，可能觉得这种事情就很不耐烦：没事没事，你们先回家自己处理嘛。和稀泥嘛，基层的传统玩法，和稀泥嘛。然后那个警察叔叔就很尽责，然后我记得当时我还没吃早饭，然后录笔录录到下午两点多，还没采体液。小孩子嘛，饿嘛，然后我记得我还在当时他办公室吃了一袋苹果片，然后我现在还记得，然后，对，我觉得这种东西，公权力的及时的介入，其实是能够在第一时间对小孩子就说是一个很贴切的保障。因为大家都从小都得到一个认识嘛：警察叔叔是好人。你受到欺负，警察叔叔会来帮你，对吧？然后，对，这个东西公权力的介入一定是第一优先的，就是说家庭和公权力的及时介入第一是优先。第二个其实我觉得很重要的就说是在性侵的一个月以内，就说是我觉得不管他当时有没有表现出异样啊，一定是要寻求及时的心理干涉。对，就是说因为性侵其实跟其他一样，就是你学心理的肯定比我清楚，就是说性侵跟其他的一样，就是说受伤害的这个东西，他或多或少的一定会有p t sd 相关的东西。如果说是你没有去寻求心理的介入，那么你这个东西可能就是说你心里始终是有个梗儿在这儿。就比如说台湾有个作家叫张苑，就是台湾那个作家自杀的那一位我忘了。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>林奕含。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>啊，对，林奕含，然后她其实她其实就是这种，呃，就可能说像我这样皮实的人，可能说会选择自我开导，但是选择像她那样的人，可能就是一个p t s d，然后再加上其他各种事情的不理解，抑郁，然后自杀。其实我觉得所以说第一时间的公权力介入，第一时间的心理干涉一定是非常必要的且非常重要的。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯嗯，确实是的。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>但是我觉得国内其实好像专门做儿童性侵心理干涉的好像很少。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>确实很少。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对，我觉得就这个东西其实是亟待完善的。因为其实用成人的那套心理干涉的做法去做儿童心理，其实是（一个词，没听清）不同的。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，首先心理学在中国就刚刚发展起来，就是处于起步的那种朝阳状态。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>啊，就是说这些东西还得需要时间去完善吧。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>对，确实它需要一个过程。不过也在慢慢的变好。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>其实说实话，我觉得短期之内其实是不一定能看到太好的变好。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>是的是的是的。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>唉，任重道远吧。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>路漫漫。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对，其实是我一个（没听清），我觉得对于小孩子来讲，就是说及时的、周边的帮助非常的重要。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>对于预防和干预儿童性侵犯你有什么建议？其实这个问题和刚才那个问题是一个性质的。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>预防其实你这个事情没法解，你预防不了，你预防不了。因为你其实性侵它一定是意味着一个事情，就是说是有一方的呃，就是说是，呃，不管是体力还是其他的，他一定是凌驾于另外一方的。对吧？</td><td></td></tr><tr><td></td><td>访谈者：</td><td>是的。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对。我就举这么一个不太恰当的例子，就是说性侵，它这个事情其实你只能从就是说是一些呃去打一些预防针。就比如说女孩子就是现在常见的：女孩子啊，你不来让男孩子摸啊，然后这种东西。但是如果说，比如说我，就是说我要采取暴力手段了，我举一个不恰当的例子，希望你不要介意。就是比如说我见到一个萝莉了，对，我采取暴力手段，我去搂搂抱抱，来做一个就是说是，呃，过分的事情，你觉得她有抵抗力吗？没有，对吧？</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对，然后你觉得这件事情能预防吗？没有办法。对，所以说我觉得预防其实，其实它一部分其实是个很奢侈的事情，因为它是需要一个去体系化的一个建设，很奢侈的事情。我觉得更重要的可能却需要去告诉孩子说：这个事情不是一个shame的事情。如果你被侵犯了，这不是你的错误，你需要告诉及时告诉爸爸。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯嗯，对。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>我觉得这个事情其实是比预防更重要的事情。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>很中肯，嗯。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对对，因为，呃，知乎上你应该也能看到很多匿名的，就觉得说家里人觉得丢脸，很多，特别是女孩子，然后家里人就不告诉她这些。对吧？然后我觉得这个可能说是因为很多事情预防预防不了。因为就比如说走在路上，突然有人心生歹念，就是你怎么预防？防也防不动啊。除非你随身身上带把刀，然后谁敢碰我我割了他。这种事情当然也都是说笑话，然后我觉得这种事情就一定去培养一个观念：就是说这个事情它不是一个shame的事情，不是你的错，你需要（告诉家里人？没听清，不确定）。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，主要是家庭方面影响特别大。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>是的，其实我觉得公权力方面也影响非常大。因为其实很多就是基层嘛，就是其实很多他虽然说他是警察，但是可能他的法律意识没有吧。然后他可能就会下意识的，就是说，因为这种地方是个小地方，可能就会说：啊，为了你女儿着想，这个事情和了吧。咱们就不走中间法吧，你们就都妥一下对吧。我觉得就是说基层，就说是可能就觉得说，呃，反正就觉得，呃，就千万不要和稀泥，就不要受害者有罪推定，就这个事情不是他的错误。我觉得就是建立一个系统的认知，这个事情是非常重要的。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，就是现在来看的话，你回头去看你的那些应对方式，你会有一个什么样的感受？</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>我父亲做很帮，啊，然后但是可能说他可以做的更棒，但是这个东西其实是马后炮的，我也没法去跟07年的时候，那个时候他……啊，对不起，我去看一下吧，可能有人在敲门。反正我觉得他当时做的很棒，那一套行云流水，其实也很感激他。对，但是的话我觉得可能说，如果说我自己从现在一个事后的角度去复盘，我觉得可能还缺了就我刚刚说的心理干涉。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，那包括你自己的应对方式呢，就是你选择把它给说出来。你觉得如果不说的话，你会怎么样？</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>哦，其实我这个东西很多事情没法做假设呀。我也不知道我不说会怎么样。其实这个东西我觉得其实没法做没法。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，那你去看你的这种应对方式的话，你是什么感受？你怎么看待？</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>我其实也没什么特别的感受。我只是觉得我做了一件应该做的事情。没什么特别的感受。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，我还设计了一个问题，就是如果说你可以回到当初那件事情发生的时候，你会做什么？</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>其实说实话，我觉得这个问题其实没有太大意义。因为其实。你像刚才我说的很多时候，他其实是处于弱势的一个地位，校园性侵他其实是对于性一个很懵懂的这个东西，你没法去假设去说你具备一个完全的性知识人。穿越回去附身到他身上，然后说当时会怎么做，我觉得其实这个东西，这个假设其实是没有意义的。我说的比较直白啊。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，因为可能就是男生比较理性嘛，但是就是对我自己而言，我是希望我能够回去的，就是我假想过这样的一个场景，我如果可以回去，那我就可以避免这所有的一切的发生，就是有一个情绪的宣泄口嘛，这就是我问这个问题的原因。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>是，是一个情绪的宣泄口，但是就是可能说，呃，对于更大多数人来讲，其实这个东西其实没有意义。我们只能往前看，就是就像刚才我说的。其实我知道你意思，你其实想说我去总结一套经验出来，就是说避免当时发生。但是其实就像我刚才说的，很多时候儿童性侵的受害者他其实是面对的是成年人，他其实是面对的是成年人，而且是多种多样的成年人。他其实留给他的选择余地不多。我感觉你情绪好像有点波动啊。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>没有，是因为我想到我前面访谈的那些女生，加害者全部都不是成年人，啊，有一个是成年人，其余的全都是中学生，十四岁左右的小男生。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对，唉，其实我觉得这个事情吧，其实这个事情其实说实话，这种东西就是纯粹就是属于飞来横祸的。对，因为这个东西，就比如我走在路上，然后被突然十二楼掉下来一个东西砸死了。然后我也没法说我提前预知到今天三点十分楼上要掉东西，避开它。这个东西没法预测，除非我直接具备超能力。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，好，再追加一个问题呢，就整个访谈下来你有什么感受，还有你对于我这个访谈的感受吧？</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>哦，我觉得其实反正我觉得其实感觉还好吧。我最开始想的就是你的态度会push一些，就稍微有侵略性一些，学院性一点，其实我觉得整个聊下来感觉还不错。然后的话，对，但是我觉得自己更希望就是说我自己希望是能越来越多的人有来做你这方面的研究的。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>我也有这样的希望啊。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对，我觉得可能是我自己更希望说是有更多人来做这个研究。其实我不介意去做访谈，但是我希望能有更多人。其实说实话我也很好奇，为什么你是第一个找我的？为什么没有其他人找我？其实我也很好奇这个问题。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>你是觉得在很早之前就应该有人去做这样的一个研究？</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对，我觉得其实它并不是一个新鲜事儿，它其实并不是一个新鲜事儿。其实我觉得虽然说国内心理学就是说这方面的研究起步晚吧，但是也不至于到了2020年的今天才有人来开始去做这个，马上都要2021年了，才有人来去找当时的事儿。但是也有可能是我不是在圈子内啊，我不知道啊，也有可能我不在圈子内，我不知道。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>其实我很早就想写这个，但是我不太敢跟我导师说，怕被否决。他们会说这是一个特别特别敏感的话题，可行性特别低。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>o k ，o k ，o k 明白，我其实很好奇，那你最终决定去做这个话题的时候，你导师你老板什么看法？</td><td></td></tr><tr><td></td><td>访谈者：</td><td>我老师就支持我啊。但是他说你要考虑一个问题，就是你可能找不到被试，你找不够，因为这是一个非常敏感的问题，你找研究对象是非常困难的。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>啊，是的。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>还有就是我没有提到的，而你想要说的，想要表达的一些东西？</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>哦，其实我当时想聊的，其实基本上你这个题做的还不错。其实我想聊的其实基本上都聊到了。就是说反正我觉得其实我更希望的就是说是国内这方面的研究能够跟上，其实先不提法律层面上了，因为法律必定是滞后于社会发展。对，然后对，我先不提法律上，我就希望心理干涉这一块儿能够及时跟上，就包括大家的观点，就千万不要去面对一个性侵受害者说：你当时穿的太少了，你太骚，你太浪了…这种东西，就被害者有罪论你千万不要再去讲。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>对对对。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>就是这些吧，我就是只想说“去你丫的”！反正我觉得其实这个东西，反正我觉得你做这个事情是比较有意义的。就我刚才说，我很好奇为啥为啥会2020年才有人找。当然我不在圈内，可能更早有人做了，我没知道而已，就翻到了我而已。但是我觉得的确应该是非常少见。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，13年、14年也是有人做的，因为我看到一些相关的硕士论文。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对，反正希望你这边的研究一切顺利吧，反正就是说我自己还是觉得就是其实是反正如果说你对这个，我不知道你对做这个事情有怀疑没有。如果有的话，反正我还明确告诉你：做这个事情非常有意义。</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，谢谢，谢谢。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>对，行，看你这边还有啥想问的没？</td><td></td></tr><tr><td></td><td>访谈者：</td><td>目前是没有了。你做的一切也非常非常有意义。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>谢谢。那要不然就先这样？</td><td></td></tr><tr><td></td><td>访谈者：</td><td>嗯，好，那你忙吧，拜拜。</td><td></td></tr><tr><td></td><td>访谈对象：</td><td>拜拜。</td><td></td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实想说的话有很多，但是一下不知道怎么说吧。在这里先引用我的采访者在论文中写的一句话作为结尾吧</p><blockquote><p>我始终相信星星之火，可以燎原。</p></blockquote><p>Everything is gonna be OK</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇文章是我 2020 年 12 月接受华中师范大学关于儿童性侵的采访所产生采访稿。在这次采访中，我完整的复盘了在我12岁那年发生在我身上的强奸事件。在这次采访中，我完整回顾了当时我和我家庭的一些反应，也表达了我一些关于性侵这件事的看法。我希望每个人都能平安顺利的过完一生，但是如果有不好的事情发生的时候，我希望这篇文章能帮到你。Everything is gonna be OK。&lt;/p&gt;</summary>
    
    
    
    <category term="人生" scheme="https://manjusaka.blog/categories/%E4%BA%BA%E7%94%9F/"/>
    
    <category term="杂记" scheme="https://manjusaka.blog/categories/%E4%BA%BA%E7%94%9F/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="人生" scheme="https://manjusaka.blog/tags/%E4%BA%BA%E7%94%9F/"/>
    
    <category term="杂记" scheme="https://manjusaka.blog/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>利用动态 tracing 技术来 trace 内核中的网络请求</title>
    <link href="https://manjusaka.blog/posts/2021/04/17/how-to-tracing-package-in-the-linux-kernel/"/>
    <id>https://manjusaka.blog/posts/2021/04/17/how-to-tracing-package-in-the-linux-kernel/</id>
    <published>2021-04-17T09:09:00.000Z</published>
    <updated>2022-11-20T15:39:13.817Z</updated>
    
    <content type="html"><![CDATA[<p>这周帮朋友用 eBPF/SystemTap 这样的动态 tracing 工具做了一些很有趣的功能。这篇文章算是一个总结</p><span id="more"></span><h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>实际上这周的一些想法，最开始是实际上来源于某天一个朋友问我的一个问题</p><blockquote><p>我们能不能监控机器上哪些进程在发出 ICMP 请求？需要拿到 PID，ICMP 包出口地址，目标地址，进程启动命令</p></blockquote><p>很有趣的问题。实际上首先拿到这个问题时候，我们第一反应肯定是 “让机器上的进程在发 ICMP 包的时候”直接往一个地方写日志不就好了，emmmm，用一个 meme 镇楼吧</p><p><img src="https://user-images.githubusercontent.com/7054676/115106820-68ae5400-9f99-11eb-8dbd-772d18f6b039.png" alt="鸡生蛋蛋生鸡"></p><p>嗯，可能大家都知道我想说什么了，我们这种场景实际上只能选择旁路，无侵入的方式去做。</p><p>那么涉及到包的旁路的 trace，大家第一反应肯定是 <a href="https://www.tcpdump.org/manpages/tcpdump.1.html">tcpdump</a> 去抓包。但是在我们今天的问题下，tcpdump 只能拿到包信息， 但是拿不到具体的 PID，启动命令等信息。</p><p>所以我们可能需要用另外一些方式去实现我们的需求</p><p>在需求最开始之初，我们还可能的选择的方式有这样一些</p><ol><li><p>走 <a href="https://www.kernel.org/doc/Documentation/networking/proc_net_tcp.txt">/proc/net/tcp</a> 去拿具体的 socket 的 <strong>inode</strong> 信息，然后反查 pid 关联</p></li><li><p>eBPF + kprobe 内核打点做监控</p></li><li><p>SystemTap + kprobe 内核打点做监控</p></li></ol><p>第一种方式，实际上只能拿到 TCP 一层的信息，但是 ICMP 并不是 TCP 协议啊（衰（虽然同属 L4 </p><p>那么看到最后，我们貌似就只有用 eBPF/SystemTap 配合 kprobe 的一条路可以走了</p><h2 id="基础的-trace"><a href="#基础的-trace" class="headerlink" title="基础的 trace"></a>基础的 trace</h2><h3 id="Kprobe"><a href="#Kprobe" class="headerlink" title="Kprobe"></a>Kprobe</h3><p>在继续下面的代码实际操作之前，我们首先要来认识一下 <a href="https://www.kernel.org/doc/html/latest/trace/kprobes.html">Kprobe</a></p><p>先引用一段官方文档的介绍</p><blockquote><p>Kprobes enables you to dynamically break into any kernel routine and collect debugging and performance information non-disruptively. You can trap at almost any kernel code address 1, specifying a handler routine to be invoked when the breakpoint is hit.<br>There are currently two types of probes: kprobes, and kretprobes (also called return probes). A kprobe can be inserted on virtually any instruction in the kernel. A return probe fires when a specified function returns.<br>In the typical case, Kprobes-based instrumentation is packaged as a kernel module. The module’s init function installs (“registers”) one or more probes, and the exit function unregisters them. A registration function such as register_kprobe() specifies where the probe is to be inserted and what handler is to be called when the probe is hit.</p></blockquote><p>简单来说，kprobe 是内核的一个提供的一个 trace 机制，在执行我们所设定特定的内核函数时/后，会按照我们所设定的规则触发我们的回调函数。用官方的话来说，“You can trap at almost any kernel code address”</p><p>在我们今天的场景下，不管利用 eBPF 还是 SystemTap 都需要依赖 Kprobe 并选择合适的 hook 点来完成我们内核调用的 trace</p><p>那么，在我们今天的场景下，我们应该选择在什么函数上加上对应的 hook 呢？</p><p>首先我们来想一下，ICMP 是一个四层的包，最终封装在一个 IP 报文中分发出去，那么我们来看一下，内核中 IP 报文发送中的关键调用，参见下图</p><p><img src="https://user-images.githubusercontent.com/7054676/115108292-37865180-9fa2-11eb-920f-dada0463ea10.png" alt="IP Layer 关键系统调用"></p><p>在这里我选择将 ip_finish_output 作为我们的 hook 点。</p><p>OK，Hook 点确认后，在开始正式编码前，我们来大概介绍下 <code>ip_finish_output</code></p><h3 id="ip-finish-output"><a href="#ip-finish-output" class="headerlink" title="ip_finish_output"></a>ip_finish_output</h3><p>首先来看下这个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ip_finish_output</span><span class="params">(<span class="keyword">struct</span> net *net, <span class="keyword">struct</span> sock *sk, <span class="keyword">struct</span> sk_buff *skb)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">ret = BPF_CGROUP_RUN_PROG_INET_EGRESS(sk, skb);</span><br><span class="line"><span class="keyword">switch</span> (ret) &#123;</span><br><span class="line"><span class="keyword">case</span> NET_XMIT_SUCCESS:</span><br><span class="line"><span class="keyword">return</span> __ip_finish_output(net, sk, skb);</span><br><span class="line"><span class="keyword">case</span> NET_XMIT_CN:</span><br><span class="line"><span class="keyword">return</span> __ip_finish_output(net, sk, skb) ? : ret;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">kfree_skb(skb);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体细节先不在这里展开（因为实在是太多了Orz），在系统调用 <code>ip_finish_output</code> 时，会触发我们设定的 kprobe 的钩子，在我们所设定的 hook 函数中会收到 <code>net</code>, <code>sk</code>, <code>skb</code> 三个参数（这三个参数也是调用 <code>ip_finish_output</code> 时的值。</p><p>在这三个参数中，我们主要来将视线放在 <code>struct sk_buff *skb</code> 上。</p><p>熟悉 Linux Kernel 协议栈实现的同学肯定对 <code>sk_buff</code> 这个数据结构非常非常熟悉了。这个数据结构是 Linux Kernel 中网络相关的核心数据结构。通过不断的偏移指针，这个数据结构能够很方便帮助我们确认我们待发送/已接收的数据在内存中所存放的位置。</p><p>空口直说好像有点抽象，我们来看个图</p><p><img src="https://user-images.githubusercontent.com/7054676/115132085-9514af80-a02f-11eb-9434-3bf085714817.png" alt="sk_buff"></p><p>以发送一个 TCP 包为例，我们能看到这个图中，sk_buff 经历了六个阶段</p><p>a. 根据 TCP 中的一些选项如 MSS 等，分配一个 buffer<br>b. 根据 MAX_TCP_HEADER 在我们申请好的内存 buffer 中预留一段足够容纳所有网络层的 header 的空间（TCP/IP/Link等）<br>c. 填入 TCP 的 payload<br>d. 填入 TCP header<br>e. 填入 IP header<br>d. 填入 link header</p><p>可以参照一下 TCP 报文结构，这样大家会有一个更直观的理解</p><p><img src="https://user-images.githubusercontent.com/7054676/115132279-6c8db500-a031-11eb-9fd3-1ea346015cdb.png" alt="TCP Segement Format"></p><p>大家能看到，通过 sk_buff 的一些指针的操作，我们就能很方便的获取到其中不同 layer 的 header 和具体的 payload</p><p>OK，现在让我们正式的来开始实现我们所需要的功能</p><h3 id="eBPF-KProbe"><a href="#eBPF-KProbe" class="headerlink" title="eBPF + KProbe"></a>eBPF + KProbe</h3><p>首先简单介绍下 eBPF。BPF 指 Berkeley Packet Filter ，最早期是用来设计在内核中实现一些网络包过滤的功能。但是后续社区对其做了非常多的强化增强，使其不仅能应用于网络目地。这也是名字中 e 的来历（extend）</p><p>本质上而言，eBPF 在内核维护了一层 VM，可以加载特定规则生成的代码，让内核变得更具有可编程性（后面我争取写一篇 eBPF 从入门到入土的介绍文章）</p><blockquote><p>Tips: Tcpdump 的背后就是 BPF</p></blockquote><p>然后在这次实现中，我们使用了 <a href="https://github.com/iovisor/bcc">BCC</a> 来简化我们 eBPF 相关的编写难度</p><p>OK，先上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bcc <span class="keyword">import</span> BPF</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line">bpf_text = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">#include &lt;linux/ptrace.h&gt;</span></span><br><span class="line"><span class="string">#include &lt;linux/sched.h&gt;        /* For TASK_COMM_LEN */</span></span><br><span class="line"><span class="string">#include &lt;linux/icmp.h&gt;</span></span><br><span class="line"><span class="string">#include &lt;linux/ip.h&gt;</span></span><br><span class="line"><span class="string">#include &lt;linux/netdevice.h&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">struct probe_icmp_sample &#123;</span></span><br><span class="line"><span class="string">    u32 pid;</span></span><br><span class="line"><span class="string">    u32 daddress;</span></span><br><span class="line"><span class="string">    u32 saddress;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">BPF_PERF_OUTPUT(probe_events);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">static inline unsigned char *custom_skb_network_header(const struct sk_buff *skb)</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">return skb-&gt;head + skb-&gt;network_header;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">static inline struct iphdr *get_iphdr_in_icmp(const struct sk_buff *skb)</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    return (struct iphdr *)custom_skb_network_header(skb);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">int probe_icmp(struct pt_regs *ctx, struct net *net, struct sock *sk, struct sk_buff *skb)&#123;</span></span><br><span class="line"><span class="string">    struct iphdr * ipdata=get_iphdr_in_icmp(skb);</span></span><br><span class="line"><span class="string">    if (ipdata-&gt;protocol!=1)&#123;</span></span><br><span class="line"><span class="string">        return 1;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    u64 __pid_tgid = bpf_get_current_pid_tgid();</span></span><br><span class="line"><span class="string">    u32 __pid = __pid_tgid;</span></span><br><span class="line"><span class="string">    struct probe_icmp_sample __data = &#123;0&#125;;</span></span><br><span class="line"><span class="string">    __data.pid = __pid;</span></span><br><span class="line"><span class="string">    u32 daddress;</span></span><br><span class="line"><span class="string">    u32 saddress;</span></span><br><span class="line"><span class="string">    bpf_probe_read(&amp;daddress, sizeof(ipdata-&gt;daddr), &amp;ipdata-&gt;daddr);</span></span><br><span class="line"><span class="string">    bpf_probe_read(&amp;saddress, sizeof(ipdata-&gt;daddr), &amp;ipdata-&gt;saddr);</span></span><br><span class="line"><span class="string">    __data.daddress=daddress;</span></span><br><span class="line"><span class="string">    __data.saddress=saddress;</span></span><br><span class="line"><span class="string">    probe_events.perf_submit(ctx, &amp;__data, sizeof(__data));</span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IcmpSamples</span>(ctypes.Structure):</span><br><span class="line">    _fields_ = [</span><br><span class="line">        (<span class="string">&quot;pid&quot;</span>, ctypes.c_uint32),</span><br><span class="line">        (<span class="string">&quot;daddress&quot;</span>, ctypes.c_uint32),</span><br><span class="line">        (<span class="string">&quot;saddress&quot;</span>, ctypes.c_uint32),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bpf = BPF(text=bpf_text)</span><br><span class="line"></span><br><span class="line">filters = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_ip_address</span>(<span class="params">data</span>):</span><br><span class="line">    results = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    results[<span class="number">3</span>] = data &amp; <span class="number">0xFF</span></span><br><span class="line">    results[<span class="number">2</span>] = (data &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">    results[<span class="number">1</span>] = (data &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">    results[<span class="number">0</span>] = (data &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;.&quot;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> results[::-<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_icmp_event</span>(<span class="params">cpu, data, size</span>):</span><br><span class="line">    <span class="comment"># event = b[&quot;probe_icmp_events&quot;].event(data)</span></span><br><span class="line">    event = ctypes.cast(data, ctypes.POINTER(IcmpSamples)).contents</span><br><span class="line">    daddress = parse_ip_address(event.daddress)</span><br><span class="line">    <span class="built_in">print</span>(</span><br><span class="line">        <span class="string">f&quot;pid:<span class="subst">&#123;event.pid&#125;</span>, daddress:<span class="subst">&#123;daddress&#125;</span>, saddress:<span class="subst">&#123;parse_ip_address(event.saddress)&#125;</span>&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bpf.attach_kprobe(event=<span class="string">&quot;ip_finish_output&quot;</span>, fn_name=<span class="string">&quot;probe_icmp&quot;</span>)</span><br><span class="line"></span><br><span class="line">bpf[<span class="string">&quot;probe_events&quot;</span>].open_perf_buffer(print_icmp_event)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        bpf.kprobe_poll()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        exit()</span><br></pre></td></tr></table></figure><p>OK，这段代码严格意义上来说是混编的，一部分是 C，一部分是 Python，。Python 部分大家肯定都很熟悉，BCC 帮我们加载我们的 C 代码，并 attch 到 kprobe 上。然后不断输出我们从内核中往外传输的数据</p><p>那我们重点来看看 C 部分的代码（实际上这严格来说不算标准 C，算是 BCC 封装的一层 DSL）</p><p>首先看一下我们辅助的两个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">unsigned</span> <span class="type">char</span> *<span class="title function_">custom_skb_network_header</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> sk_buff *skb)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> skb-&gt;head + skb-&gt;network_header;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="keyword">struct</span> iphdr *<span class="title function_">get_iphdr_in_icmp</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> sk_buff *skb)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">struct</span> iphdr *)custom_skb_network_header(skb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如前面所说，我们可以根据 sk_buff 中的 head 和 network_header 就能计算出我们 IP 头部在内存中的地址，然后我们将其 cast 成一个 <code>iphdr</code> 结构体指针</p><p>我们还得再来看一下 iphdr</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">iphdr</span> &#123;</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__LITTLE_ENDIAN_BITFIELD)</span></span><br><span class="line">__u8ihl:<span class="number">4</span>,</span><br><span class="line">version:<span class="number">4</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined (__BIG_ENDIAN_BITFIELD)</span></span><br><span class="line">__u8version:<span class="number">4</span>,</span><br><span class="line">  ihl:<span class="number">4</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">error</span><span class="string">&quot;Please fix &lt;asm/byteorder.h&gt;&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">__u8tos;</span><br><span class="line">__be16tot_len;</span><br><span class="line">__be16id;</span><br><span class="line">__be16frag_off;</span><br><span class="line">__u8ttl;</span><br><span class="line">__u8protocol;</span><br><span class="line">__sum16check;</span><br><span class="line">__be32saddr;</span><br><span class="line">__be32daddr;</span><br><span class="line"><span class="comment">/*The options start here. */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>熟悉 IP 报文结构的同学肯定就很眼熟了对吧，其中 <code>saddr</code> 和 <code>daddr</code> 就是我们的源地址和目标地址，<code>protocol</code> 代表着我们 L4 协议的类型，其中为1的时候代表着 ICMP 协议</p><p>OK 然后来看一下我们的 trace 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">probe_icmp</span><span class="params">(<span class="keyword">struct</span> pt_regs *ctx, <span class="keyword">struct</span> net *net, <span class="keyword">struct</span> sock *sk, <span class="keyword">struct</span> sk_buff *skb)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">iphdr</span> * <span class="title">ipdata</span>=</span>get_iphdr_in_icmp(skb);</span><br><span class="line">    <span class="keyword">if</span> (ipdata-&gt;protocol!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    u64 __pid_tgid = bpf_get_current_pid_tgid();</span><br><span class="line">    u32 __pid = __pid_tgid;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">probe_icmp_sample</span> __<span class="title">data</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    __data.pid = __pid;</span><br><span class="line">    u32 daddress;</span><br><span class="line">    u32 saddress;</span><br><span class="line">    bpf_probe_read(&amp;daddress, <span class="keyword">sizeof</span>(ipdata-&gt;daddr), &amp;ipdata-&gt;daddr);</span><br><span class="line">    bpf_probe_read(&amp;saddress, <span class="keyword">sizeof</span>(ipdata-&gt;daddr), &amp;ipdata-&gt;saddr);</span><br><span class="line">    __data.daddress=daddress;</span><br><span class="line">    __data.saddress=saddress;</span><br><span class="line">    probe_events.perf_submit(ctx, &amp;__data, <span class="keyword">sizeof</span>(__data));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如前面所说，kprobe 触发调用时，会将 <code>ip_finish_output</code> 的三个参数传入到我们的 trace 函数中来，那我们就可以根据传入的数据做很多的事了，现在来介绍下上面的代码中所做的事</p><ol><li>将 sk_buff 转换成对应的 iphdr</li><li>判断当前报文是否为 ICMP 协议</li><li>利用内核 BPF 提供的 helper <code>bpf_get_current_pid_tgid</code> 获取当前调用 <code>ip_finish_output</code> 进程的 pid</li><li>获取 saddr 和 daddr。注意我们这里用的 bpf_probe_read 也是 BPF 提供的 helper function，原则上来讲，在 eBPF 中为了保证安全，我们所有从内核中读取数据的行为都应该利用 <code>bpf_probe_read</code> 或 <code>bpf_probe_read_kernel</code> 来实现</li><li>通过 perf 将数据提交出去</li></ol><p>这样一来，我们就能排查到机器上具体什么进程在发送 ICMP 请求了</p><p>来看下效果</p><p><img src="https://user-images.githubusercontent.com/7054676/115132783-db6d0d00-a035-11eb-952a-3fcf33c86690.png" alt="image"></p><p>OK，我们的需求基本上达到了，不过这里算是留了一个小问题，大家可以思考下，我们怎么样根据 pid 获取启动进程时的 cmdline ?</p><h3 id="SystemTap-kprobe"><a href="#SystemTap-kprobe" class="headerlink" title="SystemTap + kprobe"></a>SystemTap + kprobe</h3><p>eBPF 的版本实现了，但是有个问题啊，eBPF 只能在高版本的内核中使用。一般而言，在 xb86_64 上，Linux 3.16 中支持了 eBPF。而我们依赖的 kprobe 对于 eBPF 的支持则是在 Linux 4.1 中实现的。通常而言，我们一般推荐使用 4.9 及以上内核来配合 eBPF 使用</p><p>那么问题来了。实际上我们现在有很多 Centos 7 + Linux 3.10 这样的传统的搭配，那么他们怎么办呢？</p><blockquote><p>Linux 3.10 live’s matter! Centos 7 live’s matter!</p></blockquote><p>那没办法，只能换一个技术栈来做了。这个时候，我们就首先考虑由 RedHat 开发，贡献进入社区，低版本可用的 SystemTap</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">%&#123;</span><br><span class="line"><span class="comment">#include&lt;linux/byteorder/generic.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;linux/if_ether.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;linux/skbuff.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;linux/ip.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;linux/in.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;linux/tcp.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;linux/sched.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;linux/list.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;linux/pid.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;linux/mm.h&gt;</span></span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> isicmp:long (data:long)</span><br><span class="line">%&#123;</span><br><span class="line">    struct iphdr *ip;</span><br><span class="line">    struct sk_buff *skb;</span><br><span class="line">    int tmp = 0;</span><br><span class="line"></span><br><span class="line">    skb = (struct sk_buff *) STAP_ARG_data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (skb-&gt;protocol == htons(ETH_P_IP))&#123;</span><br><span class="line">            ip = (struct iphdr *) skb-&gt;data;</span><br><span class="line">            tmp = (ip-&gt;protocol == 1);</span><br><span class="line">    &#125;</span><br><span class="line">    STAP_RETVALUE = tmp;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> task_execname_by_pid:string (pid:long) %&#123;</span><br><span class="line">    struct task_struct *task;</span><br><span class="line"></span><br><span class="line">    task = pid_task(find_vpid(STAP_ARG_pid), PIDTYPE_PID);</span><br><span class="line"></span><br><span class="line">//     proc_pid_cmdline(p, STAP_RETVALUE);</span><br><span class="line">    snprintf(STAP_RETVALUE, MAXSTRINGLEN, <span class="string">&quot;%s&quot;</span>, task-&gt;<span class="built_in">comm</span>);</span><br><span class="line">    </span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> ipsource:long (data:long)</span><br><span class="line">%&#123;</span><br><span class="line">    struct sk_buff *skb;</span><br><span class="line">    struct iphdr *ip;</span><br><span class="line">    __be32 src;</span><br><span class="line"></span><br><span class="line">    skb = (struct sk_buff *) STAP_ARG_data;</span><br><span class="line"></span><br><span class="line">    ip = (struct iphdr *) skb-&gt;data;</span><br><span class="line">    src = (__be32) ip-&gt;saddr;</span><br><span class="line"></span><br><span class="line">    STAP_RETVALUE = src;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">/* Return ip destination address */</span><br><span class="line"><span class="keyword">function</span> ipdst:long (data:long)</span><br><span class="line">%&#123;</span><br><span class="line">    struct sk_buff *skb;</span><br><span class="line">    struct iphdr *ip;</span><br><span class="line">    __be32 dst;</span><br><span class="line"></span><br><span class="line">    skb = (struct sk_buff *) STAP_ARG_data;</span><br><span class="line"></span><br><span class="line">    ip = (struct iphdr *) skb-&gt;data;</span><br><span class="line">    dst = (__be32) ip-&gt;daddr;</span><br><span class="line"></span><br><span class="line">    STAP_RETVALUE = dst;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> parseIp:string (data:long) %&#123; </span><br><span class="line">    sprintf(STAP_RETVALUE,<span class="string">&quot;%d.%d,%d.%d&quot;</span>,(int)STAP_ARG_data &amp;0xFF,(int)(STAP_ARG_data&gt;&gt;8)&amp;0xFF,(int)(STAP_ARG_data&gt;&gt;16)&amp;0xFF,(int)(STAP_ARG_data&gt;&gt;24)&amp;0xFF);</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">probe kernel.function(<span class="string">&quot;ip_finish_output&quot;</span>).call &#123;</span><br><span class="line">    <span class="keyword">if</span> (isicmp(<span class="variable">$skb</span>)) &#123;</span><br><span class="line">        pid_data = pid()</span><br><span class="line">        /* IP */</span><br><span class="line">        ipdst = ipdst(<span class="variable">$skb</span>)</span><br><span class="line">        ipsrc = ipsource(<span class="variable">$skb</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pid is:%d,source address is:%s, destination address is %s, command is: &#x27;%s&#x27;\n&quot;</span>,pid_data,parseIp(ipsrc),parseIp(ipdst),task_execname_by_pid(pid_data))</span><br><span class="line">    </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实际上大家可以看到，我们思路还是一样，利用 <code>ip_finish_output</code> 来作为 kprobe 的 hook 点，然后我们获取对应的 iphdr 然后进行操作。</p><p>嗯，我们的需求的基础功能差不多就是这样了，大家可以在额外进行一些功能增强，比如获取完整的进程 cmdline 等等</p><h2 id="更近一步的想法和实验"><a href="#更近一步的想法和实验" class="headerlink" title="更近一步的想法和实验"></a>更近一步的想法和实验</h2><p>大家可能对于 ICMP 这样的冷门协议没有太明显的感觉，那么我们换个需求大家可能就更为有感觉了</p><blockquote><p>监控机器上哪些进程在发出 HTTP 1.1 请求</p></blockquote><p>嗯，一如往的，我们先来看一下系统中的关键调用</p><p><img src="https://user-images.githubusercontent.com/7054676/115133429-baf38180-a03a-11eb-903f-f2cf46f3edd0.png" alt="TCP"></p><p>嗯，这里我们选择 <code>tcp_sendmsg</code> 来作为我们的切入点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">tcp_sendmsg</span><span class="params">(<span class="keyword">struct</span> sock *sk, <span class="keyword">struct</span> msghdr *msg, <span class="type">size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">lock_sock(sk);</span><br><span class="line">ret = tcp_sendmsg_locked(sk, msg, size);</span><br><span class="line">release_sock(sk);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯，其中 <code>sock</code> 是包含我们一些关键元数据的结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock</span> &#123;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Now struct inet_timewait_sock also uses sock_common, so please just</span></span><br><span class="line"><span class="comment"> * don&#x27;t add nothing before this first member (__sk_common) --acme</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock_common</span>__<span class="title">sk_common</span>;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock_common</span> &#123;</span></span><br><span class="line"><span class="comment">/* skc_daddr and skc_rcv_saddr must be grouped on a 8 bytes aligned</span></span><br><span class="line"><span class="comment"> * address on 64bit arches : cf INET_MATCH()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">__addrpairskc_addrpair;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">__be32skc_daddr;</span><br><span class="line">__be32skc_rcv_saddr;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">union</span>  &#123;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>skc_hash;</span><br><span class="line">__u16skc_u16hashes[<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* skc_dport &amp;&amp; skc_num must be grouped as well */</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">__portpairskc_portpair;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">__be16skc_dport;</span><br><span class="line">__u16skc_num;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家可以看到，我们能在 <code>sock</code> 中获取到我们端口的五元组数据，然后我们从 <code>msghdr</code> 中能获取到具体的数据</p><p>那么，以我们需求中的 HTTP 为例，我们实际上只需要判断，我们获取到的 TCP 包中是否包含 <strong>HTTP/1.1</strong> ，便可粗略判断，这个请求是否是 HTTP 1.1 请求（很暴力的做法Hhhhh</p><p>OK，我们来看下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bcc <span class="keyword">import</span> BPF</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">bpf_text = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">#include &lt;linux/ptrace.h&gt;</span></span><br><span class="line"><span class="string">#include &lt;linux/ip.h&gt;</span></span><br><span class="line"><span class="string">#include &lt;linux/tcp.h&gt;</span></span><br><span class="line"><span class="string">#include &lt;uapi/linux/ptrace.h&gt;</span></span><br><span class="line"><span class="string">#include &lt;net/sock.h&gt;</span></span><br><span class="line"><span class="string">#include &lt;bcc/proto.h&gt;</span></span><br><span class="line"><span class="string">#include &lt;linux/socket.h&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">struct ipv4_data_t &#123;</span></span><br><span class="line"><span class="string">    u32 pid;</span></span><br><span class="line"><span class="string">    u64 ip;</span></span><br><span class="line"><span class="string">    u32 saddr;</span></span><br><span class="line"><span class="string">    u32 daddr;</span></span><br><span class="line"><span class="string">    u16 lport;</span></span><br><span class="line"><span class="string">    u16 dport;</span></span><br><span class="line"><span class="string">    u64 state;</span></span><br><span class="line"><span class="string">    u64 type;</span></span><br><span class="line"><span class="string">    u8 data[300];</span></span><br><span class="line"><span class="string">    u16 data_size;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">BPF_PERF_OUTPUT(ipv4_events);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">int trace_event(struct pt_regs *ctx,struct sock *sk, struct msghdr *msg, size_t size)&#123;</span></span><br><span class="line"><span class="string">    if (sk == NULL)</span></span><br><span class="line"><span class="string">        return 0;</span></span><br><span class="line"><span class="string">    u32 pid = bpf_get_current_pid_tgid() &gt;&gt; 32;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // pull in details</span></span><br><span class="line"><span class="string">    u16 family = sk-&gt;__sk_common.skc_family;</span></span><br><span class="line"><span class="string">    u16 lport = sk-&gt;__sk_common.skc_num;</span></span><br><span class="line"><span class="string">    u16 dport = sk-&gt;__sk_common.skc_dport;</span></span><br><span class="line"><span class="string">    char state = sk-&gt;__sk_common.skc_state;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if (family == AF_INET) &#123;</span></span><br><span class="line"><span class="string">        struct ipv4_data_t data4 = &#123;&#125;;</span></span><br><span class="line"><span class="string">        data4.pid = pid;</span></span><br><span class="line"><span class="string">        data4.ip = 4;</span></span><br><span class="line"><span class="string">        //data4.type = type;</span></span><br><span class="line"><span class="string">        data4.saddr = sk-&gt;__sk_common.skc_rcv_saddr;</span></span><br><span class="line"><span class="string">        data4.daddr = sk-&gt;__sk_common.skc_daddr;</span></span><br><span class="line"><span class="string">        // lport is host order</span></span><br><span class="line"><span class="string">        data4.lport = lport;</span></span><br><span class="line"><span class="string">        data4.dport = ntohs(dport);</span></span><br><span class="line"><span class="string">        data4.state = state;</span></span><br><span class="line"><span class="string">        struct iov_iter temp_iov_iter=msg-&gt;msg_iter;</span></span><br><span class="line"><span class="string">        struct iovec *temp_iov=temp_iov_iter.iov;</span></span><br><span class="line"><span class="string">        bpf_probe_read_kernel(&amp;data4.data_size, 4, &amp;temp_iov-&gt;iov_len);</span></span><br><span class="line"><span class="string">        u8 * temp_ptr;</span></span><br><span class="line"><span class="string">        bpf_probe_read_kernel(&amp;temp_ptr, sizeof(temp_ptr), &amp;temp_iov-&gt;iov_base);</span></span><br><span class="line"><span class="string">        bpf_probe_read_kernel(&amp;data4.data, sizeof(data4.data), temp_ptr);</span></span><br><span class="line"><span class="string">        ipv4_events.perf_submit(ctx, &amp;data4, sizeof(data4));</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">bpf = BPF(text=bpf_text)</span><br><span class="line"></span><br><span class="line">filters = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_ip_address</span>(<span class="params">data</span>):</span><br><span class="line">    results = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    results[<span class="number">3</span>] = data &amp; <span class="number">0xFF</span></span><br><span class="line">    results[<span class="number">2</span>] = (data &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">    results[<span class="number">1</span>] = (data &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">    results[<span class="number">0</span>] = (data &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;.&quot;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> results[::-<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_http_payload</span>(<span class="params">cpu, data, size</span>):</span><br><span class="line">    <span class="comment"># event = b[&quot;probe_icmp_events&quot;].event(data)</span></span><br><span class="line">    <span class="comment"># event = ctypes.cast(data, ctypes.POINTER(IcmpSamples)).contents</span></span><br><span class="line">    event= bpf[<span class="string">&quot;ipv4_events&quot;</span>].event(data)</span><br><span class="line">    daddress = parse_ip_address(event.daddr)</span><br><span class="line">    <span class="comment"># data=list(event.data)</span></span><br><span class="line">    <span class="comment"># temp=binascii.hexlify(data) </span></span><br><span class="line">    body = <span class="built_in">bytearray</span>(event.data).<span class="built_in">hex</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;48 54 54 50 2f 31 2e 31&quot;</span>.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>) <span class="keyword">in</span> body:</span><br><span class="line">        <span class="comment"># if &quot;68747470&quot; in temp.decode():</span></span><br><span class="line">        <span class="built_in">print</span>(</span><br><span class="line">            <span class="string">f&quot;pid:<span class="subst">&#123;event.pid&#125;</span>, daddress:<span class="subst">&#123;daddress&#125;</span>, saddress:<span class="subst">&#123;parse_ip_address(event.saddr)&#125;</span>, <span class="subst">&#123;event.lport&#125;</span>, <span class="subst">&#123;event.dport&#125;</span>, <span class="subst">&#123;event.data_size&#125;</span>&quot;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bpf.attach_kprobe(event=<span class="string">&quot;tcp_sendmsg&quot;</span>, fn_name=<span class="string">&quot;trace_event&quot;</span>)</span><br><span class="line"></span><br><span class="line">bpf[<span class="string">&quot;ipv4_events&quot;</span>].open_perf_buffer(print_http_payload)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        bpf.perf_buffer_poll()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        exit()</span><br></pre></td></tr></table></figure><p>OK，我们来看下效果</p><p><img src="https://user-images.githubusercontent.com/7054676/115135218-4ecc4a00-a049-11eb-899b-baecffdb6268.png" alt="效果"></p><p>实际上这个我们还可以再扩展一下。比如针对 Go 这样，所发出的 HTTPS 连接有着固定特征的语言，我们也可以用相对简单的做法去完成机器上的包来源的溯源（大家可以参考下无辄的这篇文章，<a href="https://www.imwzk.com/posts/2021-03-14-why-i-always-get-503-with-golang/#%E5%B0%BE%E5%A3%B0">为什么用 Go 访问某网站始终会 503 Service Unavailable ？</a>)</p><p>我自己也做了一个测试，大家可以参考下代码：<a href="https://github.com/Zheaoli/linux-traceing-script/blob/main/ebpf/go-https-tracing.py">https://github.com/Zheaoli/linux-traceing-script/blob/main/ebpf/go-https-tracing.py</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>实际上无论是 eBPF 还是 SystemTap ，这类动态 tracing 技术可以 Linux Kernel 变得更具被可编程性。相较于传统的 recompile kernel 这些手段来说，更为方便快捷。而 BCC/BPFTrace 这类的更进一步的封装框架的出现，更进一步的降低了我们去观测内核的难度</p><p>很多时候我们很多需求都可以选择旁路的方式去更快捷的实现。但是要注意的一点是，动态 tracing 技术的引入势必增加了内核的不稳定性，而且一定程度上会影响性能。所以我们需要根据具体的场景去做 trade-off</p><p>好了，这篇文章差不多就水到这里，后面有时间争取出一个 eBPF 从入门到入土的系列文章（flag++</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这周帮朋友用 eBPF/SystemTap 这样的动态 tracing 工具做了一些很有趣的功能。这篇文章算是一个总结&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/Linux/"/>
    
    <category term="Kernel" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/Linux/Kernel/"/>
    
    
    <category term="编程" scheme="https://manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://manjusaka.blog/tags/Linux/"/>
    
    <category term="笔记" scheme="https://manjusaka.blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="水文" scheme="https://manjusaka.blog/tags/%E6%B0%B4%E6%96%87/"/>
    
    <category term="eBPF" scheme="https://manjusaka.blog/tags/eBPF/"/>
    
    <category term="SystemTap" scheme="https://manjusaka.blog/tags/SystemTap/"/>
    
  </entry>
  
  <entry>
    <title>当我们在聊 CI/CD 时，我们在聊什么？</title>
    <link href="https://manjusaka.blog/posts/2021/04/11/a-simple-introduce-about-ci-cd/"/>
    <id>https://manjusaka.blog/posts/2021/04/11/a-simple-introduce-about-ci-cd/</id>
    <published>2021-04-11T07:09:00.000Z</published>
    <updated>2022-11-20T15:39:13.817Z</updated>
    
    <content type="html"><![CDATA[<p>本文实际上是在群内第二次分享的内容。这次其实想来聊聊，关于 CI/CD 的一些破事和演进过程中我们所需要遇到的一些问题，当然本文中是一个偏新手向的文章和一点点爆论，随便看看就好。</p><span id="more"></span><h2 id="开宗明义，定义先行"><a href="#开宗明义，定义先行" class="headerlink" title="开宗明义，定义先行"></a>开宗明义，定义先行</h2><p>在我们谈论一个事物之前，我们需要对这个事物给出一个定义，那我们先来看一下我们今天要聊的 CI 与 CD 的定义。</p><p>首先，CI 指 Continuous Integration ，在中文语境中的表述是<strong>持续集成</strong>。而 CD 在常见语境下可能是两种意思：Continuous Delivery 或 Continuous Deployment，与之对应的表述是<strong>持续交付/持续部署</strong>。这里借用一下 Brent Laster 在 <strong>What is CI/CD?</strong><a href="#refer-anchor-1"><sup>1</sup></a> 中给出的定义</p><blockquote><p>Continuous integration (CI) is the process of automatically detecting, pulling, building, and (in most cases) doing unit testing as source code is changed for a product. CI is the activity that starts the pipeline (although certain pre-validations—often called “pre-flight checks”—are sometimes incorporated ahead of CI).<br>The goal of CI is to quickly make sure a new change from a developer is “good” and suitable for further use in the code base.<br>Continuous deployment (CD) refers to the idea of being able to automatically take a release of code that has come out of the CD pipeline and make it available for end users. Depending on the way the code is “installed” by users, that may mean automatically deploying something in a cloud, making an update available (such as for an app on a phone), updating a website, or simply updating the list of available releases.</p></blockquote><p>光看定义，可能大家还是会很懵逼，那么下面我们用一些实际的例子来给大家从头捋一遍 CI/CD 那些事</p><h2 id="Re：从0开始构建流程"><a href="#Re：从0开始构建流程" class="headerlink" title="Re：从0开始构建流程"></a>Re：从0开始构建流程</h2><p>这个标题好像起的有点草，不过不管了。首先我们假定这样一个最简单的需求</p><blockquote><p>我们基于 Hexo 构建了一个个人的博客系统。其中包含我们所需要发布的文章，我们配置的主题。我们需要将其发布到具体的 Repo 上。</p></blockquote><p>好了，基于这个需求，我们来从0到0玩一圈吧（笑（</p><h3 id="构建原生之初"><a href="#构建原生之初" class="headerlink" title="构建原生之初"></a>构建原生之初</h3><p>可能这里有很多人会问，为啥会选择 Hexo 来作为我们的切入点。原因很简单啊！因为它够简单啊！</p><p>言归正传，首先 Hexo 有两个命令 <code>hexo g</code> &amp;&amp; <code>hexo d</code> ，分别是根据当前目录下的 Markdown 文件来生成静态的网页。然后将生成的产物根据配置推送到对应的 repo 上</p><p>OK，那么我们在最原始的阶段一个构建的流程就是这样</p><ol><li>用一个编辑器，开开心心的写文章</li><li>然后在本地终端执行 <code>hexo g &amp;&amp; hexo d</code></li></ol><p>问题来了，现在有些时候提交了博客，但是忘了执行生成命令怎么办？或者是我每次都需要敲重复的命令很麻烦怎么办？那就让我们把整个过程自动化一下吧。Let’s rock!</p><h3 id="更进一步的构建"><a href="#更进一步的构建" class="headerlink" title="更进一步的构建"></a>更进一步的构建</h3><p>OK，我们先来假设一下，我们如果完成了自动化，我们现在发布一个博客的工作流应该编程什么样的</p><ol><li>我们编写一个 Markdown 文件，推送到 GitHub 仓库里的 Master 分支上</li><li>我们的自动任务开始构建我们博客，生成一系列静态文件和样式</li><li>将我们的静态文件和样式推送到我们的站点 Repo/CDN 等目标位置</li></ol><p>好了，那么这里有两个核心的问题</p><ol><li>在我们推送代码的时候，自动开始构建</li><li>在构建完成后，推送产物</li></ol><p>那我们现在基于 GitHub Action 来配置一套我们的自动化构建任务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Build</span> <span class="string">And</span> <span class="string">Publish</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">master</span> ]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;12.x&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Package</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span> <span class="string">&amp;&amp;</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">Html</span> <span class="string">File</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">🚀</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@3.7.1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.PUBLSH_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">BRANCH:</span> <span class="string">gh-pages</span> <span class="comment"># The branch the action should deploy to.</span></span><br><span class="line">          <span class="attr">FOLDER:</span> <span class="string">public</span> <span class="comment"># The folder the action should deploy.</span></span><br></pre></td></tr></table></figure><p>我们能看到这段配置实际上完成了这样一些事情</p><ol><li>在我们往 master 分支提交代码的时候触发构建</li><li>拉取代码</li><li>安装构建所需依赖</li><li>构建生成静态文件</li><li>推送静态文件</li></ol><p>如果上面任何一个步骤失败了，都将取消后面步骤的执行。实际上这样一个简单的任务已经包含了一个 CI &amp;&amp; CD 所包含的基础要素（这里 CD 我并未严格区分 Continuous Delivery/Continuous Deployment)</p><ol><li>与已有的代码持续的构建与集成</li><li>集成中区分多个 phase。每个 phase 将依赖上个 phase 结果。</li><li>将构建产物交付/部署出去。交付/部署的成功依赖于集成的成功</li></ol><p>那么在这里，我们将博客系统换成一个我们工程中的例子。将 Hexo 换成我们的 Python 服务。将新增博文换成我们的新增的代码。将构建命令换成 mypy/pylint 等检查工具。你看，CI/CD 实际上和你想象的复杂的系统，是不是有很大差别？</p><p>这里可能有很多人会提出这样一个问题，如果说这里我们将这些命令，不用线上的形式触发。而在本地用 Git Hook 等形式进行实现。那么这算不算一种 CI 与 CD 呢？我觉得毫无疑问算的，从我的视角来看，CI/CD 核心的要素在于通过可以重复，自动化的任务，来尽早暴露缺陷，减轻人为因素所带来的不必要的事故发生。</p><h2 id="这个开发过份傻逼却不谨慎"><a href="#这个开发过份傻逼却不谨慎" class="headerlink" title="这个开发过份傻逼却不谨慎"></a>这个开发过份傻逼却不谨慎</h2><p>首先抛出一个最基础的爆论，然后我们接着往下谈</p><blockquote><p>所有人都有傻逼的时候，而且这个傻逼的时候可能还会很多。</p></blockquote><p>在这样一个爆论的情况下，我们来回顾一下上面举<strong>基于 Hexo 去构建一个个人博客系统</strong>的例子中，如果我们不选择通过一种收敛的，自动化的系统去解决我们的构建，发布需求。那么我们哪些环节会出现风险</p><ol><li>最基础的，写完博客，忘了构建，忘了发布</li><li>比如我们升级一下依赖中的 Hexo 版本或者主题版本，我们没有测试，导致构建出来的样式失效</li><li>我们的 Markdown 有问题，导致构建失败</li><li>比如多个人维护一个博客的情况下，我们每个人都需要保存目标仓库/CDN的密钥等信息。导致信息泄漏等</li></ol><p>将<strong>基于 Hexo 去构建一个个人博客系统</strong>的例子切换成我们日常开发的场景，那么我们可能遇到的问题会更多。简单举几个</p><ol><li>没法很快速的回滚</li><li>没法溯源具体的构建/发布记录</li><li>没有自动化的任务，研发懒得跑测试或者 lint 导致代码腐化</li><li>高峰期上线导致事故</li></ol><p>嗯，这些问题大家是不是都很熟悉？大概就是，我起了，构建了，出事故了，有啥好说的23333</p><p><img src="https://user-images.githubusercontent.com/7054676/114294469-75cacf00-9ad1-11eb-8853-20e5a50bacce.png" alt="image"></p><p>讲到这里的大家实际上有没有发现一个问题？我在这篇文章中，没有对 CI 与 CD 进行区分？从我的视角来看，CI/CD 本质上是践行的同一个事。即 <strong>对于研发流程与交付流程的收敛</strong></p><p>从我的视角来看，去构建一个 CI/CD 系统核心的目标在于</p><ol><li>通过收敛入口以及自动化的任务触发，尽可能减轻人为因素所带来的系统不稳定性</li><li>通过快速，多次，可重复，无感知的任务，尽可能的在较早阶段暴露系统中的问题</li></ol><p>在这样两个大目标的前提下，我们便会根据不同的业务场景，采用不同的手段与形式丰富我们 CI/CD 中的内容，包括不仅限于</p><ol><li>在 CI 阶段自动化的单元测试，E2E 测试等</li><li>在 CI 阶段周期性的 Nighty Build 等</li><li>在 CD 阶段进行发布管控等</li></ol><p>不过无论我们怎么样去构建一个 CI/CD 系统，或者选择什么样的粒度去进行 CI/CD。我觉得一个合格的 CI/CD 系统与机制 都需要遵照这样几个原则（个人向总结）</p><ol><li>入口的收敛，SOP 的建立。如果不达成这点共识，研发能够通过技术手段绕过 CI/CD 系统那么便又回到的了我们本章的标题（这个研发过份傻逼却不谨慎）</li><li>对于业务代码无侵入</li><li>集成任务/发布任务一定要是自动化，可重复的</li><li>可回溯的历史记录与结果</li><li>可回溯的构建集成产物</li><li>从上到下的支持</li></ol><p>那么遵照我总结的这样几个原则，我们来迭代一下我们之前的博客的发布过程</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Build</span> <span class="string">And</span> <span class="string">Publish</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">master</span> ]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">master</span> ]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;12.x&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Package</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span> <span class="string">&amp;&amp;</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">Html</span> <span class="string">File</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">To</span> <span class="string">Repo🚀</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.ref</span> <span class="string">==</span> <span class="string">&#x27;refs/heads/master&#x27;</span><span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@3.7.1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.PUBLSH_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">BRANCH:</span> <span class="string">gh-pages</span> <span class="comment"># The branch the action should deploy to.</span></span><br><span class="line">          <span class="attr">FOLDER:</span> <span class="string">public</span> <span class="comment"># The folder the action should deploy.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">to</span> <span class="string">Collect</span> <span class="string">Repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@3.7.1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.PUBLSH_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">BRANCH:</span> <span class="string">build-$&#123;&#123;</span> <span class="string">github.run_id</span> <span class="string">&#125;&#125;</span> <span class="comment"># The branch the action should deploy to.</span></span><br><span class="line">          <span class="attr">FOLDER:</span> <span class="string">public</span> <span class="comment"># The folder the action should deploy.</span></span><br></pre></td></tr></table></figure><p>在这段更改后的构建流程中，我选择以 PR 为粒度去触发 CI 流程，并将历史产物进行存储，而在合并主分支后，新增发布流程。在这样一来，我在博客构建发布的时候，便能够通过回溯的历史产物来验证我框架升级，新增博文等操作的正确性。同时依托 GitHub Action，我能很好的完成历史构建的回溯</p><p><img src="https://user-images.githubusercontent.com/7054676/114294865-f38fda00-9ad3-11eb-938b-c25b7a4ca6bf.png" alt="image"></p><p>嗯，这样便可以尽可能避免我傻逼的操作所带来的各种副作用（逃</p><h2 id="进击的构建：终章"><a href="#进击的构建：终章" class="headerlink" title="进击的构建：终章"></a>进击的构建：终章</h2><p>好了，啥都没有，傻眼了吧<br>。<br>。<br>。<br>。</p><p>只是开个玩笑。实际上本文到这差不多就可以告一段落了。实际上大家通过这篇文章可以发现一个问题。就是实际上构建一个 CI/CD 系统可能并不会涉及很多，很高深的技术问题(极少数的场景除外）无论是传统的 Jenkins，还是新生的 GitHub Action，GitLab-CI，亦或者是云厂商提供的服务都能很好的帮助我们去构建一套贴合业务的 CI/CD 系统。但我之前在推特上发表了的一个爆论“CI/CD 的建立往往不是一个技术问题，而是一个制度问题，更可以称为是一个想法问题”。</p><p>所以，我希望我们每个人都能认识到我们都会犯错这样一个事实。然后尽可能的将自己所负责的系统的开发流程与交付流程尽可能的收敛与自动化。让一个 CI/CD 真正称为我们日常工作中的一部分。</p><p>差不多这样，溜了，溜了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文实际上是在群内第二次分享的内容。这次其实想来聊聊，关于 CI/CD 的一些破事和演进过程中我们所需要遇到的一些问题，当然本文中是一个偏新手向的文章和一点点爆论，随便看看就好。&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="杂记" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="编程" scheme="https://manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="笔记" scheme="https://manjusaka.blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="水文" scheme="https://manjusaka.blog/tags/%E6%B0%B4%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>继续爆论容器中的一号进程</title>
    <link href="https://manjusaka.blog/posts/2021/02/27/damn-the-init-process/"/>
    <id>https://manjusaka.blog/posts/2021/02/27/damn-the-init-process/</id>
    <published>2021-02-27T19:00:00.000Z</published>
    <updated>2022-11-20T15:39:13.817Z</updated>
    
    <content type="html"><![CDATA[<p>上周的文章聊了关于容器中的一号进程的一些概况后，在我师父某川(可以去 GitHub 找他玩，<a href="https://github.com/jschwinger23">jschwinger23</a>) 的指导与配合下，我们一起对目前主流的被广泛使用的两个容器中一号进程的实现 dumb-init 和 tini 做了一番探究，继续写个水文来爆论一番。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="我们为什么需要一个一号进程，我们希望的一号进程需要承担怎样的职责？"><a href="#我们为什么需要一个一号进程，我们希望的一号进程需要承担怎样的职责？" class="headerlink" title="我们为什么需要一个一号进程，我们希望的一号进程需要承担怎样的职责？"></a>我们为什么需要一个一号进程，我们希望的一号进程需要承担怎样的职责？</h3><p>在继续聊关于 dumb-init 和 tini 的相关爆论之前，我们需要来 review 一个问题。我们为什么需要一个一号进程？以及我们所选择的一号进程需要承担怎么样的职责</p><p>其实我们在容器场景下需要一号进程托管在前面实际上有两种主要的场景，</p><ol><li><p>对于容器内 Graceful Upgrade 二进制这种场景，主流的一种做法之一是 fork 一个新的进程，exec 新的二进制文件，新进程处理新链接，老进程处理老链接。（Nginx 就采用这种方案）</p></li><li><p>没有正确的处理信号转发以及进程回收的情况</p></li><li><p>一些如同 calico-node 的场景么，我们出于方便打包的考虑，将多个二进制运行在同一容器中</p></li></ol><p>对于第一种其实需要说的没有太多，我们来看一下第二点的测试</p><p>我们先准备一个最简单 Python 文件，<strong>demo1.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">10000</span>)</span><br></pre></td></tr></table></figure><p>然后依照常规，我们开始用一个 bash 脚本裹一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">python /root/demo1.py</span><br></pre></td></tr></table></figure><p>最后编写 Dockerfile </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> demo1.py /root/demo1.py</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> demo1.sh /root/demo1.sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;bash&quot;</span>, <span class="string">&quot;/root/demo1.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>构建后开始执行，我们先来看一下进程结构</p><p><img src="https://user-images.githubusercontent.com/7054676/109394863-29ce2b80-7964-11eb-88aa-4e1f6e2e3e00.png" alt="进程结构"></p><p>没有问题，现在我们用 <strong>strace</strong> 来 trace 一下，2049962、2050009 这两个进程，然后对 2049962 这个 bash 进程发 *<em>SIGTERM</em>＊ 信号</p><p>我们来看下结果</p><p><img src="https://user-images.githubusercontent.com/7054676/109394942-a9f49100-7964-11eb-8fa5-5d676e512081.png" alt="2049962进程的 trace 结果"></p><p><img src="https://user-images.githubusercontent.com/7054676/109394966-d8726c00-7964-11eb-9e18-f99a0a64b5cd.png" alt="2050009进程的 trace 结果"></p><p>我们能清晰看到 2049962 进程在接到 <strong>SIGTERM</strong> 的时候，没有将其转发给 2050009 进程。在我们手动 SIGKILL 2049962 后， 2050009 也随即退出，这里可能有人会有点疑惑，为什么 2049962 退出后，2050009 也会退出呢？</p><p>这里是由于 pid namespace 本身的特性，我们来看看，<a href="https://man7.org/linux/man-pages/man7/pid_namespaces.7.html">pid_namespaces</a> 中的相关介绍</p><blockquote><p>If the “init” process of a PID namespace terminates, the kernel terminates all of the processes in the namespace via a SIGKILL signal.  </p></blockquote><p>当当前 pid ns 内的一号进程退出的时候，内核直接 SIGKILL 伺候该 pid ns 内的剩余进程</p><p>OK，在我们结合容器调度框架后，那么在生产上实际会出现很多的坑，来看一段我之前的吐槽</p><blockquote><p>我们一个测试服务，Spring Cloud 的，在下线后，节点无法从注册中心摘除，然后百思不得其解，最后查到问题，，<br>本质上是这样，POD 被摘除的时候，K8S Scheduler 会给 POD 的 ENTRYPOINT 发一个 SIGTERM 信号，然后等待三十秒（默认的 graceful shutdown 超时实践)，还没响应就会 SIGKILL 直接杀<br>问题在于，我们 Eureka 版的服务是通过 start.sh 来启动的，ENTRYPOINT [“/home/admin/start.sh”]，容器里默认是 /bin/sh 是 fork/exec 模式，导致我服务进程没法正确的收到 SIGTERM 信号，然后一直没结束就被 SIGKILL 了</p></blockquote><p>刺激不刺激。除了信号转发无法正常处理以外，我们应用程序常见的一个常见处理的问题就是 Z 进程的出现，即子进程结束之后，无法正确的回收。比如早期 puppeteer 臭名昭著的 Z 进程问题。 在这种情况下，除了应用程序本身的问题以外，另外可能的原因是在守护进程这样的场景下，孤儿进程 re-parent 之后的进程，不具备回收子进程的功能</p><p>OK 在回顾完上面我们常见的问题后，我们来 review 一下我们对于容器内一号进程所需要承担的职责</p><ol><li><p>信号的转发</p></li><li><p>Z 进程的回收</p></li></ol><p>而在目前，在容器场景下，大家主要使用两个方案来作为自己的容器内一号进程，<a href="https://github.com/Yelp/dumb-init">dumb-init</a> 和 <a href="https://github.com/krallin/tini">tini</a>。这两个方案对于容器内孤儿与 Z 进程的处理都算是 OK。但是信号转发的实现上一言难尽。那么接下来</p><p>爆论时间！</p><h3 id="拉跨的-dumb-init"><a href="#拉跨的-dumb-init" class="headerlink" title="拉跨的 dumb-init"></a>拉跨的 dumb-init</h3><p>某种程度上来说，<strong>dumb-init</strong> 这货完全是属于虚假宣传的典范。代码实现非常糙</p><p>来看看官方的宣传</p><blockquote><p>dumb-init runs as PID 1, acting like a simple init system. It launches a single process and then proxies all received signals to a session rooted at that child process.</p></blockquote><p>这里，dumb-init 说自己使用了 Linux 中的进程 Session，我们都知道，一个进程 Session 在默认情况下，共享一个 Process Group Id 。那么我们这里可以理解为，dumb-init 能将信号完全转发到进程组中的每个进程上。听起来很美好是不是？</p><p>我们先来测试一下吧</p><p>测试代码如下，<strong>demo2.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">pid = os.fork()</span><br><span class="line"><span class="keyword">if</span> pid == <span class="number">0</span>:</span><br><span class="line">    cpid = os.fork()</span><br><span class="line">time.sleep(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>Dockerfile 如下</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> wget -O /usr/local/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v1.2.5/dumb-init_1.2.5_x86_64</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> +x /usr/local/bin/dumb-init</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> demo2.py /root/demo2.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/usr/local/bin/dumb-init&quot;</span>, <span class="string">&quot;--&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;/root/demo2.py&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>构建，开跑，先来看下进程结构</p><p><img src="https://user-images.githubusercontent.com/7054676/109396500-dca28780-796c-11eb-9ae1-37be10affbb0.png" alt="demo2 的进程结构"></p><p>然后老规矩，strace 2103908、2103909、2103910 这三个进程，然后我们对 <strong>dumb-init</strong> 的进程做一下发送 SIGTERM 的操作吧</p><p><img src="https://user-images.githubusercontent.com/7054676/109396545-1f645f80-796d-11eb-9205-7735e5fd3685.png" alt="strace 2103908"></p><p><img src="https://user-images.githubusercontent.com/7054676/109396563-3440f300-796d-11eb-82ed-94693d49cfc8.png" alt="strace 2103909"></p><p><img src="https://user-images.githubusercontent.com/7054676/109397059-c649fb00-796f-11eb-8206-02af6d9dc02b.png" alt="strace 2103910"></p><p>诶？dumb-init 老师，发生了甚么事？为什么 2103909 直接被 SIGKILL 了，而没有收到 SIGTERM</p><p>这里我们要来看下 dumb-init 的关键实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">handle_signal</span><span class="params">(<span class="type">int</span> signum)</span> &#123;</span><br><span class="line">    DEBUG(<span class="string">&quot;Received signal %d.\n&quot;</span>, signum);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (signal_temporary_ignores[signum] == <span class="number">1</span>) &#123;</span><br><span class="line">        DEBUG(<span class="string">&quot;Ignoring tty hand-off signal %d.\n&quot;</span>, signum);</span><br><span class="line">        signal_temporary_ignores[signum] = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (signum == SIGCHLD) &#123;</span><br><span class="line">        <span class="type">int</span> status, exit_status;</span><br><span class="line">        <span class="type">pid_t</span> killed_pid;</span><br><span class="line">        <span class="keyword">while</span> ((killed_pid = waitpid(<span class="number">-1</span>, &amp;status, WNOHANG)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (WIFEXITED(status)) &#123;</span><br><span class="line">                exit_status = WEXITSTATUS(status);</span><br><span class="line">                DEBUG(<span class="string">&quot;A child with PID %d exited with exit status %d.\n&quot;</span>, killed_pid, exit_status);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                assert(WIFSIGNALED(status));</span><br><span class="line">                exit_status = <span class="number">128</span> + WTERMSIG(status);</span><br><span class="line">                DEBUG(<span class="string">&quot;A child with PID %d was terminated by signal %d.\n&quot;</span>, killed_pid, exit_status - <span class="number">128</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (killed_pid == child_pid) &#123;</span><br><span class="line">                forward_signal(SIGTERM);  <span class="comment">// send SIGTERM to any remaining children</span></span><br><span class="line">                DEBUG(<span class="string">&quot;Child exited with status %d. Goodbye.\n&quot;</span>, exit_status);</span><br><span class="line">                <span class="built_in">exit</span>(exit_status);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        forward_signal(signum);</span><br><span class="line">        <span class="keyword">if</span> (signum == SIGTSTP || signum == SIGTTOU || signum == SIGTTIN) &#123;</span><br><span class="line">            DEBUG(<span class="string">&quot;Suspending self due to TTY signal.\n&quot;</span>);</span><br><span class="line">            kill(getpid(), SIGSTOP);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是 dumb-init 老师处理信号的代码，在收到信号后，将除 SIGCHLD 的信号做转发（注意 SIGKILL 是不可 handle 信号），我们来看看信号转发的逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">forward_signal</span><span class="params">(<span class="type">int</span> signum)</span> &#123;</span><br><span class="line">    signum = translate_signal(signum);</span><br><span class="line">    <span class="keyword">if</span> (signum != <span class="number">0</span>) &#123;</span><br><span class="line">        kill(use_setsid ? -child_pid : child_pid, signum);</span><br><span class="line">        DEBUG(<span class="string">&quot;Forwarded signal %d to children.\n&quot;</span>, signum);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        DEBUG(<span class="string">&quot;Not forwarding signal %d to children (ignored).\n&quot;</span>, signum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下直接 kill 发送信号，其中 -child_pid 是这样一个特性：</p><blockquote><p>If pid is less than -1, then sig is sent to every process in the process group whose ID is -pid.</p></blockquote><p>直接转发进程组，看起来没啥问题啊？那么上面是甚么原因呢？我们再来复习下上一段话，kill 给进程组发信号的逻辑是 <strong>sig is sent to every process</strong> ，懂了，一个 O(N) 的遍历嘛。没啥问题啊？好了，不卖关子，这里 dumb-init 的实现存在一个 race-condition</p><p>我们刚刚说了，kill 进程组的行为是一个 O(N) 的遍历，那么必然会有进程先收到信号，而有进程后收到信号。以 SIGTERM 为例，假设我们 dumb-init 的子进程先收到 SIGTERM，优雅退出后，dumb-init 收到 SIGCHLD 的信号，然后 wait_pid 拿到子进程 ID，判断是自己直接托管的进程后，自杀退出。好了，由于 dumb-init 是我们当前 pid ns 内的 init 进程，再来复习下 pid ns 的特性。</p><blockquote><p>If the “init” process of a PID namespace terminates, the kernel terminates all of the processes in the namespace via a SIGKILL signal. </p></blockquote><p>在 dumb-init 自杀以后，剩余进程将直接被内核 SIGKILL 伺候。也就导致了我们上面看到的，子进程没有收到转发的信号！</p><p>所以这里加粗处理一下，<strong>dumb-init 所承诺的，能将信号转发到所有进程上，完全是虚假宣传！</strong></p><p>而且请注意，dumb-init 宣称自己能管理一个 Session 内的进程！但是实际上他们只做了一个进程组的信号转发！完全是虚假宣称！Fake News！</p><p>而且如上面所提到的，在我们热更新二进制这样的场景下，dumb-init 在进程退出后直接自杀。和不使用一号进程完全没有差别！</p><p>我们可以来测试一下，测试代码 demo3.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">pid = os.fork()</span><br><span class="line">time.sleep(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>fork 一个进程，总共两个进程</p><p>Dockerfile 如下</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> wget -O /usr/local/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v1.2.5/dumb-init_1.2.5_x86_64</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> +x /usr/local/bin/dumb-init</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> demo3.py /root/demo3.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/usr/local/bin/dumb-init&quot;</span>, <span class="string">&quot;--&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;/root/demo3.py&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>构建，执行，先看看进程结构</p><p><img src="https://user-images.githubusercontent.com/7054676/109397207-9818eb00-7970-11eb-8dbb-35ccbe5d26cf.png" alt="demo3 进程结构"></p><p>然后模拟老进程退出，我们直接 SIGKILL 掉 2134836，然后我们看看 2134837 的 strace 的结果</p><p><img src="https://user-images.githubusercontent.com/7054676/109397254-d31b1e80-7970-11eb-9bf2-fcc3e12ca77c.png" alt="strace 2134837"></p><p>如预期一样，在 dumb-init 自杀后，2134837 被内核 SIGKILL 了</p><p>所以跟我复习一遍 <strong>dumb-init</strong> 拉跨！好了，我们接着聊 tini 的实现</p><h3 id="态度友好的聊聊-tini"><a href="#态度友好的聊聊-tini" class="headerlink" title="态度友好的聊聊 tini"></a>态度友好的聊聊 tini</h3><p>平心而论，tini 的实现，虽然也还有坑，但是比 <strong>dumb-init</strong> 细腻到不知道哪里去了，我们直接来先看下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">/* Wait for one signal, and forward it */</span></span><br><span class="line"><span class="keyword">if</span> (wait_and_forward_signal(&amp;parent_sigset, child_pid)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Now, reap zombies */</span></span><br><span class="line"><span class="keyword">if</span> (reap_zombies(child_pid, &amp;child_exitcode)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (child_exitcode != <span class="number">-1</span>) &#123;</span><br><span class="line">PRINT_TRACE(<span class="string">&quot;Exiting: child has exited&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> child_exitcode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先 tini 没有设置 signal handler ，不断循环 <code>wait_and_forward_signal</code> 和 <code>reap_zombies</code> 这两个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">wait_and_forward_signal</span><span class="params">(<span class="type">sigset_t</span> <span class="type">const</span>* <span class="type">const</span> parent_sigset_ptr, <span class="type">pid_t</span> <span class="type">const</span> child_pid)</span> &#123;</span><br><span class="line"><span class="type">siginfo_t</span> sig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sigtimedwait(parent_sigset_ptr, &amp;sig, &amp;ts) == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> (errno) &#123;</span><br><span class="line"><span class="keyword">case</span> EAGAIN:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> EINTR:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">PRINT_FATAL(<span class="string">&quot;Unexpected error in sigtimedwait: &#x27;%s&#x27;&quot;</span>, strerror(errno));</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/* There is a signal to handle here */</span></span><br><span class="line"><span class="keyword">switch</span> (sig.si_signo) &#123;</span><br><span class="line"><span class="keyword">case</span> SIGCHLD:</span><br><span class="line"><span class="comment">/* Special-cased, as we don&#x27;t forward SIGCHLD. Instead, we&#x27;ll</span></span><br><span class="line"><span class="comment"> * fallthrough to reaping processes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">PRINT_DEBUG(<span class="string">&quot;Received SIGCHLD&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">PRINT_DEBUG(<span class="string">&quot;Passing signal: &#x27;%s&#x27;&quot;</span>, strsignal(sig.si_signo));</span><br><span class="line"><span class="comment">/* Forward anything else */</span></span><br><span class="line"><span class="keyword">if</span> (kill(kill_process_group ? -child_pid : child_pid, sig.si_signo)) &#123;</span><br><span class="line"><span class="keyword">if</span> (errno == ESRCH) &#123;</span><br><span class="line">PRINT_WARNING(<span class="string">&quot;Child was dead when forwarding signal&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">PRINT_FATAL(<span class="string">&quot;Unexpected error when forwarding signal: &#x27;%s&#x27;&quot;</span>, strerror(errno));</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 <code>sigtimedwait</code> 这个函数来接收信号，然后过滤掉 <code>SIGCHLD</code> 转发。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">reap_zombies</span><span class="params">(<span class="type">const</span> <span class="type">pid_t</span> child_pid, <span class="type">int</span>* <span class="type">const</span> child_exitcode_ptr)</span> &#123;</span><br><span class="line"><span class="type">pid_t</span> current_pid;</span><br><span class="line"><span class="type">int</span> current_status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">current_pid = waitpid(<span class="number">-1</span>, &amp;current_status, WNOHANG);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (current_pid) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line"><span class="keyword">if</span> (errno == ECHILD) &#123;</span><br><span class="line">PRINT_TRACE(<span class="string">&quot;No child to wait&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">PRINT_FATAL(<span class="string">&quot;Error while waiting for pids: &#x27;%s&#x27;&quot;</span>, strerror(errno));</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">PRINT_TRACE(<span class="string">&quot;No child to reap&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">/* A child was reaped. Check whether it&#x27;s the main one. If it is, then</span></span><br><span class="line"><span class="comment"> * set the exit_code, which will cause us to exit once we&#x27;ve reaped everyone else.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">PRINT_DEBUG(<span class="string">&quot;Reaped child with pid: &#x27;%i&#x27;&quot;</span>, current_pid);</span><br><span class="line"><span class="keyword">if</span> (current_pid == child_pid) &#123;</span><br><span class="line"><span class="keyword">if</span> (WIFEXITED(current_status)) &#123;</span><br><span class="line"><span class="comment">/* Our process exited normally. */</span></span><br><span class="line">PRINT_INFO(<span class="string">&quot;Main child exited normally (with status &#x27;%i&#x27;)&quot;</span>, WEXITSTATUS(current_status));</span><br><span class="line">*child_exitcode_ptr = WEXITSTATUS(current_status);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (WIFSIGNALED(current_status)) &#123;</span><br><span class="line"><span class="comment">/* Our process was terminated. Emulate what sh / bash</span></span><br><span class="line"><span class="comment"> * would do, which is to return 128 + signal number.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">PRINT_INFO(<span class="string">&quot;Main child exited with signal (with signal &#x27;%s&#x27;)&quot;</span>, strsignal(WTERMSIG(current_status)));</span><br><span class="line">*child_exitcode_ptr = <span class="number">128</span> + WTERMSIG(current_status);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">PRINT_FATAL(<span class="string">&quot;Main child exited for unknown reason&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Be safe, ensure the status code is indeed between 0 and 255.</span></span><br><span class="line">*child_exitcode_ptr = *child_exitcode_ptr % (STATUS_MAX - STATUS_MIN + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// If this exitcode was remapped, then set it to 0.</span></span><br><span class="line">INT32_BITFIELD_CHECK_BOUNDS(expect_status, *child_exitcode_ptr);</span><br><span class="line"><span class="keyword">if</span> (INT32_BITFIELD_TEST(expect_status, *child_exitcode_ptr)) &#123;</span><br><span class="line">*child_exitcode_ptr = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (warn_on_reap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">PRINT_WARNING(<span class="string">&quot;Reaped zombie process with pid=%i&quot;</span>, current_pid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if other childs have been reaped.</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* If we make it here, that&#x27;s because we did not continue in the switch case. */</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 <code>reap_zombies</code> 函数中，不断利用 <code>waitpid</code> 这个函数来处理进程，在没有子进程等待处理或者遇到其余系统错误时退出循环。</p><p>注意这里 tini 和 dumb-init 的的实现差异，dumb-init 在回收自己的入口子进程后便会自杀。而 tini 将会在所有自己的子进程退出之后，结束循环，然后判断是否自杀。</p><p>那么我们这里来测试一下</p><p>还是 demo2 的例子，我们来测试一下孙进程的例子</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> demo2.py /root/demo2.py</span></span><br><span class="line"><span class="keyword">ENV</span> TINI_VERSION v0.<span class="number">19.0</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> https://github.com/krallin/tini/releases/download/<span class="variable">$&#123;TINI_VERSION&#125;</span>/tini /tini</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> +x /tini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;/tini&quot;</span>,<span class="string">&quot;-s&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;--&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;/root/demo2.py&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>然后构建，执行，进程结构如下</p><p><img src="https://user-images.githubusercontent.com/7054676/109397971-b54fb880-7974-11eb-9899-0d71af5ad835.png" alt="demo2-tini 进程结构图"></p><p>然后，老规矩，strace , kill 发 SIGTERM 看一下，</p><p><img src="https://user-images.githubusercontent.com/7054676/109398085-648c8f80-7975-11eb-8b08-21fb0c0399fa.png" alt="strace 2160093"></p><p><img src="https://user-images.githubusercontent.com/7054676/109398094-75d59c00-7975-11eb-8d42-ee062609e152.png" alt="strace 2160094"></p><p><img src="https://user-images.githubusercontent.com/7054676/109398106-871ea880-7975-11eb-94a8-0b25374fa79e.png" alt="strace 2160095"></p><p>嗯，如预期一样，那么 tini 的实现是不是没有问题了呢，我们再来准备一个例子,demo4.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line">pid = os.fork()</span><br><span class="line"><span class="keyword">if</span> pid == <span class="number">0</span>:</span><br><span class="line">    signal.signal(<span class="number">15</span>, <span class="keyword">lambda</span> _, __: time.sleep(<span class="number">1</span>))</span><br><span class="line">    cpid = os.fork()</span><br><span class="line">time.sleep(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>这里我们用 <code>time.sleep(1)</code> 来模拟，程序接到 SIGTERM 后需要优雅处理，然后我们还是准备下 dockefile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> demo4.py /root/demo4.py</span></span><br><span class="line"><span class="keyword">ENV</span> TINI_VERSION v0.<span class="number">19.0</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> https://github.com/krallin/tini/releases/download/<span class="variable">$&#123;TINI_VERSION&#125;</span>/tini /tini</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> +x /tini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;/tini&quot;</span>,<span class="string">&quot;-s&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;--&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;/root/demo4.py&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>然后构建，允许，看进程结构，啪的一下很快啊</p><p><img src="https://user-images.githubusercontent.com/7054676/109398222-83d7ec80-7976-11eb-88e9-4e7231b2c90d.png" alt="demo4 进程结构"></p><p>然后 strace ，发 SIGTERM 一条龙服务，</p><p><img src="https://user-images.githubusercontent.com/7054676/109398244-aa962300-7976-11eb-9c4f-7ca7dbe1b833.png" alt="strace 2173315"></p><p><img src="https://user-images.githubusercontent.com/7054676/109398251-bc77c600-7976-11eb-8b24-d5bb60c1ce96.png" alt="strace 2173316"></p><p><img src="https://user-images.githubusercontent.com/7054676/109398257-cac5e200-7976-11eb-9921-457195ee052c.png" alt="strace 2173317"></p><p>然后我们发现，2173316 和 2173317 这两个进程，成功接收到 SIGTERM 的信号后，在处理中，被 SIGKILL 了。那么这是为甚么呢？实际上这里也存在一个潜在的 race condition</p><p>当我们开启 tini 的使用。2173315 退出后，2173316 将被 re-parent ，</p><p>按照内核的 re-parent 流程，2173317 re-parent 到 tini 进程。</p><p>但是，tini 在使用 <code>waitpid</code> 的时候，使用了 <code>WNOHANG</code> 这个选项，那么这里如果在执行 waitpid 时，子进程还未结束，那么将立刻返回0。从而退出循环，开始自杀流程。</p><p>刺激不刺激，关于这点，我师父和我提了一个 issue: <a href="https://github.com/krallin/tini/issues/180">tini Exits Too Early Leading to Graceful Termination Failure</a></p><p>然后，我也做了一版修复，具体可以参考<a href="https://github.com/Zheaoli/tini/commit/f5286c205d948a6cbb07fa8dca9e763bdb3ebe61">use new threading to run waipid</a>（还在 PoC，没写单测，处理也有点糙）</p><p>实际上思路很简单 ，我们不使用 <code>waitpid</code> 中的 <code>WNOHANG</code> 选项，将其变为阻塞的调用，然后用一个新的线程来做 <code>waitpid</code> 的处理</p><p>构建一版测试效果如下</p><p><img src="https://user-images.githubusercontent.com/7054676/109398735-96075a00-7979-11eb-85e9-f8ab99c3d5f5.png" alt="demo5 进程结构"></p><p><img src="https://user-images.githubusercontent.com/7054676/109398751-b1726500-7979-11eb-8398-0069c4f3a2aa.png" alt="strace 1808102"></p><p><img src="https://user-images.githubusercontent.com/7054676/109398764-c4853500-7979-11eb-981f-a5ea65ae7572.png" alt="strace 1808104"></p><p><img src="https://user-images.githubusercontent.com/7054676/109398777-d666d800-7979-11eb-972a-37cf82e371d4.png" alt="strace 1808105"></p><p>嗯，如预期一样，测试没有问题。</p><p>当然这里实际上可能细心的朋友发现，原本的 tini 也没法处理二进制更新的情况，原因和 demo5 里的原因一致。这里大家可以去测试一下</p><p>实际上这里我的处理很过于粗糙和暴力，我们实际上只要保证让 tini 的退出条件变成<strong>一定要等到 waitpid()=-1 &amp;&amp; errno==EHILD再退出</strong>。具体的实现手段大家可以一起来思考（实际上还不少</p><p>最后来总结一下问题的核心：</p><p>无论是 dumb-init 还是 tini 在现行的实现里，都犯了同一个错误，即在容器这个特殊的场景下，都没有等待所有子孙进程的退出再退出。其实解决方案很简单，退出条件一定要是 <strong>waitpid()=-1 &amp;&amp; errno==EHILD</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文吐槽了 dumb-init 和 tini。dumb—init 实现属实拉跨，tini 的实现细腻了很多。但是 tini 依旧存在不可靠的行为，以及我们所期待的 fork 二进制更新这种使用一号进程的场景在 dumb-init 和 tini 上都没法实现。而且 dumb-init 和 tini 目前也还有一个共通的局限性。即无法处理子进程进程组逃逸的情况。（比如十个子进程各自逃逸到一个进程组中）。</p><p>而且在文中的测试中，我们用 <code>time.sleep(1)</code> 来模拟 Graceful Shutdown 的行为，tini 也已经无法满足需求了。。So。。。。</p><p>所以归根到底一句话，应用的信号，进程回收这些基础行为应该应用自决。任何管杀不管埋而寄托于一号进程的行为，都是对于生产的不负责任。（如果你们实在想要一个一号进程，还是用 tini 吧，千万别用 dumb-init)</p><p>所以 exec 裸起大法好，不用一号进程平安保！</p><p>差不多水文就这样吧，这篇水文从提出问题到验证结论，到 patch PoC 报销了我快一个星期的业余时间（本文初稿在凌晨4点过写完）。最后感谢某川同学和我一起搞了几个凌晨三点过。最后，祝大家看的愉快。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上周的文章聊了关于容器中的一号进程的一些概况后，在我师父某川(可以去 GitHub 找他玩，&lt;a href=&quot;https://github.com/jschwinger23&quot;&gt;jschwinger23&lt;/a&gt;) 的指导与配合下，我们一起对目前主流的被广泛使用的两个容器中一号进程的实现 dumb-init 和 tini 做了一番探究，继续写个水文来爆论一番。&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/Linux/"/>
    
    
    <category term="编程" scheme="https://manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://manjusaka.blog/tags/Linux/"/>
    
    <category term="笔记" scheme="https://manjusaka.blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="水文" scheme="https://manjusaka.blog/tags/%E6%B0%B4%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>简单聊聊容器中的一号进程</title>
    <link href="https://manjusaka.blog/posts/2021/02/13/a-simple-introduction-about-the-init-process-in-container/"/>
    <id>https://manjusaka.blog/posts/2021/02/13/a-simple-introduction-about-the-init-process-in-container/</id>
    <published>2021-02-13T09:00:00.000Z</published>
    <updated>2022-11-20T15:39:13.817Z</updated>
    
    <content type="html"><![CDATA[<p>新年了，决定趁着有时间的时候多写几篇技术水文。今天的话，准备来简单聊聊容器中我们每天都会接触，但是时常又会被我们忽略的一号进程</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>容器技术发展到现在，其实形态上已经发生了很大的变化。根据不同的场景，既有传统的 <strong>Docker</strong><a href="#refer-anchor-1"><sup>1</sup></a>, <strong>containterd</strong><a href="#refer-anchor-2"><sup>2</sup></a> 这样传统基于 CGroup + Namespace 的容器形态，也有像 <strong>Kata</strong><a href="#refer-anchor-3"><sup>3</sup></a> 这样基于 VM 的新型的容器形态。本文主要着眼在传统容器中一号进程上。</p><p>我们都知道，传统容器依赖的 CGroup + Namespace 进行资源隔离，本质上来说，还是 OS 内的一个进程。所以在继续往下聊容器相关的内容之前，我们需要先来简单聊聊 Linux 中的进程管理</p><h3 id="Linux-中的进程管理"><a href="#Linux-中的进程管理" class="headerlink" title="Linux 中的进程管理"></a>Linux 中的进程管理</h3><h4 id="简单聊聊进程"><a href="#简单聊聊进程" class="headerlink" title="简单聊聊进程"></a>简单聊聊进程</h4><p>Linux 中的进程实际上是个非常大的话题，如果要展开聊，实际上这个话题可以聊一整本书= =，所以为了时间着想，我们还是把目光聚集在最核心的一部分上面（实际上是因为很多东西我也不懂。</p><p>首先来讲，在内核中利用一个特殊的结构体来维护进程有关的相关信息，比如常见的 PID，进程状态，打开的文件描述符等信息。在内核代码中，这个结构体是 <strong>task_struct</strong><a href="#refer-anchor-4"><sup>4</sup></a>, 其大概结构大家可以看一下下图</p><p><img src="https://user-images.githubusercontent.com/7054676/107845716-b4694380-6e18-11eb-9d19-ebfb9927b1ac.png" alt="task_struct"></p><p>而通常而言，我们会在系统上跑很多个进程。所以内核用一个进程表(实际上 Linux 中管理进程表的有多个数据结构，这里我们用 PID Hash Map 来举例）来维护所有 Process Descriptor 相关的信息，详见下图</p><p><img src="https://user-images.githubusercontent.com/7054676/107845790-30638b80-6e19-11eb-951e-7fdfa86a0234.png" alt="PID Hash Table"></p><p>OK， 这里我们大概了解了进程中的基本结构，现在我们来看我们常见使用进程的一个场景：父子进程。我们都知道，我们有时会在一个进程中，通过 <strong>fork</strong><a href="#refer-anchor-5"><sup>5</sup></a> 这个 sys call 来创建出一个新的进程。通常来说，我们创建的新的进程是当前进程的子进程。那么在内核中怎么表达这种父子关系呢？</p><p>回到刚刚提到 <strong>task_struct</strong>, 在这个结构体中存在这样几个字段来描述父子关系</p><ol><li><p>real_parent：一个 task_struct 指针，指向父进程</p></li><li><p>parent: 一个 task_struct 指针，指向父进程。在大多数情况下，这个字段的值和 <code>real_parent</code> 一致。在有进程对当前进程使用 <strong>ptrace</strong><a href="#refer-anchor-6"><sup>6</sup></a> 等情况的时候，和 <code>real_parent</code> 字段不一致</p></li><li><p>children：list_head, 其指向一个由当前进程所创建的所有子进程的双向链表</p></li></ol><p>这里大家可能还有点抽象的话，给大家一个图就能看清楚了</p><p><img src="https://user-images.githubusercontent.com/7054676/107846739-f8604680-6e20-11eb-939c-f033909570c3.png" alt="Relation Between Process"></p><p>实际上，我们发现，不同进程之间的父子关系，反应到具体的数据结构之上，就形成了一个完整的树形结构（先记住这点，我们稍后会再提到这里）</p><p>到现在为止，我们已经对 Linux 中的进程，有了最简单一个概念，那么接下来，我们会聊聊我们在进程使用中常遇到的两个问题：孤儿进程&amp;&amp;僵尸进程</p><h4 id="孤儿进程-amp-amp-僵尸进程"><a href="#孤儿进程-amp-amp-僵尸进程" class="headerlink" title="孤儿进程 &amp;&amp; 僵尸进程"></a>孤儿进程 &amp;&amp; 僵尸进程</h4><p>首先来聊聊 <strong>僵尸进程</strong> 这个概念。</p><p>如前面所说，我们内核有进程表来维护 Process Descriptor 相关信息。那么在 Linux 的设计中，当一个子进程退出后，将保存自己的进程相关的状态以供父进程使用。而父进程将调用 <strong>waitpid</strong><a href="#refer-anchor-7"><sup>7</sup></a> 来获取子进程状态，并清理相关资源。</p><p>那么如上所说，父进程是有可能需要拿到子进程相关的状态的。那么也就导致为了满足这一设计，内核中的进程表将一直保存相关资源。当僵尸进程多了以后，那么将造成很大的资源浪费。</p><p>首先来看一个简单的僵尸进程的例子 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> pid;</span><br><span class="line">  <span class="keyword">if</span> ((pid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Here&#x27;s child process\n&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the child process pid is %d\n&quot;</span>, pid);</span><br><span class="line">    sleep(<span class="number">20</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们编译执行这段代码，然后配合 <code>ps</code> 命令查看一下，发现我们的确造了一个 z 进程</p><p><img src="https://user-images.githubusercontent.com/7054676/107847485-0e710580-6e27-11eb-977c-678a7fa4b362.png" alt="Z Process Demo"></p><p>OK 我们再来看一个正确处理子进程退出的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/signalfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXEVENTS 64</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">deletejob</span><span class="params">(<span class="type">pid_t</span> pid)</span> &#123; <span class="built_in">printf</span>(<span class="string">&quot;delete task %d\n&quot;</span>, pid); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">addjob</span><span class="params">(<span class="type">pid_t</span> pid)</span> &#123; <span class="built_in">printf</span>(<span class="string">&quot;add task %d\n&quot;</span>, pid); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">  <span class="type">int</span> pid;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">event</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> *<span class="title">events</span>;</span></span><br><span class="line">  <span class="type">sigset_t</span> mask;</span><br><span class="line">  sigemptyset(&amp;mask);</span><br><span class="line">  sigaddset(&amp;mask, SIGCHLD);</span><br><span class="line">  <span class="keyword">if</span> (sigprocmask(SIG_SETMASK, &amp;mask, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;sigprocmask&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> sfd = signalfd(<span class="number">-1</span>, &amp;mask, <span class="number">0</span>);</span><br><span class="line">  <span class="type">int</span> epoll_fd = epoll_create(MAXEVENTS);</span><br><span class="line">  event.events = EPOLLIN | EPOLLEXCLUSIVE | EPOLLET;</span><br><span class="line">  event.data.fd = sfd;</span><br><span class="line">  <span class="type">int</span> s = epoll_ctl(epoll_fd, EPOLL_CTL_ADD, sfd, &amp;event);</span><br><span class="line">  <span class="keyword">if</span> (s == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">abort</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  events = <span class="built_in">calloc</span>(MAXEVENTS, <span class="keyword">sizeof</span>(event));</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="type">int</span> n = epoll_wait(epoll_fd, events, MAXEVENTS, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (errno == EINTR) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;epoll EINTR error\n&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (errno == EINVAL) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;epoll EINVAL error\n&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (errno == EFAULT) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;epoll EFAULT error\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (errno == EBADF) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;epoll EBADF error\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((events[i].events &amp; EPOLLERR) || (events[i].events &amp; EPOLLHUP) ||</span><br><span class="line">          (!(events[i].events &amp; EPOLLIN))) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;epoll err\n&quot;</span>);</span><br><span class="line">        close(events[i].data.fd);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sfd == events[i].data.fd) &#123;</span><br><span class="line">        <span class="keyword">struct</span> signalfd_siginfo si;</span><br><span class="line">        <span class="type">ssize_t</span> res = read(sfd, &amp;si, <span class="keyword">sizeof</span>(si));</span><br><span class="line">        <span class="keyword">if</span> (res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;read error\n&quot;</span>);</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res != <span class="keyword">sizeof</span>(si)) &#123;</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Something wrong\n&quot;</span>);</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (si.ssi_signo == SIGCHLD) &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;Got SIGCHLD\n&quot;</span>);</span><br><span class="line">          <span class="type">int</span> child_pid = waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">          deletejob(child_pid);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((pid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">      execve(<span class="string">&quot;/bin/date&quot;</span>, argv, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    addjob(pid);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK, 我们现在都知道了，子进程退出后需要由父进程正确的回收相关的资源。那么问题来了，我们父进程先于子进程退出了怎么办。实际上这是一个很常见的场景。比如说大家去用两次 fork 实现守护进程。</p><p>我们常规的认知来说，我们父进程退出后，这个进程所属的所有子进程会进行 re-parent 到当前 PID Namespace 的一号进程上，那么这样的答案是正确的么？对，也不对，我们首先来看一个例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> pid;</span><br><span class="line">  <span class="type">int</span> err = prctl(PR_SET_CHILD_SUBREAPER, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (err != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ((pid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((pid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Here&#x27;s child process1\n&quot;</span>);</span><br><span class="line">      sleep(<span class="number">20</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;the child process pid is %d\n&quot;</span>, pid);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    sleep(<span class="number">40</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个很典型的两次 fork 创建守护进程的代码（除了我没写 SIGCHLD 处理（逃）。我们来看下这段代码的输出</p><p><img src="https://user-images.githubusercontent.com/7054676/107848258-ebe1eb00-6e2c-11eb-8c72-e4c5915ffa3f.png" alt="Daemon Process Output1"></p><p>我们能看到守护进程的 PID 是 449920</p><p>然后我们执行 <code>ps -efj</code> 和 <code>ps auf</code> 两个命令看一下结果</p><p><img src="https://user-images.githubusercontent.com/7054676/107848296-32cfe080-6e2d-11eb-943f-0efb9975b7ee.png" alt="Daemon Process Output2"></p><p>我们能看到，449920 这个进程在父进程退出后没有 re-parent 到当前空间的一号进程上。这是为什么呢？可能眼尖的同学已经注意到，这段代码中一个特殊的 sys call <strong>prctl</strong><a href="#refer-anchor-8"><sup>8</sup></a>。我们给当前进程设置了 <strong>PR_SET_CHILD_SUBREAPER</strong> 的属性。</p><p>这里我们来看一下内核里的实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * When we die, we re-parent all our children, and try to:</span></span><br><span class="line"><span class="comment"> * 1. give them to another thread in our thread group, if such a member exists</span></span><br><span class="line"><span class="comment"> * 2. give it to the first ancestor process which prctl&#x27;d itself as a</span></span><br><span class="line"><span class="comment"> *    child_subreaper for its children (like a service manager)</span></span><br><span class="line"><span class="comment"> * 3. give it to the init process (PID 1) in our pid namespace</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">struct</span> task_struct *<span class="title function_">find_new_reaper</span><span class="params">(<span class="keyword">struct</span> task_struct *father,</span></span><br><span class="line"><span class="params">   <span class="keyword">struct</span> task_struct *child_reaper)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">thread</span>, *<span class="title">reaper</span>;</span></span><br><span class="line"></span><br><span class="line">thread = find_alive_thread(father);</span><br><span class="line"><span class="keyword">if</span> (thread)</span><br><span class="line"><span class="keyword">return</span> thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (father-&gt;signal-&gt;has_child_subreaper) &#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> ns_level = task_pid(father)-&gt;level;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Find the first -&gt;is_child_subreaper ancestor in our pid_ns.</span></span><br><span class="line"><span class="comment"> * We can&#x27;t check reaper != child_reaper to ensure we do not</span></span><br><span class="line"><span class="comment"> * cross the namespaces, the exiting parent could be injected</span></span><br><span class="line"><span class="comment"> * by setns() + fork().</span></span><br><span class="line"><span class="comment"> * We check pid-&gt;level, this is slightly more efficient than</span></span><br><span class="line"><span class="comment"> * task_active_pid_ns(reaper) != task_active_pid_ns(father).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">for</span> (reaper = father-&gt;real_parent;</span><br><span class="line">     task_pid(reaper)-&gt;level == ns_level;</span><br><span class="line">     reaper = reaper-&gt;real_parent) &#123;</span><br><span class="line"><span class="keyword">if</span> (reaper == &amp;init_task)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (!reaper-&gt;signal-&gt;is_child_subreaper)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">thread = find_alive_thread(reaper);</span><br><span class="line"><span class="keyword">if</span> (thread)</span><br><span class="line"><span class="keyword">return</span> thread;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> child_reaper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们总结一下，当父进程退出后，所属的子进程，将按照如下顺序进行 re-parent</p><ol><li><p>线程组里其余可用线程（这里的线程有所不一样，可以暂时忽略）</p></li><li><p>在当前所属的进程树上不断寻找设置了 <strong>PR_SET_CHILD_SUBREAPER</strong> 进程</p></li><li><p>在前面两者都无效的情况下，re-parent 到当前 PID Namespace 中的 1 号进程上</p></li></ol><p>到这里，我们关于 Linux 中进程管理的基础介绍就完成了。那么我们将来聊聊容器中的情况</p><h3 id="容器中的一号进程"><a href="#容器中的一号进程" class="headerlink" title="容器中的一号进程"></a>容器中的一号进程</h3><p>这里，我们将利用，Docker 作为背景聊聊这个话题。首先，在 Docker 1.11 之后，其架构发生了比较大的变化，如下图所示</p><p><img src="https://user-images.githubusercontent.com/7054676/107848502-cf46b280-6e2e-11eb-8a69-f9eaf9d155a8.png" alt="Docker Arch since version 1.11"></p><p>那么我们拉起一个容器的的流程如下</p><ol><li><p>Docker Daemon 向 containerd 发送指令</p></li><li><p>containerd 创建一个 containterd-shim 进程</p></li><li><p>containerd-shim 创建一个 runc 进程</p></li><li><p>runc 进程将根据 OCI 标准，设置相关环境（创建 cgroup，创建 ns 等），然后执行 <code>entrypoint</code> 中的设定的命令</p></li><li><p>runc 在执行完相关设置后，将自我退出，此时其子进程（即容器命名空间内的1号进程）将被 re-parent 给 containerd-shim 进程。</p></li></ol><p>OK，上面 step 5 操作，就需要依赖我们上节中讲到的 <strong>prctl</strong> 和 <strong>PR_SET_CHILD_SUBREAPER</strong> 。</p><p>自此，containerd-shim 将承担容器内进程相关的操作，即便其父进程退出，子进程也会根据 re-parent 的流程托管到 containerd-shim 进程上。</p><p>那么，这样是不是就没有问题了呢？</p><p>答案很明显不是。来给大家举一个实际上的场景：假设我一个服务需要实现一个需求叫做优雅下线。通常而言，我们会在暴力杀死进程之前，利用 SIGTERM 信号实现这个功能。但是在容器时期有个问题，我们一号进程，可能不是程序本身（比如大家习惯性的会考虑在 entrypoint 中用 bash 去裹一层），或者经过一些特殊场景，容器中的进程，全部已经托管在 containerd-shim 上了。而 contaninerd-shim 是不具备信号转发的能力的。</p><p>所以在这样一些场景下，我们就需要考虑额外引入一些组件来完成我们的需求。这里以一个非常轻量级的专门针对容器的设计的一号进程项目 <strong>tini</strong><a href="#refer-anchor-9"><sup>9</sup></a> 来作为介绍</p><p>我们这里看一下核心的一些代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">register_subreaper</span> <span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (subreaper &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (prctl(PR_SET_CHILD_SUBREAPER, <span class="number">1</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (errno == EINVAL) &#123;</span><br><span class="line">PRINT_FATAL(<span class="string">&quot;PR_SET_CHILD_SUBREAPER is unavailable on this platform. Are you using Linux &gt;= 3.4?&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">PRINT_FATAL(<span class="string">&quot;Failed to register as child subreaper: %s&quot;</span>, strerror(errno))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">PRINT_TRACE(<span class="string">&quot;Registered as child subreaper&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">wait_and_forward_signal</span><span class="params">(<span class="type">sigset_t</span> <span class="type">const</span>* <span class="type">const</span> parent_sigset_ptr, <span class="type">pid_t</span> <span class="type">const</span> child_pid)</span> &#123;</span><br><span class="line"><span class="type">siginfo_t</span> sig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sigtimedwait(parent_sigset_ptr, &amp;sig, &amp;ts) == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> (errno) &#123;</span><br><span class="line"><span class="keyword">case</span> EAGAIN:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> EINTR:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">PRINT_FATAL(<span class="string">&quot;Unexpected error in sigtimedwait: &#x27;%s&#x27;&quot;</span>, strerror(errno));</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/* There is a signal to handle here */</span></span><br><span class="line"><span class="keyword">switch</span> (sig.si_signo) &#123;</span><br><span class="line"><span class="keyword">case</span> SIGCHLD:</span><br><span class="line"><span class="comment">/* Special-cased, as we don&#x27;t forward SIGCHLD. Instead, we&#x27;ll</span></span><br><span class="line"><span class="comment"> * fallthrough to reaping processes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">PRINT_DEBUG(<span class="string">&quot;Received SIGCHLD&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">PRINT_DEBUG(<span class="string">&quot;Passing signal: &#x27;%s&#x27;&quot;</span>, strsignal(sig.si_signo));</span><br><span class="line"><span class="comment">/* Forward anything else */</span></span><br><span class="line"><span class="keyword">if</span> (kill(kill_process_group ? -child_pid : child_pid, sig.si_signo)) &#123;</span><br><span class="line"><span class="keyword">if</span> (errno == ESRCH) &#123;</span><br><span class="line">PRINT_WARNING(<span class="string">&quot;Child was dead when forwarding signal&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">PRINT_FATAL(<span class="string">&quot;Unexpected error when forwarding signal: &#x27;%s&#x27;&quot;</span>, strerror(errno));</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们能很清楚看到两个核心点</p><ol><li><p>tini 会通过 <strong>prctl</strong> 和 <strong>PR_SET_CHILD_SUBREAPER</strong> 来接管容器内的孤儿进程</p></li><li><p>tini 在收到信号后，会将信号转发给子进程或者是所属的子进程组</p></li></ol><p>当然其实 tini 本身也有一些小问题（不过比较冷门）这里留一个讨论题：假设我们有这样一个服务，在创建10个守护进程后自己退出。在这十个守护进程中，我们都会设置一个全新的进程组 ID （所谓进程组逃逸）。那么我们怎么样将信号转发到这十个进程上（仅供讨论，生产上这么干的人早被打死了）</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可能看到这里，可能有人要喷我不讲武德，说好的容器内一号进程，但是花了大半篇幅来讲 Linux 进程233333.</p><p>实际上传统容器基本可以认为是在 OS 中执行的一个完整进程。讨论容器中的一号进程离不开讨论 Linux 中进程管理的相关知识点。</p><p>希望通过这篇技术水文能帮大家对容器中一号进程有个大概的认知，并能正确的使用和管理他。</p><p>最后祝大家新年快乐！（希望新年我能不以写水文为生，呜呜呜呜）</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><div id="refer-anchor-1"></div><ul><li>[1]. <a href="https://www.docker.com/">Docker</a></li></ul><div id="refer-anchor-2"></div><ul><li>[2]. <a href="https://containerd.io/">containerd</a></li></ul><div id="refer-anchor-3"></div><ul><li>[3]. <a href="https://katacontainers.io/">kata</a></li></ul><div id="refer-anchor-4"></div><ul><li>[4]. <a href="https://github.com/torvalds/linux/blob/master/include/linux/sched.h#L649">task_struct</a></li></ul><div id="refer-anchor-5"></div><ul><li>[5]. <a href="https://man7.org/linux/man-pages/man2/fork.2.html">Linux Man Page: fork</a></li></ul><div id="refer-anchor-6"></div><ul><li>[6]. <a href="https://man7.org/linux/man-pages/man2/ptrace.2.html">Linux Man Page: ptrace</a></li></ul><div id="refer-anchor-7"></div><ul><li>[7]. <a href="https://linux.die.net/man/2/waitpid">Linux man page: waitpid</a></li></ul><div id="refer-anchor-8"></div><ul><li>[8]. <a href="https://man7.org/linux/man-pages/man2/prctl.2.html">Linux man page: prctl</a></li></ul><div id="refer-anchor-9"></div><ul><li>[9]. <a href="https://github.com/krallin/tini">tini</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;新年了，决定趁着有时间的时候多写几篇技术水文。今天的话，准备来简单聊聊容器中我们每天都会接触，但是时常又会被我们忽略的一号进程&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/Linux/"/>
    
    
    <category term="编程" scheme="https://manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://manjusaka.blog/tags/Linux/"/>
    
    <category term="笔记" scheme="https://manjusaka.blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="水文" scheme="https://manjusaka.blog/tags/%E6%B0%B4%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>但行好事，莫问前程</title>
    <link href="https://manjusaka.blog/posts/2021/02/11/do-anything-you-want/"/>
    <id>https://manjusaka.blog/posts/2021/02/11/do-anything-you-want/</id>
    <published>2021-02-11T05:00:00.000Z</published>
    <updated>2022-11-20T15:39:13.817Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章，实际上本应该在 2020 年结束时写完的。不过我是一个拖延症患者，而且写这篇文章时会想起一些已经离去的人，所以一直不愿动笔，拖到了现在。不过在农历新年的末尾，还是得写出来，给自己去过一年一个总结吧。</p><span id="more"></span><h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>怎么说呢，2020其实是很操蛋的一年，我无数次的在内心问候”2020，我日你仙人“（山本大佐表示很赞）</p><p>但是2020呢，其实又是挺好的一年，让我估计后面会无数次的从2020这一年里学到的东西中受益。</p><p>所以吧，我把这暂且称为薛定谔2020？（算了，这 TM 就是 Manjusaka 的2020</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>大年三十了，先说点难过的吧，熟悉我的朋友都知道，我其实2020的职业生涯从职级的角度上来说可以用职场败犬来形容</p><p>Yep，没错，我被降级了，而且晋升还他娘挂了。你说我气不气</p><p>你要说我心态没有炸实际上是不可能的，在19年调转时刚得知降级结果那段时间心态简直爆炸。当时我老板说了一句印象非常深刻的话”你怎么焦虑成这样了，我记得你当时刚进来时不是这样的啊？“</p><p>在心里接受降级后，开始继续努力搬砖争取晋升回来后，然后，晋升又挂了。我？？？？？？</p><p>不过说回来，其实这段经历，可能在刚刚发生那一会儿乃至后续的一段时间，让我一度焦虑狂躁。但是从我现在的视角去看，其实也能反思很多东西。</p><p>实际上经历过这一段很特殊的经历后，我自己的心态已经算是相对平和，某种意义上比刚去阿里云时来得更为沉得住气。如同前段时间我给老板说过的一样，现在的我更希望去做一些自己认可的事，而不是纯粹的为了半年后的晋升去做什么事。往往机关算尽，到头却功亏一篑。不值当</p><p>嘛，当时在调转之初，我老板送我的一句话，我觉得非常受用：</p><blockquote><p>你现在所经历的事情在当下你看来可能无法接受，但是如果将时间放大到整个一生这几十年的尺度来看，其实可能也不算什么大事了。</p></blockquote><p>抛开职级不谈，说实话在阿里云一年多时间里，虽然也经历了客服支持，连续加班等非常惨痛的经历。不过就我而言，可以说还是蛮享受以及这段时间的工作。</p><p>在云这边我主要的工作是和同事一起从0开始做了一款公有云上的网关产品。在去年组织结构变动后，又跑来做监控服务了。</p><p>在这么样的一个过程中，我的角色从在饿了么时期的一个纯粹的一个对内的 infra RD 的角色切换成了一个云产品的研发，我觉得这样一个角色的转变其实是能让我从一个不同的视角去审视 infra 这件事。如果说在对内时期，你做的东西可以通过一些非技术上的手段去强行 push 落地的话。那么在做云产品的时候，如果你产品无法提供足够 OK 的成本，特性，是不会有客户给你产品买单的（当然，你爸要是客户老板当我没说）。</p><p>这样一个观点的转变，让我更能从客户的视角去系统的思考我们做的事的意义。而通过客户支持的经历让我能贴近客户真实的使用场景与业务。我觉得这样一段经历对于我来说是非常重要的。</p><p>另外一个方面是我在云这段时间，有足够的场景和驱动力，去对内核，eBPF ，SystemTap 等一些相对冷门和深入的技术进行探究。我觉得也是非常不错的。</p><p>不过提到工作我就没法逃避的一个事实（也是我迟迟不想写这篇文章的原因）就是，2020，我失去的我最早期刚进入职场时的领路人，也是我最好的朋友。如果说，我师父在我职业早期送我最重要的礼物是说”学习任何一个东西需要系统化“，那么他送给我的礼物就是正确的职业态度，正确的提问方式等很多很细碎，但是足够让我受益终生的东西。So，RIP &amp;&amp; 2020 我日你仙人*2。</p><h2 id="感情"><a href="#感情" class="headerlink" title="感情"></a>感情</h2><p>和荆澈同学的感情步入了第三年，依旧非常甜蜜。荆澈同学一如既往的照顾我，比如我身上现在的行头都是荆澈同学给我买的，而此文由荆澈同学给我买的 HHKB Hybrid 写出！</p><p>而且我们第一次一起去拍了美美的情侣照！有一说一，情侣照成片拿到手后，我最喜欢干的一件事就是换微信头像Hhhh（逃</p><p>不过说实话，很多时候觉得我自己还不算是一个合格的男朋友，很多时候小事和小细节非常不注意（= =我也很绝望）会无意间让她非常不开心，用她吐槽我的话来说，就是”败兴大王“，而且之前自己作死导致19年身体一直时好时坏，也让荆澈同学操了不少心。</p><p>所以，有些时候我也在想，荆澈同学没把我扔出去也是神奇Hhhh。不过我自己也定了很多目标，会一点点的改掉自己很多不好的习惯！不过这里突然想引用一下每年给荆澈同学一封信中我经常说的一句话</p><blockquote><p>亲爱的，我感激并享受着你的爱</p></blockquote><p>啊，对了，在年初的时候，和荆澈同学一起，列了不少今年要一起做的事，希望能一起好好的走下去。（再次表白荆澈同学！）</p><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p>嘛，实际上去年年初的时候，因为各种原因没有给自己立下什么 flag，所以大概聊聊自己过去一年多做的一些事吧。</p><p>读书方面的话，我自己比较印象深刻的有这样几本</p><ol><li><p>Design Data Intensive Application</p></li><li><p>Kubernetes in Action</p></li><li><p>BPF Performance Tools</p></li></ol><p>然后因为各种原因，复习/新读了几篇论文，比如印象比较深刻的 Cloud Programming Simplified A Berkeley View on Serverless Computing, Maglev A Fast and Reliable Software Network Load Balancer。</p><p>社区方面的话，今年一如既往的参与了 PyCon China 2021 的筹办，参与了两次 Meetup 分享。收获了微软的 MVP ，算是完成了一个软粉的夙愿。</p><p>整体来看吧，可能输出没有之前多，而且也有点偷懒了，具体原因后面会说。，不过可能还算是一个合格的答卷。希望21年能够继续在技术上勇猛精进吧</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>嘛，实际上生活上这一年多的变化还是蛮大的，首先正儿八经的讲，我没有穿迷彩了！（实际上是荆澈同学看不下去了包办了我全身的行头！）</p><p>在年初的时候，家里加入了一个新的成员，一只“憨厚“”老实“”稳重“的红虎斑缅因猫年年，这样一来，我们家就有了四只猫！年年说实话给我们的生活带来了很多的乐趣（除了踩在我肚子上的时候）</p><p>而过去一年，在生活上比较大的一个变化是，我第一次意识到了，除了技术和睡觉，生活也很重要。开始时不时的和亲爱的荆澈同学一起打打游戏（一起动森，一起分手厨房），一起看看剧，逛逛淘宝啥的。说实话，非常幸福，这也是我之前从未有过的体验。Hhhhhh</p><p>另外一方面，2020年，我做了一件对我来说可能是比较重要的一个事，在17年确诊抑郁后，当时分析成因可能是因为来源于自己小时候被性侵后的 PTSD。所以我选择将我自己的经历不断以文字的形式公开出来。而去年，我选择参与进华师的一个研究，我面向研究者，完整的，深入的直面了当时我被性侵的细节，心里状况，反思及建议</p><p>这件事实际上，对于我来说意义也非常重要。我希望能通过自己和其余人的努力，能让国内被性侵儿童心里干涉相关的研究能够进一步发展。这里非常非常谢谢亲爱的荆澈同学对我的支持，几次因为小时候的事极度丧的时候，都是荆澈同学一直在给我拥抱并安慰。而且荆澈同学也非常支持并鼓励我讲自己的经历分享出来。同时我们决定，将自己参加研究所得到的相关收入捐赠给公益基金会。</p><h2 id="但行好事，莫问前程"><a href="#但行好事，莫问前程" class="headerlink" title="但行好事，莫问前程"></a>但行好事，莫问前程</h2><p>嗯，差不多流水帐就这样一些，说实话，2020年，对于我来说其实是很特殊的一年，有过哭泣，有过坚强，想过放弃，但是又继续走了下去</p><p>这一年，或者说过去四年，能跌跌撞撞的走到现在，有很多的人想感谢，亲爱的荆澈同学，师父，几位密友，捕蛇者说的搭档，历任的 Leader，推上认识的朋友。感谢你们一路相伴，带我看了更大的世界。然后，其实我想第一次在这里谢谢自己，谢谢自己在无数次想过一了百了之后，还是坚持到了今天。</p><p>前两天，我看着我招行账单，上面显示说，我自己的收入比19年高了不少，当时心里百味杂陈，给亲爱的说“我们日子会越过越好的”</p><p>嗯，Everything is gonna be OK</p><p>如果说四年前，在17年的总结中，我送给自己的话是 “诗酒趁年华”。那么在经历过挫折，反思，成长，可能不算丰富，但是对我来说却意义重大的四年后。我选择送给自己的话，也是这篇记录的标题</p><p><strong>但行好事，莫问前程</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇文章，实际上本应该在 2020 年结束时写完的。不过我是一个拖延症患者，而且写这篇文章时会想起一些已经离去的人，所以一直不愿动笔，拖到了现在。不过在农历新年的末尾，还是得写出来，给自己去过一年一个总结吧。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://manjusaka.blog/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="总结" scheme="https://manjusaka.blog/categories/%E9%9A%8F%E7%AC%94/%E6%80%BB%E7%BB%93/"/>
    
    <category term="秀恩爱" scheme="https://manjusaka.blog/categories/%E9%9A%8F%E7%AC%94/%E6%80%BB%E7%BB%93/%E7%A7%80%E6%81%A9%E7%88%B1/"/>
    
    
    <category term="随笔" scheme="https://manjusaka.blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="总结" scheme="https://manjusaka.blog/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>云原生时代的几个爆论</title>
    <link href="https://manjusaka.blog/posts/2020/12/31/fuck-the-cloud-native/"/>
    <id>https://manjusaka.blog/posts/2020/12/31/fuck-the-cloud-native/</id>
    <published>2020-12-31T04:00:00.000Z</published>
    <updated>2022-11-20T15:39:13.817Z</updated>
    
    <content type="html"><![CDATA[<p>从去年调转到现在，做了一段时间的云原生，我突发奇想，想发表几个爆论来论述下我眼中的云原生来作为今年最后一篇技术博客。本文纯属个人向吐槽，与本人公司立场无关</p><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>云原生大概在 2014-2015 年开始左右，开始正式的提出了这个概念。2015 年 Google 主导成立了云原生计算基金会（Cloud Native Computing Foundation aka CNCF)。在 2018 年，CNCF 在 <strong>CNCF Cloud Native Definition v1.0</strong><a href="#refer-anchor-1"><sup>1</sup></a> 首次对云原生的概念有了一个认定</p><blockquote><p>Cloud native technologies empower organizations to build and run scalable applications in modern, dynamic environments such as public, private, and hybrid clouds. Containers, service meshes, microservices, immutable infrastructure, and declarative APIs exemplify this approach.<br>These techniques enable loosely coupled systems that are resilient, manageable, and observable. Combined with robust automation, they allow engineers to make high-impact changes frequently and predictably with minimal toil.</p></blockquote><p>其中文翻译如下：</p><blockquote><p>云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式API。<br>这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更。</p></blockquote><p>从官方的定义来看，我更愿意将其称为一个愿景(vision/landscape)而不是一个定义(definition)，因为在上述的表达中，并没有清晰明确的表述出<strong>云原生</strong>这一新生概念的具体的范围与边界，也没有阐述清楚 <strong>Cloud Native</strong> 和 <strong>Non-Cloud Native</strong> 之间的差异。</p><p>如果以个人的视角来看，一个云原生应用具备以下特质</p><ol><li>容器化</li><li>服务化</li></ol><p>而一个践行云原生的组织，那么应该具备以下特质</p><ol><li><p>重度 Kubernetes 或其余容器调度平台（如 Shopee 自研的 <strong>eru2</strong><a href="#refer-anchor-2"><sup>2</sup></a></p></li><li><p>具备完整的监控体系</p></li><li><p>具备完整的 CI/CD 体系</p></li></ol><p>在这个基础上，最近看到很多人都在讨论云原生这一新生概念，所以我想在这里聊聊个人向的四个爆论（爆论中的数据是个人主观判断，轻喷）</p><ol><li>百分之95以上的公司，没有完成 CI/CD 体系的建立。也没有完成线上服务进程的收敛</li><li>百分之90以上的公司，没有能微服务化的技术储备</li><li>百分之90以上的公司，没有能撑起容器化的技术储备</li></ol><h2 id="开始爆论"><a href="#开始爆论" class="headerlink" title="开始爆论"></a>开始爆论</h2><h3 id="1-百分之95以上的公司，没有完成-CI-CD-体系的建立。也没有完成线上服务进程的收敛"><a href="#1-百分之95以上的公司，没有完成-CI-CD-体系的建立。也没有完成线上服务进程的收敛" class="headerlink" title="1. 百分之95以上的公司，没有完成 CI/CD 体系的建立。也没有完成线上服务进程的收敛"></a>1. 百分之95以上的公司，没有完成 CI/CD 体系的建立。也没有完成线上服务进程的收敛</h3><p>CI 指持续集成（Continuous Integration aka CI），而 CD 指<strong>持续交付</strong>(Continuous Delivery aka CD)，通常来讲 CI 与 CD 的定义如下（此处引用 Brent Laster 在 <strong>What is CI/CD?</strong><a href="#refer-anchor-3"><sup>3</sup></a> 中给出的定义</p><blockquote><p>Continuous integration (CI) is the process of automatically detecting, pulling, building, and (in most cases) doing unit testing as source code is changed for a product. CI is the activity that starts the pipeline (although certain pre-validations—often called “pre-flight checks”—are sometimes incorporated ahead of CI).<br>The goal of CI is to quickly make sure a new change from a developer is “good” and suitable for further use in the code base.<br>Continuous deployment (CD) refers to the idea of being able to automatically take a release of code that has come out of the CD pipeline and make it available for end users. Depending on the way the code is “installed” by users, that may mean automatically deploying something in a cloud, making an update available (such as for an app on a phone), updating a website, or simply updating the list of available releases.</p></blockquote><p>通常在我们的实践中，CI 和 CD 的边界并不明显。以常见的基于 Jenkins 的实践为例，我们通常的一套路径是</p><ol><li><p>创建一个 Jenkins 的项目，设定一个 Pipeline（其中包含代码拉取，构建，单元测试等 task），设置触发条件</p></li><li><p>当指定代码仓库存在主分支代码合入等操作时，执行 Pipeline ，然后生成产物</p></li></ol><p>在生成产物后的，常见有两种做法</p><ol><li><p>在生成产物的下一个阶段触发自动的 deploy 流程，按照 deploy script 直接将生成的产物/镜像直接部署到目标服务器上</p></li><li><p>将生成的产物上传到中间平台，由人通过部署平台手动触发部署任务</p></li></ol><p>在上面描述的过程中，如果有着完备的流程的公司还会有着其余的辅助流程（如 PR/MR 时的 CI 流程，CR 流程等）</p><p>而在面对目标平台的部署时，我自己的另外一个观点是大部分的公司没有完成线上服务进程的收敛。讲个笑话：</p><blockquote><p>Q: 你们怎么部署线上服务呀？A；nohup，tmux，screen</p></blockquote><p>对于当下而言，一个规范化的 CI/CD 流程，收口的线上的服务进程的管理，至少在当下，有着可以遇见的几个好处</p><ol><li><p>尽可能的降低人为手动变更带来的风险</p></li><li><p>能够较好的完成基础运行依赖配置的收口</p></li><li><p>依托目前主流的开源的 systemd, supervisor, pm2 等进程管理工具，能对进程提供基础的 HA 的保证（包括进程探活，进程重拉等）</p></li><li><p>为后续的服务化，容器化等步骤打下基础</p></li></ol><h3 id="2-百分之90以上的公司，没有能微服务化的技术储备"><a href="#2-百分之90以上的公司，没有能微服务化的技术储备" class="headerlink" title="2. 百分之90以上的公司，没有能微服务化的技术储备"></a>2. 百分之90以上的公司，没有能微服务化的技术储备</h3><p>如果说，对于爆论1 提到的 CI/CD 等手段，我更多的觉得这是一个制度障碍大于技术障碍的现实。那么接下来的几个爆论，我更愿意用<strong>没有技术储备</strong>来形容</p><p>先来说说爆论2: 百分之90以上的公司，没有能微服务化的技术储备</p><p>首先来聊聊微服务的概念吧，微服务实际上在计算机历史上有着不同的论述，在2014年 Martin Fowler 和 James Lewis 正式在 <strong>Microservices a definition of this new architectural term</strong><a href="#refer-anchor-4"><sup>4</sup></a> 一文中正式的提出了微服务（Microservice）这一概念。<br>此处引用维基百科的一段概述</p><blockquote><p>微服务是由以单一应用程序构成的小服务，自己拥有自己的行程与轻量化处理，服务依业务功能设计，以全自动的方式部署，与其他服务使用HTTP API通信。同时服务会使用最小的规模的集中管理 (例如 Docker) 能力，服务可以用不同的编程语言与数据库等组件实现</p></blockquote><p>那么我们来用研发的话来尝试描述下关于微服务和与之对应的传统单体服务（Monolith） 之间显著性的差异</p><ol><li><p>微服务的 scope 更小，其更多的专注在某一个功能，或者某一类的功能上</p></li><li><p>由于其 scope 更小的特性，其变更，crash 所带来的影响相较于传统的单体来说更小</p></li><li><p>对于多语言多技术栈团队来说更为友好</p></li><li><p>”符合“现在互联网所需求的小步快跑，快速迭代的大目标</p></li></ol><p>那么我们这里需要思考一下，微服务这一套体系，如果我们想要去进行落地和实践，那么我们需要怎么样的技术储备？我觉得主要是两个方面，架构和治理</p><p>首先来聊聊架构吧，我觉得对于微服务来说，最麻烦的一个问题在于从传统单体应用上进行拆分（当然要是最开始创始之初就开始搞微服务的当我没说，虽然这样也有其余的问题）</p><p>如前面所说，微服务相较于传统的单体应用来说，，其 scope 更小，更专注在某一个功能或者某一类的功能上。那么这里所引申出来我觉得做微服务最大的一个问题在于合理的划分功能边界并进行拆分</p><p>如果拆分不合理那么将导致服务之间相互耦合，比如我将用户鉴权放置在商城服务中，导致我论坛服务需要依赖其不需要的商城服务。如果拆分的过细，那么将导致出现一个很有趣的现象，一个规模不大的业务拆了100多个服务 repo 出来（我们把这种情况称为： 微服务难民2333）</p><p>我们践行落地微服务这一套理念，是因为我们在业务和团队规模扩大后，面对多样化的需求与团队成员技术栈时，传统单体应用在其持续维护上的成本将会是一个不小的开支。我们希望引入微服务来尽可能减少维护成本，降低风险。但是不合理的拆分，将会重新让我们的维护成本远超继续践行单体化的方案</p><p>而我觉得阻碍微服务继续践行的另外一个问题是治理问题。我们来看一下在微服务化后我们所面临的几个问题</p><ol><li><p>可观测性的问题。如前面所说，微服务化后的单个服务 scope 更小，更多的专注在某一个功能或者某一类功能上。那么这可能导致的问题是，我们在完成一个业务请求所需要经历的请求链路更长。那么按照通用的观点来看，链路更长，其风险更大。那么在在当服务存在异常时（比如业务 RT 的突然增高）我们怎么样去定位具体服务的问题？</p></li><li><p>配置框架的收口。在微服务化的场景中，我们可能会选择将一些基础的功能下沉至具体的内部框架中（如服务注册，发现，路由等），那么意味着我们需要维护自己的框架，同时完成配置的收敛</p></li><li><p>老生常谈的服务治理（注册、发现、熔断）等</p></li><li><p>由于微服务化后，对于一个完备 CI/CD 机制的需求将变得更为迫切。那么如果存在爆论1的情况，将会成为践行微服务这一理念的障碍</p></li></ol><p>诚然，目前无论开源社区（如 Spring Cloud，Go—Micro 等）还是四大云厂商（AWS，Azure，阿里云，GCP）都在尝试提供一种开箱即用的微服务方案，但是除了没法很好的解决如上面所说的诸如架构这样的问题外，其也存在自己的问题</p><ol><li><p>无论是依赖开源社区的方案，还是云厂商的方案，都需要使用者具备一定的技术素养，来定位特定情况下框架中的问题</p></li><li><p>Vendor Lock-in，目前开箱即用的微服务方案并没有一个通用的开源事实标准。那么依赖某一个开源社区或者云厂商的方案将存在 vendor lock-in 的问题</p></li><li><p>无论是开源社区的方案还是云厂商的方案，都存在多语言不友好的问题（大家貌似现在都喜欢 Java 一点（Python 没人权.jpg</p></li></ol><p>所以爆论2想表明的一个最核心的观点就是：微服务化并不是一个无代价的行为，与之相反的是一个需要不低技术储备与人力投入的的行为。所以请不要认为微服务是万能良药。请按需使用</p><h3 id="3-百分之90以上的公司，没有能撑起容器化的技术储备"><a href="#3-百分之90以上的公司，没有能撑起容器化的技术储备" class="headerlink" title="3. 百分之90以上的公司，没有能撑起容器化的技术储备"></a>3. 百分之90以上的公司，没有能撑起容器化的技术储备</h3><p>目前很主流的一个观点，是能上容器尽可能上容器，说实话这个想法实际上是有一定的合理性的，去 review 这个想法，我们需要去看一下容器这个东西，给我们带来了什么样的改变</p><p>容器首先毫无疑问，会给我们带来非常多的好处：</p><ol><li>真正意义上让开发与生产环境保持一致是一种非常方便的事，换句话说，开发说的“这个服务在我本地没啥问题”是一句有用的话了</li><li>让部署一些服务变的更为方便，无论是分发，还是部署，</li><li>能做到一定程度上的资源隔离与分配</li></ol><p>那么，看起来我们是不是可以无脑用容器？不，不是，我们需要再来 Review 一下，容器化后我们可能所要面临的一些弊端：</p><ol><li>容器安全性问题，目前最主流的容器实现（此处点名 Docker）本质上而言还是基于 CGroups + NS 来进行资源与进程隔离。那么其安全性将会是一个非常值得考量的问题。毕竟 Docker 越权与逃逸漏洞年年有，年年新。那么这意味着我们是需要去有一个系统的机制去规范我们容器的使用，来保证相关的越权点能被把控在一个可控的范围内。而另一个方向是镜像安全问题，大家都是面向百度/CSDN/Google/Stackoverflow 编(fu)程(zhi)选手，那么势必会出现一个情况，当我们遇到一个问题，搜索一番，直接复制点 Dockerfile 下来，这个时候，将会存在很大的风险点，毕竟谁也不知道 base image 里加了啥料不是？</li><li>容器的网络问题。当我们启动若干个镜像后，那么容器之间的网络互通怎么处理？而大家生产环境，肯定不止一个机器那么少，那么跨主机的情况下，怎么样去进行容器间的通信，同时保证网络的稳定性？</li><li>容器的调度与运维的问题，当我一个机器高负载的时候，怎么样去将该机器上的一些容器调度到其余的机器上？而怎么样去探知一个容器是否存活？如果一个容器 crash 了，怎么样重新拉起？</li><li>容器具体的细节问题，比如镜像怎么样构建与打包？怎么样上传？（又回到了爆论1）乃至说怎么样去排查一些 corner case 的问题？</li><li>对于一些特定的 large size 的镜像（如机器学习同学常用的 CUDA 官方镜像，打包了字典模型等大量数据的镜像等）怎么样去快速下载，快速发布？</li></ol><p>可能这里又会有一种观点，没事，我们上 Kubernetes 就好啦，上面这些很多问题就能解决啦！好吧，我们再来聊聊这个问题</p><p>首先我已经忽略掉自建 Kubernetes 集群的场景了，因为那不是一般人能 Hold 住的。那么我们来看一下，依托公有云使用的情况吧，以阿里云为例，点开页面，然后我们见到这样张图</p><p><img src="https://manjusakablog.blob.core.windows.net/blog-resource/images/2020-06-29-01.png" alt="1"></p><p><img src="https://manjusakablog.blob.core.windows.net/blog-resource/images/2020-06-29-02.png" alt="2"></p><p>好了，提问：</p><ol><li>VPC 是什么？</li><li>Kubernetes 1.16.9 和 1.14.8 有什么区别</li><li>Docker 19.03.5 和阿里云安全沙箱 1.1.0 是什么，有什么区别</li><li>专有网络是什么？</li><li>虚拟交换机是什么？</li><li>网络插件是什么？Flannel 和 Terway 又是什么？有什么区别？当你翻了翻文档，然后文档告诉你，Terway 是阿里云基于 Calico 魔改的 CNI 插件。那么 CNI 插件是什么？Calico 是什么？</li><li>Pod CIDR 是什么怎么设？</li><li>Service CIDR 是什么怎么设？</li><li>SNAT 是什么怎么设？</li><li>安全组怎么配置？</li><li>Kube-Proxy 是什么？iptables 和 IPVS 有什么区别？怎么选？</li></ol><p>大家能看到上面的问题涵盖了这样几方面</p><ol><li><p>Kubernetes 本身的深入了解（CNI，runtime，kube-proxy 等）</p></li><li><p>一个合理网络规划</p></li><li><p>对于云厂商特定功能的熟悉</p></li></ol><p>在我看来，这三方面任何一方面对于一个技术团队的技术储备以及对于业务的理解（广义的技术储备）都需要有一个不浅的需求。</p><p>当然这里在碎碎念一下，实际上搞 Kubernetes 这一套开销实际上很大的（有点偏题，但是还是继续说吧）</p><ol><li>你得有个镜像仓库吧，不贵，中国区基础版780一个月</li><li>你集群内的服务需要暴露出去用吧？行叭，买个最低规格的 SLB，简约型，每个月200</li><li>好了，你每个月日志得花钱吧？假设你每个月20G日志，不多吧？行，39.1</li><li>你集群监控要不要？好，买，每天50w条日志上报吧？行，不贵，975 一个月</li></ol><p>算一下，一个集群吧，(780+200+39.1+975)*12=23292.2一年，不算集群基础的 ENI，ECS 等费用，美滋滋</p><p>而且 Kubernetes 会有很多的玄学的问题，也需要技术团队有足够的技术储备来进行排查（我想想啊，我遇到过 CNI 一号进程 crash 了没重拉，特定版本上的内核 cgroup 泄漏，ingress OOM 等问题），大家可以去 Kubernetes 的 Issue 区看一下盛况（说多了都是泪）</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我知道这篇文章写出来会存在很多的争议。但是我始终想表述的一个观点是对于云原生时代这一套东西（实际上也更多是之前传统技术的延伸），他们的引入并不是无代价，并不是无成本的。对于有着足够规模与痛点的公司来说，这样的成本对于他们的业务增长来说是一个正向的促进，而对于更多中小企业来说，可能这一套对于业务的提升将会是非常小乃至说是负作用。</p><p>我希望我们技术人员在做技术决策的时候，一定是在评估自己的团队的技术储备乃至对于业务的收益后再引入某一种技术与理念，而不是引入一个技术只是因为它看起来够先进，够屌，能够为我的简历背书</p><p>最后用之前我分享过的一句话来作为本文的结尾吧</p><blockquote><p>一个企业奔着技术先进性去搞技术，就是死</p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><div id="refer-anchor-1"></div><ul><li><ol><li><a href="https://github.com/cncf/toc/blob/master/DEFINITION.md">CNCF Cloud Native Definition v1.0</a></li></ol></li></ul><div id="refer-anchor-2"></div><ul><li><ol start="2"><li><a href="https://github.com/projecteru2/core">projecteru2</a></li></ol></li></ul><div id="refer-anchor-3"></div><ul><li><ol start="3"><li><a href="https://opensource.com/article/18/8/what-cicd">What is CI/CD?</a></li></ol></li></ul><div id="refer-anchor-4"></div><ul><li><ol start="4"><li><a href="https://martinfowler.com/articles/microservices.html">Microservices a definition of this new architectural term</a></li></ol></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;从去年调转到现在，做了一段时间的云原生，我突发奇想，想发表几个爆论来论述下我眼中的云原生来作为今年最后一篇技术博客。本文纯属个人向吐槽，与本人公司立场无关&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="随想" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/%E9%9A%8F%E6%83%B3/"/>
    
    
    <category term="编程" scheme="https://manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="随想" scheme="https://manjusaka.blog/tags/%E9%9A%8F%E6%83%B3/"/>
    
    <category term="云原生" scheme="https://manjusaka.blog/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>简单聊聊进程中的信号处理 V2</title>
    <link href="https://manjusaka.blog/posts/2020/11/07/a-simple-introduction-about-signal-process-in-linux-v2/"/>
    <id>https://manjusaka.blog/posts/2020/11/07/a-simple-introduction-about-signal-process-in-linux-v2/</id>
    <published>2020-11-07T13:09:00.000Z</published>
    <updated>2022-11-20T15:39:13.817Z</updated>
    
    <content type="html"><![CDATA[<p>上次写了一个水文<a href="https://manjusaka.itscoder.com/posts/2020/10/24/a-simple-introduction-about-signal-process-in-linux/">简单聊聊进程中的信号处理</a> ，师父看了后把我怒斥了一顿，表示上篇水文中的例子太 old style, too simple ,too naive。如果未来出了偏差，我也要负泽任的。吓得我连和妹子周年庆的文章都没写，先赶紧来重新水一篇文章，聊聊更优秀，更方便的信号处理方式</p><span id="more"></span><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>首先来看看，之前那篇文章中的例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">deletejob</span><span class="params">(<span class="type">pid_t</span> pid)</span> &#123; <span class="built_in">printf</span>(<span class="string">&quot;delete task %d\n&quot;</span>, pid); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">addjob</span><span class="params">(<span class="type">pid_t</span> pid)</span> &#123; <span class="built_in">printf</span>(<span class="string">&quot;add task %d\n&quot;</span>, pid); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">  <span class="type">int</span> olderrno = errno;</span><br><span class="line">  <span class="type">sigset_t</span> mask_all, prev_all;</span><br><span class="line">  <span class="type">pid_t</span> pid;</span><br><span class="line">  sigfillset(&amp;mask_all);</span><br><span class="line">  <span class="keyword">while</span> ((pid = waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev_all);</span><br><span class="line">    deletejob(pid);</span><br><span class="line">    sigprocmask(SIG_SETMASK, &amp;prev_all, <span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (errno != ECHILD) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;waitpid error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  errno = olderrno;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">  <span class="type">int</span> pid;</span><br><span class="line">  <span class="type">sigset_t</span> mask_all, prev_all;</span><br><span class="line">  sigfillset(&amp;mask_all);</span><br><span class="line">  signal(SIGCHLD, handler);</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((pid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">      execve(<span class="string">&quot;/bin/date&quot;</span>, argv, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev_all);</span><br><span class="line">    addjob(pid);</span><br><span class="line">    sigprocmask(SIG_SETMASK, &amp;prev_all, <span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来复习下几个关键的 <code>syscall</code></p><ol><li><strong>signal</strong><a href="#refer-anchor-1"><sup>1</sup></a>: 信号处理函数，使用者可以通过这个函数为当前进程指定具体信号的 Handler。当信号触发时，系统会调用具体的 Handler 进行对应的逻辑处理。</li><li><strong>sigfillset</strong><a href="#refer-anchor-2"><sup>2</sup></a>: 用于操作 <strong>signal sets</strong>（信号集）的函数之一，这里的含义是将系统所有支持的信号量添加进一个信号集中</li><li><strong>fork</strong><a href="#refer-anchor-3"><sup>3</sup></a>: 大家比较熟悉的一个 API 了，创建一个新的进程，并返回 <strong>pid</strong> 。如果是在父进程中，返回的 <strong>pid</strong> 是对应子进程的 <strong>pid</strong>。如果子进程中，<strong>pid</strong> 为0</li><li><strong>execve</strong><a href="#refer-anchor-4"><sup>4</sup></a>: 执行一个特定的可执行文件</li><li><strong>sigprocmask</strong><a href="#refer-anchor-5"><sup>5</sup></a>：设置进程的信号屏蔽集。当传入第一个参数为 <strong>SIG_BLOCK</strong> 时，函数会将当前进程的信号屏蔽集保存在第三个参数传入的信号集变量中，并将当前进程的信号屏蔽集设置为第二个参数传入的信号屏蔽集。当第一个参数为 <strong>SIG_SETMASK</strong> 时，函数会将当前进程的信号屏蔽集设置为第二个参数设置的值。</li><li><strong>wait_pid</strong><a href="#refer-anchor-6"><sup>6</sup></a>: 做一个不精确的概括，回收并释放已终止的子进程的资源。</li></ol><p>好了，复习完关键点之后，开始进入本文的关键部分。</p><h2 id="更优雅的信号处理手段"><a href="#更优雅的信号处理手段" class="headerlink" title="更优雅的信号处理手段"></a>更优雅的信号处理手段</h2><h3 id="更优雅的-handler"><a href="#更优雅的-handler" class="headerlink" title="更优雅的 handler"></a>更优雅的 handler</h3><p>首先再来看看上面信号处理部分的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">  <span class="type">int</span> olderrno = errno;</span><br><span class="line">  <span class="type">sigset_t</span> mask_all, prev_all;</span><br><span class="line">  <span class="type">pid_t</span> pid;</span><br><span class="line">  sigfillset(&amp;mask_all);</span><br><span class="line">  <span class="keyword">while</span> ((pid = waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev_all);</span><br><span class="line">    deletejob(pid);</span><br><span class="line">    sigprocmask(SIG_SETMASK, &amp;prev_all, <span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (errno != ECHILD) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;waitpid error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  errno = olderrno;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们为了保证 <code>handler</code> 不被其余的信号打断，所以我们在处理的时候使用 <code>sigprocmask</code> + <code>SIG_BLOCK</code> 来做信号屏蔽。这样看起来逻辑上没啥问题，但是有个问题。当我们有其余很多不同 <code>handler</code> 的时候，我们势必会生成很多重复冗余的代码。那么我们有没有更优雅的方法来保证我们的 <code>handler</code> 的安全呢？</p><p>有（超大声（好，很有精神！（逃。隆重介绍一个新的 <strong>syscall</strong> -&gt; <strong>sigaction</strong><a href="#refer-anchor-7"><sup>7</sup></a></p><p>废话不多说，先上代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">deletejob</span><span class="params">(<span class="type">pid_t</span> pid)</span> &#123; <span class="built_in">printf</span>(<span class="string">&quot;delete task %d\n&quot;</span>, pid); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">addjob</span><span class="params">(<span class="type">pid_t</span> pid)</span> &#123; <span class="built_in">printf</span>(<span class="string">&quot;add task %d\n&quot;</span>, pid); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">  <span class="type">int</span> olderrno = errno;</span><br><span class="line">  <span class="type">sigset_t</span> mask_all, prev_all;</span><br><span class="line">  <span class="type">pid_t</span> pid;</span><br><span class="line">  sigfillset(&amp;mask_all);</span><br><span class="line">  <span class="keyword">while</span> ((pid = waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    deletejob(pid);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (errno != ECHILD) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;waitpid error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  errno = olderrno;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">  <span class="type">int</span> pid;</span><br><span class="line">  <span class="type">sigset_t</span> mask_all, prev_all;</span><br><span class="line">  sigfillset(&amp;mask_all);</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">new_action</span>;</span></span><br><span class="line">  new_action.sa_handler=handler;</span><br><span class="line">  new_action.sa_mask=mask_all;</span><br><span class="line">  signal(SIGCHLD, handler);</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((pid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">      execve(<span class="string">&quot;/bin/date&quot;</span>, argv, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev_all);</span><br><span class="line">    addjob(pid);</span><br><span class="line">    sigprocmask(SIG_SETMASK, &amp;prev_all, <span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好！很有精神！大家可能发现了，我们这段代码相较于之前的代码增加了关于 sigaction 相关的设置。难道？</p><p>yep，在 <strong>sigaction</strong> 中，我们可以通过设置 <code>sa_mask</code> 来设置当信号处理函数执行期间，进程将阻塞哪些信号。</p><p>你看，这样我们的代码是不是相较于之前更为优雅了。当然，<strong>sigaction</strong> 还有很多其余很有用的设置项，大家可以下来了解一下。</p><h3 id="更快速的信号处理方式"><a href="#更快速的信号处理方式" class="headerlink" title="更快速的信号处理方式"></a>更快速的信号处理方式</h3><p>在我们上面的例子中，我们已经解决了优雅的设置信号处理函数这样的问题，那么我们现在又面临了一个全新的问题。</p><p>如上面所说，我们信号处理函数在执行时，我们选择阻塞了其余的信号。那么这里存在一个问题，当我们在信号处理函数中的逻辑耗时较长，且不需要原子性（即需要和信号处理函数保持同步），而且系统中的信号发生频率较高。那么我们这样的做法将会导致进程的信号队列不断增加，进而导致不可预料的后果。</p><p>那么我们这里有什么更好的方法来处理这件事呢？</p><p>假设，我们打开一个文件，在信号处理函数中只完成一件事，就是往这个文件中写一个特定的值。然后我们轮询这个文件，如果一旦发生变化，那么我们读取文件中的值，判断具体的信号，做具体的信号处理，这样是不是既保证了信号的妥投，又保证我们信号处理逻辑将阻塞信号的代价降至最低了？</p><p>当然，当然，社区知道大家嫌写代码难，所以专门给大家提供了一个船新的 <code>syscall</code> -&gt; <strong>signalfd</strong><a href="#refer-anchor-8"><sup>8</sup></a></p><p>老规矩，先来看看例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/signalfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXEVENTS 64</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">deletejob</span><span class="params">(<span class="type">pid_t</span> pid)</span> &#123; <span class="built_in">printf</span>(<span class="string">&quot;delete task %d\n&quot;</span>, pid); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">addjob</span><span class="params">(<span class="type">pid_t</span> pid)</span> &#123; <span class="built_in">printf</span>(<span class="string">&quot;add task %d\n&quot;</span>, pid); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">  <span class="type">int</span> pid;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">event</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> *<span class="title">events</span>;</span></span><br><span class="line">  <span class="type">sigset_t</span> mask;</span><br><span class="line">  sigemptyset(&amp;mask);</span><br><span class="line">  sigaddset(&amp;mask, SIGCHLD);</span><br><span class="line">  <span class="keyword">if</span> (sigprocmask(SIG_SETMASK, &amp;mask, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;sigprocmask&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> sfd = signalfd(<span class="number">-1</span>, &amp;mask, <span class="number">0</span>);</span><br><span class="line">  <span class="type">int</span> epoll_fd = epoll_create(MAXEVENTS);</span><br><span class="line">  event.events = EPOLLIN | EPOLLEXCLUSIVE | EPOLLET;</span><br><span class="line">  event.data.fd = sfd;</span><br><span class="line">  <span class="type">int</span> s = epoll_ctl(epoll_fd, EPOLL_CTL_ADD, sfd, &amp;event);</span><br><span class="line">  <span class="keyword">if</span> (s == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">abort</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  events = <span class="built_in">calloc</span>(MAXEVENTS, <span class="keyword">sizeof</span>(event));</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="type">int</span> n = epoll_wait(epoll_fd, events, MAXEVENTS, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (errno == EINTR) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;epoll EINTR error\n&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (errno == EINVAL) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;epoll EINVAL error\n&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (errno == EFAULT) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;epoll EFAULT error\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (errno == EBADF) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;epoll EBADF error\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((events[i].events &amp; EPOLLERR) || (events[i].events &amp; EPOLLHUP) ||</span><br><span class="line">          (!(events[i].events &amp; EPOLLIN))) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;epoll err\n&quot;</span>);</span><br><span class="line">        close(events[i].data.fd);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sfd == events[i].data.fd) &#123;</span><br><span class="line">        <span class="keyword">struct</span> signalfd_siginfo si;</span><br><span class="line">        <span class="type">ssize_t</span> res = read(sfd, &amp;si, <span class="keyword">sizeof</span>(si));</span><br><span class="line">        <span class="keyword">if</span> (res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;read error\n&quot;</span>);</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res != <span class="keyword">sizeof</span>(si)) &#123;</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Something wrong\n&quot;</span>);</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (si.ssi_signo == SIGCHLD) &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;Got SIGCHLD\n&quot;</span>);</span><br><span class="line">          <span class="type">int</span> child_pid = waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">          deletejob(child_pid);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((pid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">      execve(<span class="string">&quot;/bin/date&quot;</span>, argv, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    addjob(pid);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，我们来介绍下这段代码中的一些关键点</p><ol><li>signalfd 是一类特殊的文件描述符，这个文件可读，可 <strong>select</strong> 。当我们指定的信号发生时，我们可以从返回的 fd 中读取到具体的信号值。</li><li><strong>signalfd</strong> 优先级比信号处理函数低。换句话说，假设我们为信号 <strong>SIGCHLD</strong> 注册了信号处理函数，同时也为其注册了 <strong>signalfd</strong> 那么当信号发生时，将优先调用信号处理函数。所以我们在使用 <strong>signalfd</strong> 时，需要利用 <strong>sigprocmask</strong> 设置进程的信号屏蔽集。</li><li>如前面所说，该文件描述符可 <strong>select</strong> ，换句话说，我们可以利用 <strong>select</strong><a href="#refer-anchor-9"><sup>9</sup></a>, <strong>poll</strong><a href="#refer-anchor-10"><sup>10</sup></a>, <strong>epoll</strong><a href="#refer-anchor-11"><sup>11</sup></a><a href="#refer-anchor-12"><sup>12</sup></a> 等函数来对 fd 进行监听。在上面的的代码中，我们就利用 <strong>epoll</strong> 对 <strong>signalfd</strong> 进行监听</li></ol><p>当然，这里额外要注意的一点是，很多语言不一定提供了官方的 <strong>signalfd</strong> 的 API（如 Python），但是也有可能提供了等价的替代品，典型的例子就是 Python 中的 <strong>signal.set_wakeup_fd</strong><a href="#refer-anchor-13"><sup>13</sup></a></p><p>在这里也给大家留一个思考题：除了利用 <strong>signalfd</strong> ，还有什么方法可以实现高效，安全的信号处理？</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>私以为信号处理是作为一个研发的基本功，我们需要安全，可靠的处理在程序环境中遇到的各种信号。而系统也提供了很多设计很优秀的 API 来减轻研发的负担。但是我们要知道，信号本质上是通讯手段的一种。而其天生的弊端便是携带的信息较少。很多时候，当我们有很多高频的信息传递需要去做的时候，这个时候可能利用信号并不是一个很好的选择。当然这个并没有定论。只能 case by case 的去做 trade-off。</p><p>差不多就这样吧，本周第二篇水文混完（逃</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><div id="refer-anchor-1"></div><ul><li>[1]. <a href="https://man7.org/linux/man-pages/man7/signal.7.html">Linux man page: signal</a></li></ul><div id="refer-anchor-2"></div><ul><li>[2]. <a href="https://linux.die.net/man/3/sigfillset">Linux man page: sigfillset</a></li></ul><div id="refer-anchor-3"></div><ul><li>[3]. <a href="https://man7.org/linux/man-pages/man2/fork.2.html">Linux man page: fork</a></li></ul><div id="refer-anchor-4"></div><ul><li>[4]. <a href="https://man7.org/linux/man-pages/man2/execve.2.html">Linux man page: execve</a></li></ul><div id="refer-anchor-5"></div><ul><li>[5]. <a href="https://man7.org/linux/man-pages/man2/sigprocmask.2.html">Linux man page: sigprocmask</a></li></ul><div id="refer-anchor-6"></div><ul><li>[6]. <a href="https://linux.die.net/man/2/waitpid">Linux man page: waitpid</a></li></ul><div id="refer-anchor-7"></div><ul><li>[7]. <a href="https://www.man7.org/linux/man-pages/man2/sigaction.2.html">Linux man page: sigaction</a></li></ul><div id="refer-anchor-8"></div><ul><li>[8]. <a href="https://www.man7.org/linux/man-pages/man2/sigaction.2.html">Linux man page: signalfd</a></li></ul><div id="refer-anchor-9"></div><ul><li>[9]. <a href="https://man7.org/linux/man-pages/man2/select.2.html">Linux man page: select</a></li></ul><div id="refer-anchor-10"></div><ul><li>[10]. <a href="https://man7.org/linux/man-pages/man2/poll.2.html">Linux man page: poll</a></li></ul><div id="refer-anchor-11"></div><ul><li>[11]. <a href="https://man7.org/linux/man-pages/man2/epoll_ctl.2.html">Linux man page: epoll_ctl</a></li></ul><div id="refer-anchor-12"></div><ul><li>[12]. <a href="https://man7.org/linux/man-pages/man2/epoll_wait.2.html">Linux man page: epoll_wait</a></li></ul><div id="refer-anchor-13"></div><ul><li>[13]. <a href="https://docs.python.org/3/library/signal.html#signal.set_wakeup_fd">Python Documentation: signal.set_wakeup_fd</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;上次写了一个水文&lt;a href=&quot;https://manjusaka.itscoder.com/posts/2020/10/24/a-simple-introduction-about-signal-process-in-linux/&quot;&gt;简单聊聊进程中的信号处理&lt;/a&gt; ，师父看了后把我怒斥了一顿，表示上篇水文中的例子太 old style, too simple ,too naive。如果未来出了偏差，我也要负泽任的。吓得我连和妹子周年庆的文章都没写，先赶紧来重新水一篇文章，聊聊更优秀，更方便的信号处理方式&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/Linux/"/>
    
    
    <category term="编程" scheme="https://manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://manjusaka.blog/tags/Linux/"/>
    
    <category term="笔记" scheme="https://manjusaka.blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="水文" scheme="https://manjusaka.blog/tags/%E6%B0%B4%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>为什么有些时候 Python 中乘法比位运算更快</title>
    <link href="https://manjusaka.blog/posts/2020/11/06/why-mul-faster-than-bit-shift-sometimes-in-python/"/>
    <id>https://manjusaka.blog/posts/2020/11/06/why-mul-faster-than-bit-shift-sometimes-in-python/</id>
    <published>2020-11-06T14:09:00.000Z</published>
    <updated>2022-11-20T15:39:13.821Z</updated>
    
    <content type="html"><![CDATA[<p>我本来以为我不再会写水文了，但是突然发现自己现在也只能勉强写写水文才能维持生活这样子。那就继续写水文吧</p><span id="more"></span><p>某天，一个技术群里老哥提出了这样一个问题，为什么在一些情况下，Python 中的简单乘/除法比位运算要慢</p><p>首先秉持着实事求是的精神，我们先来验证一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [33]: %timeit 1073741825*2                                                                                                                                                                                                                                                                           </span><br><span class="line">7.47 ns ± 0.0843 ns per loop (mean ± std. dev. of 7 runs, 100000000 loops each)</span><br><span class="line"></span><br><span class="line">In [34]: %timeit 1073741825&lt;&lt;<span class="string">1                                                                                                                                                                                                                                                                          </span></span><br><span class="line"><span class="string">7.43 ns ± 0.0451 ns per loop (mean ± std. dev. of 7 runs, 100000000 loops each)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In [35]: %timeit 1073741823&lt;&lt;1</span>                                                                                                                                                                                                                                                                          </span><br><span class="line">7.48 ns ± 0.0621 ns per loop (mean ± std. dev. of 7 runs, 100000000 loops each)</span><br><span class="line"></span><br><span class="line">In [37]: %timeit 1073741823*2                                                                                                                                                                                                                                                                           </span><br><span class="line">7.47 ns ± 0.0564 ns per loop (mean ± std. dev. of 7 runs, 100000000 loops each)</span><br></pre></td></tr></table></figure><p>我们发现几个很有趣的现象</p><ol><li>在值 <code>x&lt;=2^30</code> 时，乘法比直接位运算要快</li><li>在值 <code>x&gt;2^32</code> 时，乘法显著慢于位运算</li></ol><p>这个现象很有趣，那么这个现象的 <code>root cause</code> 是什么？实际上这和 Python 底层的实现有关</p><h2 id="简单聊聊"><a href="#简单聊聊" class="headerlink" title="简单聊聊"></a>简单聊聊</h2><h3 id="PyLongObject-的实现"><a href="#PyLongObject-的实现" class="headerlink" title="PyLongObject 的实现"></a>PyLongObject 的实现</h3><p>在 Python 2.x 时期，Python 中将整型分为两类，一类是 <strong>long</strong>, 一类是 <strong>int</strong> 。在 Python3 中这两者进行了合并。目前在 Python3 中这两者做了合并，仅剩一个 <strong>long</strong> </p><p>首先来看看 <strong>long</strong> 这样一个数据结构底层的实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">longobject</span> &#123;</span></span><br><span class="line">    PyObject_VAR_HEAD</span><br><span class="line">    digit ob_digit[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这里不用关心，<strong>PyObject_VAR_HEAD</strong> 的含义，我们只需要关心 <strong>ob_digit</strong> 即可。</p><p>在这里，<code>ob_digit</code> 是使用了 C99 中的“柔性数组”来实现任意长度的整数的存储。这里我们可以看一下官方代码中的文档</p><blockquote><p>Long integer representation.The absolute value of a number is equal to SUM(for i=0 through abs(ob_size)-1) ob_digit[i] * 2*<em>(SHIFT</em>i)<br>Negative numbers are represented with ob_size &lt; 0; zero is represented by ob_size == 0.<br>In a normalized number, ob_digit[abs(ob_size)-1] (the most significant digit) is never zero.  Also, in all cases, for all valid i,0 &lt;= ob_digit[i] &lt;= MASK.<br>The allocation function takes care of allocating extra memory so that ob_digit[0] … ob_digit[abs(ob_size)-1] are actually available.<br>CAUTION:  Generic code manipulating subtypes of PyVarObject has to aware that ints abuse  ob_size’s sign bit.</p></blockquote><p>简而言之，Python 是将一个十进制数转为 <strong>2^(SHIFT)</strong> 进制数来进行存储。这里可能不太好了理解。我来举个例子，在我的电脑上，SHIFT 为 30 ，假设现在有整数 1152921506754330628 ，那么将起转为 2^30 进制表示则为: 4*(2^30)^0+2*(2^30)^1+1*(2^30)^2 。那么此时 <code>ob_digit</code> 是一个含有三个元素的数组，其值为 [4,2,1]</p><p>OK，在明白了这样一些基础知识后，我们回过头去看看 Python 中的乘法运算</p><h3 id="Python-中的乘法运算"><a href="#Python-中的乘法运算" class="headerlink" title="Python 中的乘法运算"></a>Python 中的乘法运算</h3><p>Python 中的乘法运算，分为两部分，其中关于大数的乘法，Python 使用了 <strong>Karatsuba 算法</strong><a href="#refer-anchor-1"><sup>1</sup></a>，具体实现如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> PyLongObject *</span><br><span class="line"><span class="title function_">k_mul</span><span class="params">(PyLongObject *a, PyLongObject *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    Py_ssize_t asize = Py_ABS(Py_SIZE(a));</span><br><span class="line">    Py_ssize_t bsize = Py_ABS(Py_SIZE(b));</span><br><span class="line">    PyLongObject *ah = <span class="literal">NULL</span>;</span><br><span class="line">    PyLongObject *al = <span class="literal">NULL</span>;</span><br><span class="line">    PyLongObject *bh = <span class="literal">NULL</span>;</span><br><span class="line">    PyLongObject *bl = <span class="literal">NULL</span>;</span><br><span class="line">    PyLongObject *ret = <span class="literal">NULL</span>;</span><br><span class="line">    PyLongObject *t1, *t2, *t3;</span><br><span class="line">    Py_ssize_t shift;           <span class="comment">/* the number of digits we split off */</span></span><br><span class="line">    Py_ssize_t i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* (ah*X+al)(bh*X+bl) = ah*bh*X*X + (ah*bl + al*bh)*X + al*bl</span></span><br><span class="line"><span class="comment">     * Let k = (ah+al)*(bh+bl) = ah*bl + al*bh  + ah*bh + al*bl</span></span><br><span class="line"><span class="comment">     * Then the original product is</span></span><br><span class="line"><span class="comment">     *     ah*bh*X*X + (k - ah*bh - al*bl)*X + al*bl</span></span><br><span class="line"><span class="comment">     * By picking X to be a power of 2, &quot;*X&quot; is just shifting, and it&#x27;s</span></span><br><span class="line"><span class="comment">     * been reduced to 3 multiplies on numbers half the size.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* We want to split based on the larger number; fiddle so that b</span></span><br><span class="line"><span class="comment">     * is largest.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (asize &gt; bsize) &#123;</span><br><span class="line">        t1 = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = t1;</span><br><span class="line"></span><br><span class="line">        i = asize;</span><br><span class="line">        asize = bsize;</span><br><span class="line">        bsize = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Use gradeschool math when either number is too small. */</span></span><br><span class="line">    i = a == b ? KARATSUBA_SQUARE_CUTOFF : KARATSUBA_CUTOFF;</span><br><span class="line">    <span class="keyword">if</span> (asize &lt;= i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (asize == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> (PyLongObject *)PyLong_FromLong(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> x_mul(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If a is small compared to b, splitting on b gives a degenerate</span></span><br><span class="line"><span class="comment">     * case with ah==0, and Karatsuba may be (even much) less efficient</span></span><br><span class="line"><span class="comment">     * than &quot;grade school&quot; then.  However, we can still win, by viewing</span></span><br><span class="line"><span class="comment">     * b as a string of &quot;big digits&quot;, each of width a-&gt;ob_size.  That</span></span><br><span class="line"><span class="comment">     * leads to a sequence of balanced calls to k_mul.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span> * asize &lt;= bsize)</span><br><span class="line">        <span class="keyword">return</span> k_lopsided_mul(a, b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Split a &amp; b into hi &amp; lo pieces. */</span></span><br><span class="line">    shift = bsize &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (kmul_split(a, shift, &amp;ah, &amp;al) &lt; <span class="number">0</span>) <span class="keyword">goto</span> fail;</span><br><span class="line">    assert(Py_SIZE(ah) &gt; <span class="number">0</span>);            <span class="comment">/* the split isn&#x27;t degenerate */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">        bh = ah;</span><br><span class="line">        bl = al;</span><br><span class="line">        Py_INCREF(bh);</span><br><span class="line">        Py_INCREF(bl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (kmul_split(b, shift, &amp;bh, &amp;bl) &lt; <span class="number">0</span>) <span class="keyword">goto</span> fail;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* The plan:</span></span><br><span class="line"><span class="comment">     * 1. Allocate result space (asize + bsize digits:  that&#x27;s always</span></span><br><span class="line"><span class="comment">     *    enough).</span></span><br><span class="line"><span class="comment">     * 2. Compute ah*bh, and copy into result at 2*shift.</span></span><br><span class="line"><span class="comment">     * 3. Compute al*bl, and copy into result at 0.  Note that this</span></span><br><span class="line"><span class="comment">     *    can&#x27;t overlap with #2.</span></span><br><span class="line"><span class="comment">     * 4. Subtract al*bl from the result, starting at shift.  This may</span></span><br><span class="line"><span class="comment">     *    underflow (borrow out of the high digit), but we don&#x27;t care:</span></span><br><span class="line"><span class="comment">     *    we&#x27;re effectively doing unsigned arithmetic mod</span></span><br><span class="line"><span class="comment">     *    BASE**(sizea + sizeb), and so long as the *final* result fits,</span></span><br><span class="line"><span class="comment">     *    borrows and carries out of the high digit can be ignored.</span></span><br><span class="line"><span class="comment">     * 5. Subtract ah*bh from the result, starting at shift.</span></span><br><span class="line"><span class="comment">     * 6. Compute (ah+al)*(bh+bl), and add it into the result starting</span></span><br><span class="line"><span class="comment">     *    at shift.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 1. Allocate result space. */</span></span><br><span class="line">    ret = _PyLong_New(asize + bsize);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="literal">NULL</span>) <span class="keyword">goto</span> fail;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> Py_DEBUG</span></span><br><span class="line">    <span class="comment">/* Fill with trash, to catch reference to uninitialized digits. */</span></span><br><span class="line">    <span class="built_in">memset</span>(ret-&gt;ob_digit, <span class="number">0xDF</span>, Py_SIZE(ret) * <span class="keyword">sizeof</span>(digit));</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. t1 &lt;- ah*bh, and copy into high digits of result. */</span></span><br><span class="line">    <span class="keyword">if</span> ((t1 = k_mul(ah, bh)) == <span class="literal">NULL</span>) <span class="keyword">goto</span> fail;</span><br><span class="line">    assert(Py_SIZE(t1) &gt;= <span class="number">0</span>);</span><br><span class="line">    assert(<span class="number">2</span>*shift + Py_SIZE(t1) &lt;= Py_SIZE(ret));</span><br><span class="line">    <span class="built_in">memcpy</span>(ret-&gt;ob_digit + <span class="number">2</span>*shift, t1-&gt;ob_digit,</span><br><span class="line">           Py_SIZE(t1) * <span class="keyword">sizeof</span>(digit));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Zero-out the digits higher than the ah*bh copy. */</span></span><br><span class="line">    i = Py_SIZE(ret) - <span class="number">2</span>*shift - Py_SIZE(t1);</span><br><span class="line">    <span class="keyword">if</span> (i)</span><br><span class="line">        <span class="built_in">memset</span>(ret-&gt;ob_digit + <span class="number">2</span>*shift + Py_SIZE(t1), <span class="number">0</span>,</span><br><span class="line">               i * <span class="keyword">sizeof</span>(digit));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. t2 &lt;- al*bl, and copy into the low digits. */</span></span><br><span class="line">    <span class="keyword">if</span> ((t2 = k_mul(al, bl)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        Py_DECREF(t1);</span><br><span class="line">        <span class="keyword">goto</span> fail;</span><br><span class="line">    &#125;</span><br><span class="line">    assert(Py_SIZE(t2) &gt;= <span class="number">0</span>);</span><br><span class="line">    assert(Py_SIZE(t2) &lt;= <span class="number">2</span>*shift); <span class="comment">/* no overlap with high digits */</span></span><br><span class="line">    <span class="built_in">memcpy</span>(ret-&gt;ob_digit, t2-&gt;ob_digit, Py_SIZE(t2) * <span class="keyword">sizeof</span>(digit));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Zero out remaining digits. */</span></span><br><span class="line">    i = <span class="number">2</span>*shift - Py_SIZE(t2);          <span class="comment">/* number of uninitialized digits */</span></span><br><span class="line">    <span class="keyword">if</span> (i)</span><br><span class="line">        <span class="built_in">memset</span>(ret-&gt;ob_digit + Py_SIZE(t2), <span class="number">0</span>, i * <span class="keyword">sizeof</span>(digit));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4 &amp; 5. Subtract ah*bh (t1) and al*bl (t2).  We do al*bl first</span></span><br><span class="line"><span class="comment">     * because it&#x27;s fresher in cache.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    i = Py_SIZE(ret) - shift;  <span class="comment">/* # digits after shift */</span></span><br><span class="line">    (<span class="type">void</span>)v_isub(ret-&gt;ob_digit + shift, i, t2-&gt;ob_digit, Py_SIZE(t2));</span><br><span class="line">    Py_DECREF(t2);</span><br><span class="line"></span><br><span class="line">    (<span class="type">void</span>)v_isub(ret-&gt;ob_digit + shift, i, t1-&gt;ob_digit, Py_SIZE(t1));</span><br><span class="line">    Py_DECREF(t1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 6. t3 &lt;- (ah+al)(bh+bl), and add into result. */</span></span><br><span class="line">    <span class="keyword">if</span> ((t1 = x_add(ah, al)) == <span class="literal">NULL</span>) <span class="keyword">goto</span> fail;</span><br><span class="line">    Py_DECREF(ah);</span><br><span class="line">    Py_DECREF(al);</span><br><span class="line">    ah = al = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">        t2 = t1;</span><br><span class="line">        Py_INCREF(t2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((t2 = x_add(bh, bl)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        Py_DECREF(t1);</span><br><span class="line">        <span class="keyword">goto</span> fail;</span><br><span class="line">    &#125;</span><br><span class="line">    Py_DECREF(bh);</span><br><span class="line">    Py_DECREF(bl);</span><br><span class="line">    bh = bl = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    t3 = k_mul(t1, t2);</span><br><span class="line">    Py_DECREF(t1);</span><br><span class="line">    Py_DECREF(t2);</span><br><span class="line">    <span class="keyword">if</span> (t3 == <span class="literal">NULL</span>) <span class="keyword">goto</span> fail;</span><br><span class="line">    assert(Py_SIZE(t3) &gt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Add t3.  It&#x27;s not obvious why we can&#x27;t run out of room here.</span></span><br><span class="line"><span class="comment">     * See the (*) comment after this function.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    (<span class="type">void</span>)v_iadd(ret-&gt;ob_digit + shift, i, t3-&gt;ob_digit, Py_SIZE(t3));</span><br><span class="line">    Py_DECREF(t3);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> long_normalize(ret);</span><br><span class="line"></span><br><span class="line">  fail:</span><br><span class="line">    Py_XDECREF(ret);</span><br><span class="line">    Py_XDECREF(ah);</span><br><span class="line">    Py_XDECREF(al);</span><br><span class="line">    Py_XDECREF(bh);</span><br><span class="line">    Py_XDECREF(bl);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里不对 <strong>Karatsuba 算法</strong><a href="#refer-anchor-1"><sup>1</sup></a> 的实现做单独解释，有兴趣的朋友可以参考文末的 reference 去了解具体的详情。</p><p>在普通情况下，普通乘法的时间复杂度位 n^2 (n 为位数），而 K 算法的时间复杂度为 3n^(log3) ≈ 3n^1.585 ，看起来 K 算法的性能要优于普通乘法，那么为什么 Python 不全部使用 K 算法呢？</p><p>很简单，K 算法的优势实际上要在当 n 足够大的时候，才会对普通乘法形成优势。同时考虑到内存访问等因素，当 n 不够大时，实际上采用 K 算法的性能将差于直接进行乘法。</p><p>所以我们来看看 Python 中乘法的实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> PyObject *</span><br><span class="line"><span class="title function_">long_mul</span><span class="params">(PyLongObject *a, PyLongObject *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    PyLongObject *z;</span><br><span class="line"></span><br><span class="line">    CHECK_BINOP(a, b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* fast path for single-digit multiplication */</span></span><br><span class="line">    <span class="keyword">if</span> (Py_ABS(Py_SIZE(a)) &lt;= <span class="number">1</span> &amp;&amp; Py_ABS(Py_SIZE(b)) &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        stwodigits v = (stwodigits)(MEDIUM_VALUE(a)) * MEDIUM_VALUE(b);</span><br><span class="line">        <span class="keyword">return</span> PyLong_FromLongLong((<span class="type">long</span> <span class="type">long</span>)v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    z = k_mul(a, b);</span><br><span class="line">    <span class="comment">/* Negate if exactly one of the inputs is negative. */</span></span><br><span class="line">    <span class="keyword">if</span> (((Py_SIZE(a) ^ Py_SIZE(b)) &lt; <span class="number">0</span>) &amp;&amp; z) &#123;</span><br><span class="line">        _PyLong_Negate(&amp;z);</span><br><span class="line">        <span class="keyword">if</span> (z == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (PyObject *)z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我们看到，当两个数皆小于 2^30-1 时，Python 将直接使用普通乘法并返回，否则将使用 K 算法进行计算</p><p>这个时候，我们来看一下位运算的实现，以右移为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">static PyObject *</span><br><span class="line">long_rshift(PyObject *a, PyObject *b)</span><br><span class="line">&#123;</span><br><span class="line">    Py_ssize_t wordshift;</span><br><span class="line">    digit remshift;</span><br><span class="line"></span><br><span class="line">    CHECK_BINOP(a, b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Py_SIZE(b) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        PyErr_SetString(PyExc_ValueError, <span class="string">&quot;negative shift count&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Py_SIZE(a) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> PyLong_FromLong(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (divmod_shift(b, &amp;wordshift, &amp;remshift) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> NULL;</span><br><span class="line">    <span class="keyword">return</span> long_rshift1((PyLongObject *)a, wordshift, remshift);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static PyObject *</span><br><span class="line">long_rshift1(PyLongObject *a, Py_ssize_t wordshift, digit remshift)</span><br><span class="line">&#123;</span><br><span class="line">    PyLongObject *z = NULL;</span><br><span class="line">    Py_ssize_t newsize, hishift, i, j;</span><br><span class="line">    digit lomask, himask;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Py_SIZE(a) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        /* Right shifting negative numbers <span class="keyword">is</span> harder */</span><br><span class="line">        PyLongObject *a1, *a2;</span><br><span class="line">        a1 = (PyLongObject *) long_invert(a);</span><br><span class="line">        <span class="keyword">if</span> (a1 == NULL)</span><br><span class="line">            <span class="keyword">return</span> NULL;</span><br><span class="line">        a2 = (PyLongObject *) long_rshift1(a1, wordshift, remshift);</span><br><span class="line">        Py_DECREF(a1);</span><br><span class="line">        <span class="keyword">if</span> (a2 == NULL)</span><br><span class="line">            <span class="keyword">return</span> NULL;</span><br><span class="line">        z = (PyLongObject *) long_invert(a2);</span><br><span class="line">        Py_DECREF(a2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        newsize = Py_SIZE(a) - wordshift;</span><br><span class="line">        <span class="keyword">if</span> (newsize &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> PyLong_FromLong(<span class="number">0</span>);</span><br><span class="line">        hishift = PyLong_SHIFT - remshift;</span><br><span class="line">        lomask = ((digit)<span class="number">1</span> &lt;&lt; hishift) - <span class="number">1</span>;</span><br><span class="line">        himask = PyLong_MASK ^ lomask;</span><br><span class="line">        z = _PyLong_New(newsize);</span><br><span class="line">        <span class="keyword">if</span> (z == NULL)</span><br><span class="line">            <span class="keyword">return</span> NULL;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>, j = wordshift; i &lt; newsize; i++, j++) &#123;</span><br><span class="line">            z-&gt;ob_digit[i] = (a-&gt;ob_digit[j] &gt;&gt; remshift) &amp; lomask;</span><br><span class="line">            <span class="keyword">if</span> (i+<span class="number">1</span> &lt; newsize)</span><br><span class="line">                z-&gt;ob_digit[i] |= (a-&gt;ob_digit[j+<span class="number">1</span>] &lt;&lt; hishift) &amp; himask;</span><br><span class="line">        &#125;</span><br><span class="line">        z = maybe_small_long(long_normalize(z));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (PyObject *)z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我们能看到，在两侧都是小数的情况下，位移动算法将比普通乘法，存在更多的内存分配等操作。这样也会回答了我们文初所提到的一个问题，“为什么一些时候乘法比位运算更快”。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文差不多就到这里了，实际上通过这次分析我们能得到一些很有趣但是也很冷门的知识。实际上我们目前看到这样一个结果，是 Python 对于我们常见且高频的操作所做的一个特定的设计。而这也提醒我们，Python 实际上对于很多操作都存在自己内建的设计哲学，在日常使用的时候，其余语言的经验，可能无法复用</p><p>差不多就这样吧，只能勉强写水文苟活了（逃</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><div id="refer-anchor-1"></div><ul><li>[1]. <a href="https://zh.wikipedia.org/wiki/Karatsuba%E7%AE%97%E6%B3%95">Karatsuba 算法</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;我本来以为我不再会写水文了，但是突然发现自己现在也只能勉强写写水文才能维持生活这样子。那就继续写水文吧&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Python" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/Python/"/>
    
    
    <category term="Python" scheme="https://manjusaka.blog/tags/Python/"/>
    
    <category term="编程" scheme="https://manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="随笔" scheme="https://manjusaka.blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>简单聊聊进程中的信号处理</title>
    <link href="https://manjusaka.blog/posts/2020/10/24/a-simple-introduction-about-signal-process-in-linux/"/>
    <id>https://manjusaka.blog/posts/2020/10/24/a-simple-introduction-about-signal-process-in-linux/</id>
    <published>2020-10-24T13:09:00.000Z</published>
    <updated>2022-11-20T15:39:13.817Z</updated>
    
    <content type="html"><![CDATA[<p>最近在某个技术群里帮人分析了 Linux 编程下信号处理的一段代码。我自己觉得这段代码是挺不错的一个例子，所以写个简单的水文，用这段代码聊聊 Linux 中的信号处理</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>我们首先来看一看这一段代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">deletejob</span><span class="params">(<span class="type">pid_t</span> pid)</span> &#123; <span class="built_in">printf</span>(<span class="string">&quot;delete task %d\n&quot;</span>, pid); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">addjob</span><span class="params">(<span class="type">pid_t</span> pid)</span> &#123; <span class="built_in">printf</span>(<span class="string">&quot;add task %d\n&quot;</span>, pid); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">  <span class="type">int</span> olderrno = errno;</span><br><span class="line">  <span class="type">sigset_t</span> mask_all, prev_all;</span><br><span class="line">  <span class="type">pid_t</span> pid;</span><br><span class="line">  sigfillset(&amp;mask_all);</span><br><span class="line">  <span class="keyword">while</span> ((pid = waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev_all);</span><br><span class="line">    deletejob(pid);</span><br><span class="line">    sigprocmask(SIG_SETMASK, &amp;prev_all, <span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (errno != ECHILD) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;waitpid error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  errno = olderrno;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">  <span class="type">int</span> pid;</span><br><span class="line">  <span class="type">sigset_t</span> mask_all, prev_all;</span><br><span class="line">  sigfillset(&amp;mask_all);</span><br><span class="line">  signal(SIGCHLD, handler);</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((pid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">      execve(<span class="string">&quot;/bin/date&quot;</span>, argv, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev_all);</span><br><span class="line">    addjob(pid);</span><br><span class="line">    sigprocmask(SIG_SETMASK, &amp;prev_all, <span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上这段代码是比较典型的信号处理的代码，为了引出后续的内容，我们先来复习一下，这段代码中几个关键的 <code>syscall</code> </p><ol><li><strong>signal</strong><a href="#refer-anchor-1"><sup>1</sup></a>: 信号处理函数，使用者可以通过这个函数为当前进程指定具体信号的 Handler。当信号触发时，系统会调用具体的 Handler 进行对应的逻辑处理。</li><li><strong>sigfillset</strong><a href="#refer-anchor-2"><sup>2</sup></a>: 用于操作 <strong>signal sets</strong>（信号集）的函数之一，这里的含义是将系统所有支持的信号量添加进一个信号集中</li><li><strong>fork</strong><a href="#refer-anchor-3"><sup>3</sup></a>: 大家比较熟悉的一个 API 了，创建一个新的进程，并返回 <strong>pid</strong> 。如果是在父进程中，返回的 <strong>pid</strong> 是对应子进程的 <strong>pid</strong>。如果子进程中，<strong>pid</strong> 为0</li><li><strong>execve</strong><a href="#refer-anchor-4"><sup>4</sup></a>: 执行一个特定的可执行文件</li><li><strong>sigprocmask</strong><a href="#refer-anchor-5"><sup>5</sup></a>：设置进程的信号屏蔽集。当传入第一个参数为 <strong>SIG_BLOCK</strong> 时，函数会将当前进程的信号屏蔽集保存在第三个参数传入的信号集变量中，并将当前进程的信号屏蔽集设置为第二个参数传入的信号屏蔽集。当第一个参数为 <strong>SIG_SETMASK</strong> 时，函数会将当前进程的信号屏蔽集设置为第二个参数设置的值。</li><li><strong>wait_pid</strong><a href="#refer-anchor-6"><sup>6</sup></a>: 做一个不精确的概括，回收并释放已终止的子进程的资源。</li></ol><p>OK 了解完这样一些关键的 <strong>syscall</strong> 后，这段代码那么基本上不难理解了。但是要吃透这段代码，我们还需要去复习一下一些 Linux 或者说 POSIX 中的机制：</p><ol><li>由 <code>fork</code> 创建出来的子进程，会继承父进程中的很多东西。就本文中聊的信号一部分来说，子进程会继承父进程的信号屏蔽集和信号处理函数的相关设置</li><li><code>execve</code> 执行后，会重设当前进程的程序段与堆栈。所以在上面的代码中我们执行 <code>/bin/date</code> 后，子进程会被重设。信号处理函数等设置也会被重设</li><li>每个进程都有信号屏蔽集，在信号屏蔽集中的信号被触发时，会进入一个队列，暂时不会触发进程的信号处理，此时信号处于 <strong>pending</strong> 状态。在取消对应信号的屏蔽与阻塞后，再次触发进程的信号处理机制。如果进程显式声明忽略信号，那么不会触发信号的处理。（Tips：关于信号队列这一点，这是一个 POSIX 1. 的约定。在 POSIX 中将这种机制称为<strong>可靠信号</strong>，当阻塞期间，有多个信号发生时，会进入一个可靠队列确保信号能被妥投。 Linux 支持可靠信号，其余 Unix/类 Unix 不一定支持）</li><li>子进程退出后，会给所属的父进程传递一个 <strong>SIGCHLD</strong><a href="#refer-anchor-1"><sup>1</sup></a> 信号，父进程在接受到这种信号后，需要调用 <strong>wait_pid</strong><a href="#refer-anchor-6"><sup>6</sup></a> 函数对子进程进行处理。否则未被回收的子进程，会成为一个僵尸进程，也就是通常说的 Z 进程</li></ol><p>OK，到现在，大家在掌握这些东西后，对于上面的代码应该能完整明白了。不过可能大家还有一个疑惑，为什么在这段代码中需要调用 <strong>sigprocmask</strong><a href="#refer-anchor-5"><sup>5</sup></a> 设置进程的信号屏蔽集来阻塞信号呢？这涉及到另一个问题。</p><p>如前面所说，信号在触发时，进程会”跳转“对应的信号处理函数进行处理。但是信号处理函数处理完后的行为会怎么样呢？依照 Linux 中的设计，可能会出现两种情况</p><ol><li>对于可重入函数而言，信号处理函数返回后会继续处理</li><li>对于不可重入函数而言，会返回 <strong>EINTR</strong><a href="#refer-anchor-1"><sup>1</sup></a></li></ol><p>OK 大家这里应该对我们为什么会在这里使用 <strong>sigprocmask</strong><a href="#refer-anchor-5"><sup>5</sup></a> 有具体的了解了，实际上是为了保证我们的一些函数能够正常的执行完，不会被信号处理所打断。当然这里也有其余的问题，如果信号触发特别密集的情况下，这里的处理会带来额外的 cost。所以还是需要根据不同的场景做 trade-off 了。</p><p>好了。差不多就这样吧，福报久了真没力气写文章，💊。下一篇文章应该就是我最近做内核协议栈监控的一些吃屎记录了（flag++（逃。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><div id="refer-anchor-1"></div><ul><li>[1]. <a href="https://man7.org/linux/man-pages/man7/signal.7.html">Linux man page: signal</a></li></ul><div id="refer-anchor-2"></div><ul><li>[2]. <a href="https://linux.die.net/man/3/sigfillset">Linux man page: sigfillset</a></li></ul><div id="refer-anchor-3"></div><ul><li>[3]. <a href="https://man7.org/linux/man-pages/man2/fork.2.html">Linux man page: fork</a></li></ul><div id="refer-anchor-4"></div><ul><li>[4]. <a href="https://man7.org/linux/man-pages/man2/execve.2.html">Linux man page: execve</a></li></ul><div id="refer-anchor-5"></div><ul><li>[5]. <a href="https://man7.org/linux/man-pages/man2/sigprocmask.2.html">Linux man page: sigprocmask</a></li></ul><div id="refer-anchor-6"></div><ul><li>[6]. <a href="https://linux.die.net/man/2/waitpid">Linux man page: waitpid</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在某个技术群里帮人分析了 Linux 编程下信号处理的一段代码。我自己觉得这段代码是挺不错的一个例子，所以写个简单的水文，用这段代码聊聊 Linux 中的信号处理&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/Linux/"/>
    
    
    <category term="编程" scheme="https://manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://manjusaka.blog/tags/Linux/"/>
    
    <category term="笔记" scheme="https://manjusaka.blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="水文" scheme="https://manjusaka.blog/tags/%E6%B0%B4%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>关于 Kubernetes 和容器化的一些随想</title>
    <link href="https://manjusaka.blog/posts/2020/06/29/some-tips-about-kubernetes-and-container/"/>
    <id>https://manjusaka.blog/posts/2020/06/29/some-tips-about-kubernetes-and-container/</id>
    <published>2020-06-29T10:09:00.000Z</published>
    <updated>2022-11-20T15:39:13.821Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间在不少群里争论过关于 Kubernetes 和容器化的一些事，干脆总结下一些碎碎念作为一个概括吧。本文仅代表个人立场，不代表商业观点</p><span id="more"></span><h2 id="容器化"><a href="#容器化" class="headerlink" title="容器化"></a>容器化</h2><p>目前很主流的一个观点，是能上容器尽可能上容器，说实话这个想法实际上是有一定的合理性的，去 review 这个想法，我们需要去看一下容器这个东西，给我们带来了什么样的改变</p><p>容器首先毫无疑问，会给我们带来非常多的好处：</p><ol><li>真正意义上让开发与生产环境保持一致是一种非常方便的事，换句话说，开发说的“这个服务在我本地没啥问题”是一句有用的话了</li><li>让部署一些服务变的更为方便，无论是分发，还是部署，</li><li>能做到一定程度上的资源隔离与分配</li></ol><p>那么，看起来我们是不是可以无脑用容器？不，不是，我们需要再来 Review 一下，容器化后我们所要面临的一些弊端：</p><ol><li>容器安全性问题，目前最主流的容器实现（此处点名 Docker）本质上而言还是基于 CGroups + NS 来进行资源与进程隔离。那么其安全性将会是一个非常值得考量的问题。毕竟 Docker 越权与逃逸漏洞年年有，年年新。那么这意味着我们是需要去有一个系统的机制去规范我们容器的使用，来保证相关的越权点能被把控在一个可控的范围内。而另一个方向是镜像安全问题，大家都是面向百度/CSDN/Google/Stackoverflow 编(fu)程(zhi)选手，那么势必会出现一个情况，当我们遇到一个问题，搜索一番，直接复制点 Dockerfile 下来，这个时候，将会存在很大的风险点，毕竟谁也不知道 base image 里加了啥料不是？</li><li>容器的网络问题。当我们启动若干个镜像后，那么容器之间的网络互通怎么处理？而大家生产环境，肯定不止一个机器那么少，那么跨主机的情况下，怎么样去进行容器间的通信，同时保证网络的稳定性？</li><li>容器的调度与运维的问题，当我一个机器高负载的时候，怎么样去将该机器上的一些容器调度到其余的机器上？而怎么样去探知一个容器是否存活？如果一个容器 crash 了，怎么样重新拉起？</li><li>容器具体的细节问题，比如镜像怎么样构建与打包？怎么样上传？乃至说怎么样去排查一些 corner case 的问题？</li></ol><p>我们做一个业务决策的时候，我们肯定不会是因为某个技术够先进，够舒服，而是需要去衡量这个业务决策的 ROI，同时在利弊之间做一个 Trade-Off，用容器化这件事来说吧，我们来思考下我们可能迁移容器常见的几个误区：</p><ol><li>我们想对利用容器做资源隔离！那么问题来了，用 systemd + cgroup 这样简便的方法做和容器之间有什么区别？是容器的成本更低？</li><li>我们想践行 Devops 所以想上容器化！实际上 Devops 和容器化关联并不算大，它更多的是一种方法论，一个团队之间内部协作的一套方法论。不精确的来讲，是通过自动化，流程改进，SOP 引入等手段，将一套服务的分发与运维更为简便化。换句话说，在我们去践行 Devops 这一套方法论的时候，实际上不是一个技术问题，而是一个制度问题（讲个笑话，Devops 的开发不需要写脚本）。在其中，无论是我们传统的 Ansible 等运维手段，还是一些自动化测试的方法与框架，都可以成为 Devops 的一部分。那么这里还是一个问题，我们为什么要用容器？是因为传统的工具践行 Devops 的 cost 远高于用容器化的？</li></ol><p>从这两个例子大家能看出来，当我们去做容器化这件事的时候，一定要思考的问题是，容器化是真正解决了我们什么痛点，还是只是因为它看起来够先进，够屌，能为我简历背书？</p><h2 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h2><p>前面聊到容器化的几个问题，促成了以 Kubernetes 为代表的容器编排体系的诞生。大家在想，哇，既然解决了这个问题，那么我们再来聊聊这个问题</p><p>首先我已经忽略掉自建 Kubernetes 集群的场景了，因为那不是一般人能 Hold 住的。那么我们来看一下，依托公有云使用的情况吧，以阿里云为例，点开页面，然后我们见到这样张图</p><p><img src="https://manjusakablog.blob.core.windows.net/blog-resource/images/2020-06-29-01.png" alt="images"></p><p><img src="https://manjusakablog.blob.core.windows.net/blog-resource/images/2020-06-29-02.png" alt="images"></p><p>好了，提问：</p><ol><li>VPC 是什么？</li><li>Kubernetes 1.16.9 和 1.14.8 有什么区别</li><li>Docker 19.03.5 和阿里云安全沙箱 1.1.0 是什么，有什么区别</li><li>专有网络是什么？</li><li>虚拟交换机是什么？</li><li>网络插件是什么？Flannel 和 Terway 又是什么？有什么区别？当你翻了翻文档，然后文档告诉你，Terway 是阿里云基于 Calico 魔改的 CNI 插件。那么 CNI 插件是什么？Calico 是什么？</li><li>Pod CIDR 是什么怎么设？</li><li>Service CIDR 是什么怎么设？</li><li>SNAT 是什么怎么设？</li><li>安全组怎么配置？</li><li>Kube-Proxy 是什么？iptables 和 IPVS 有什么区别？怎么选？</li></ol><p>是不是和你想象的一键点点点有很大区别？你可能说，我们小公司不管这些，暴力出奇迹，一键全默认。。。。emmmm，那上什么 Kubernetes 啊。。好了，假设你上了后，来，我们继续算账</p><ol><li>你得有个镜像仓库吧，不贵，中国区基础版780一个月</li><li>你集群内的服务需要暴露出去用吧？行叭，买个最低规格的 SLB，简约型，每个月200</li><li>好了，你每个月日志得花钱吧？假设你每个月20G日志，不多吧？行，39.1</li><li>你集群监控要不要？好，买，每天50w条日志上报吧？行，不贵，975 一个月</li></ol><p>算一下，一个集群吧，(780+200+39.1+975)*12=23292.2 不算集群基础的 ENI，ECS 等费用，美滋滋</p><p>而且会衍生很多其余的问题，具体的话，大家可以去 Kubernetes 的 Issue 区看一下盛况</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写这个文章，并不为吐槽或者喷人，只是想表明一个观点，借用我比较喜欢的一篇文章<a href="https://mp.weixin.qq.com/s/9j3BnR3UqA-lnJDoM5Hrvg">中台，我信了你的邪 | 深氪</a> 中的一句话</p><blockquote><p>到了去年底，阿里巴巴董事长兼CEO张勇在湖畔大学分享时也说：如果一个企业奔着中台做中台，就是死。</p></blockquote><p>逍遥子是不是说过这句话待考，但我很赞同，同时我认为<strong>一个企业奔着技术先进性去搞技术，就是死</strong> ，毕竟技术是需要为业务服务的，而技术的进步很大程度上依赖业务的沉淀与需求</p><p>好了，这应该是我写过最水的文章了，先这样吧。继续搬砖了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这段时间在不少群里争论过关于 Kubernetes 和容器化的一些事，干脆总结下一些碎碎念作为一个概括吧。本文仅代表个人立场，不代表商业观点&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="水文" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/%E6%B0%B4%E6%96%87/"/>
    
    
    <category term="编程" scheme="https://manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="水文" scheme="https://manjusaka.blog/tags/%E6%B0%B4%E6%96%87/"/>
    
    <category term="杂记" scheme="https://manjusaka.blog/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>简单聊聊 Maglev ，来自 Google 的软负载均衡实践</title>
    <link href="https://manjusaka.blog/posts/2020/05/22/a-simple-introduction-about-maglev/"/>
    <id>https://manjusaka.blog/posts/2020/05/22/a-simple-introduction-about-maglev/</id>
    <published>2020-05-22T19:09:00.000Z</published>
    <updated>2022-11-20T15:39:13.817Z</updated>
    
    <content type="html"><![CDATA[<p>好久没博客了，来写个简单的读论文笔记吧，这篇文章是来自 Google 2016 年发表的一篇论文 <a href="https://research.google/pubs/pub44824/">Maglev: A Fast and Reliable Software Network Load Balancer</a> 分享了他们内部从08年开始大规模使用的软负载均衡系统的实现。里面很多很有趣的细节，我看我能写多少，算多少吧</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>负载均衡的概念大家肯定都比较熟悉了，再次不再赘述。现在我们需要考虑 Google 的场景。设计之初，Google 需要一种高性能的 LB 来承担 Google 一些重头服务的流量，比如 Google 搜索，Gmail 等等。由于流量非常庞大，那么 LB 需要非常强大的性能来处理大量的流量。</p><p>在这里，传统的想法可能说，我直接上专业的硬件负载均衡，能用钱解决的问题，都不算事（笑。但是这样的方案有着不小的问题</p><p><img src="https://user-images.githubusercontent.com/7054676/82123782-c9537080-97cd-11ea-9030-4af01358be9d.png" alt="image"></p><ol><li>硬件负载均衡单点的性能决定了整个网络能承担的请求</li><li>在 HA 上存在缺陷。为了保证单点失效的时候，整个网络集群不陷入瘫痪。那么我们通常需要 1:1 的做冗余</li><li>灵活性和编程性欠缺，想做骚操作的时候没有切入点</li><li>太贵了。贵到 Google 都承受不了（逃</li></ol><p>在这样一种情况下，Google 开始考虑自行构建一种 SLB (Software Load Balance) 系统。去构建这样一种系统。好处也很明显。比如方便的 Scale ，为了保证 HA 所需的冗余从之前的 1:1 可以降至 N+1 ，方便的定制性等。架构就演变成下图了</p><p><img src="https://user-images.githubusercontent.com/7054676/82126035-7c2acb00-97dc-11ea-9f65-8aa4f29b34ea.png" alt="image"></p><p>但是挑战也很明显。首先需要有足够的性能，这样保证集群有足够的吞吐。同时需要做 connection tracking ，这样保证同一个连接的数据包能妥投到同一个机器上。也许要保证能有透明的 failover 的能力。</p><p>这样一些要件结合起来，这也就是我们今天要聊的 Maglev。Google 从 08 年开始大规模的应用的 LB 系统</p><h2 id="Maglev-初窥"><a href="#Maglev-初窥" class="headerlink" title="Maglev 初窥"></a>Maglev 初窥</h2><h3 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h3><p>在继续聊 Maglev 之前，我们需要去了解 Google 现在怎么样去去使用 Maglev 的，下面是一个简化后的示意图</p><p><img src="https://user-images.githubusercontent.com/7054676/82126042-8c42aa80-97dc-11ea-8647-767d5e63dda8.png" alt="image"></p><p>同时这里我们需要介绍一个很重要的概念叫做 VIP(Virtual IP Address) 。 用过 Kubernetes 的同学肯定对这个概念并不陌生。VIP 并不是一个实际与网卡绑定的物理 IP。近似来讲它可以作为后端一组 Endpoint 的抽象，当你访问这个 VIP 的时候，实际上是在访问后端的 Endpoint 。这里举个更方便理解的例子，以 Kubernetes 为例，我们在创建完一组 Pod 后，为了暴露 Pod 中提供的服务，我们通常会创建一个 Service 来关联对应的 Pod。Service 通常会有一个 IP，那么这个 IP 就是一个 VIP 。当我们访问 Service 的 IP 的时候，通常会随机从后面的 Pod 中选择一个承接请求。</p><p>好了，回到 Maglev ，我们现在来看下整个的一个流程。Maglev 会和 VIP 关联，然后将 VIP 透传给一组 Router。 当用户在浏览器中输入 <a href="https://www.google.com/">https://www.google.com</a> 并按下回车的时候，浏览器会进行 DNS 解析。而 DNS 解析将由 Google 的 DNS 服务器进行处理。DNS 服务器会根据用户的区域选择一个最近集群的 VIP 返回给用户，然后浏览器会根据获取到的 VIP 建立连接。</p><p>当 Router 收到对应包时，会将包转发给 VIP 所属的 Maglev 集群中的任意节点。集群中的每个节点权重都是平衡。Maglev 节点在接受到包的时候，会利用 GRE(Generic Routing Encapsulation) 进行封包。然后传输给对应的后端端点。</p><p>当后端端点接收到数据包的时候，会进行接包并处理请求。当响应数据准备就绪的时候，会进行封包操作，会将 VIP 的作为源地址，用户的 IP 作为目标地址，然后响应数据作为数据包操作。这个时候，后端端点会利用 DSR(Direct Server Return) 将数据包绕过 Maglev 直接返回。这样避免响应过大的时候对 Maglev 造成额外的负担。实际上 DSR 在 L4 的 LB 实现，如 HAProxy，Envoy 等都得到了比较多的应用。改天有时间写篇博客来聊聊。</p><h3 id="Maglev-配置"><a href="#Maglev-配置" class="headerlink" title="Maglev 配置"></a>Maglev 配置</h3><p>如前面所说， Maglev 接收来自 Router 的 VIP 请求，然后将对应流量转发到对应的后端端点上。每个 Maglev 将由 Controller 和 Forwarder 组成，其架构如下所示</p><p><img src="https://user-images.githubusercontent.com/7054676/82127700-3d9b0d80-97e8-11ea-8cc3-8a6f5b1ccd3e.png" alt="image"></p><p>而 Controller 和 Forwarder 都利用 Configuration Object 管理相关 VIP。Configuration Object 这一套实际上又是另外一套系统（可以近似的认为是注册中心），彼此之间通过 RPC 来通信。</p><p>在 Maglev 机器上，Controller 会定期对 Forwarder 进行检查。根据检查结果来确定是否通过 BGP 提交/撤回所有 VIP 的注册（要么全部成功，要么全部失败，其实还是为了保障系统的一致性）。这样确保从 Router 过来的流量都能扔到健康的机器上</p><p>而从 Router 过来的 VIP 流量将会由 Forwarder 进行处理。在 Forwarder 中，每个 VIP 都会和一个或多个 backend pool 关联。除非特殊处理，Maglev 中的 backend 都是服务端点。一个 backend pool 可以包含一组服务端点的的物理 IP ，也可以是其余的 backend pool。每个 backend pool 都会根据其特定需求，设计若干个监控检查器，数据包只会转发给健康的服务。如之前所说，同一个服务可能会被包含在多个 backend pool 中，因此 Forwarder 将会根据具体的地址进行去重，避免额外的开销。</p><p>Forwarder 的 Config Manager 将负责从 Configuration Object 中拉取，解析并验证相关的配置。所有配置的提交都是具备原子性（要么全部成功，要么全部失败）。在推送和解析到生效的过程中，存在一个非常短暂的 gap，在此期间，一个 Maglev 集群之间的配置可能存在不同步的情况。不过因为一致性 Hash 的存在，在这个非常短的 Gap 内，大部分请求还是能成功妥投。</p><h2 id="Maglev-实现"><a href="#Maglev-实现" class="headerlink" title="Maglev 实现"></a>Maglev 实现</h2><p>好了，扯了这么多，来看一下 Maglev 整个系统的一些实践细节</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>总所周知（如前面所说），Maglev 由 Forwarder 来实际承担流量相关的转发工作，我们用一张图来说明一下它的结构</p><p><img src="https://user-images.githubusercontent.com/7054676/82140858-7082e700-9864-11ea-9653-a5e8ba9b5d97.png" alt="image"></p><p>Forwarder 将直接从 NIC(Network Interface Card) 拿到数据包，然后直接扔入 NIC 转发到后端。期间所有操作都不会过内核（实际上过内核会有额外的 cost）</p><p>从 NIC 中捞出的包，会先由 <code>Steering Module</code> 进行处理，在处理过程中，<code>Steering Module</code> 将会根据五元组（协议，目标地址，目标端口，源地址，源端口）进行 hash 计算。然后将其转入对应的 <code>Receiving Queue</code> 中。每个 <code>Receiving Queue</code> 都会对应一个处理线程。处理线程将过滤掉目标 VIP 和本机注册 VIP 不匹配的包。然后会重新计算五元组 hash，然后从 <code>Connection Tracking Table</code> 中查找对应的值。</p><p>在 <code>Connection Tracking Table</code> 中存放之前五元组 Hash 所对应的 Backend，然后如果查找命中，那么直接复用，如果未命中，则为这个包选择一个新的 Backend, 然后将键值对加入 <code>Connection Tracking Table</code>。如果此时没有 Backend 可用，那么这个包会被丢弃。当这个包完成查找操作后，如前面所说，会改写这个包，然后将其放入 <code>transmission queue</code> 中去。最后将 <code>muxing module</code> 会将 <code>transmission queue</code> 的包直接通过 NIC 发送出去。</p><p>这里有个问题，在 <code>Steering Module</code> 中为啥不考虑根据 <code>round-robin</code> 这种常见的策略来做？大家都知道每个线程的处理速度是不一致的，如果直接裸 <code>round-robin</code> ，那么面对这种情况，可能会导致数据包重排的情况发生，如果是引入权重的概念来改良，又会引入新的复杂度，毕竟线程的处理速度是动态变化的。另外一种是 <code>connnection tracking</code> 的情况，假设我们有个需要持久化的连接，我们需要保证每个包都能扔到同样的机器上，这个时候用 <code>round-robin</code> 就会引入额外的复杂性。不过对于一些特殊情况，比如 <code>receive queue</code> 满了，一致性 Hash 处理不过来的时候，我们会利用 <code>round-robin</code> 作为 backup 的手段来替代一致性 Hash，这种情况对于同时存在同样5元组包的时候比较好用。</p><h3 id="高效处理数据包"><a href="#高效处理数据包" class="headerlink" title="高效处理数据包"></a>高效处理数据包</h3><p>前面已经花了很多时间讲述了，Maglev 是直接对 TCP 的数据包进行操作，同时因为 Google 的流量极为庞大，那么这个时候实际上是需要 Maglev 有着良好的转发性能。不然在大规模场景下，其吞吐能力会无法满足需求。Google 怎么做的？答：直接对网卡操作。。</p><p>我们都知道在 Linux 中进行网络编程的时候，将数据包从内核态拷贝到用户态实际上是一件开销非常大的事，所以对于一些极端需求性能的场景，如 L4 的负载均衡等，大家可能更倾向于将东西做到内核里，避免跨态拷贝。这也是 LVS 等工具的思路。但是实际上对于更大规模的流量，来讲，从网卡到内核，经过内核中的一堆 filter 处理也是一件开销非常大的事，而如同前面所说，Maglev 只依赖数据包中的五元组，对于包序列号，包 payload ，都不需要关心。于是 Google：我有一个大胆的想法！好了，来看张图</p><p><img src="https://user-images.githubusercontent.com/7054676/82677245-4bceab00-9c7a-11ea-9d30-68f948b32f9a.png" alt="image"></p><p>Google 选择直接在 NIC (即网卡) 上进行编程。让 <code>Forwarder</code> 和 NIC 共享一片内存。内存中维护的是一个环状的数据包池子。然后 <code>Forwarder</code> 中的 <code>steering module</code> 和 <code>muxing module</code> 各自维护三个指针来处理这些数据包，下面详细描述一下</p><p>首先而言 <code>steering module</code> 维护了三个指针</p><ol><li><code>received</code> ，管理接收数据包</li><li><code>reserved</code>, 管理已接收未处理的数据包</li><li><code>processed</code>, 管理处理完成的数据包</li></ol><p>那么流程是这样的，当 NIC 接受到新的数据包后，那么 <code>received</code> 指针指向的内存会被修改。然后当一个数据包被分发给线程完成相关操作后，那么 <code>processed</code> 指针指向的内存地址会被修改。因为是个环状结构嘛， <code>received</code> 和 <code>processed</code> 中间存在的数据包就是已接收但未完成处理的包，由 <code>reserved</code> 指针进行管理。</p><p>于此对应的，<code>muxing module</code> 也维护了三个指针</p><ol><li><code>sent</code>，管理已发送完毕的数据包</li><li><code>ready</code>，管理已经就绪等待发送的数据包</li><li><code>recycled</code>, 管理已回收的数据包</li></ol><p>那么对应的流程是这样的，当 <code>steering module</code> 完成相关包的处理的时候，<code>ready</code> 指针指向的内存会被修改，然后等待发送。当一个数据包发送后，<code>sent</code> 指向的内存地址被修改。在 <code>ready</code> 和 <code>sent</code> 之外有另一个状态 <code>recycled</code> 管理已经回收的数据包。</p><p>我们可以看到在这个过程中，没有发生数据拷贝的操作，实际上这减小了一部分复制数据带来的时延。不过这种方法存在的问题就是，当指针越界后，会带来很大的额外开销。所以 Google 采用的做法是批处理，比如接收 3000 个小包集中处理一次，这样的骚操作</p><p>另外需要做一些额外的优化，比如包处理线程之间不共享数据以避免竞态。比如需要将线程与具体 CPU Core 绑定来保证性能等等</p><p>目前来看，Google 这一套的做法效率非常的出色，平均每个包的处理只需要 300 ns($10^{-9}$s)。如同前面所说，Google 采用批处理的方式来处理包，这样的问题是每当一些例如硬件中断的情况发生的时候，可能到达处理阈值的时间会比大部分情况长很多，所以 Google 设计了一个 50μs($10^{-6}$s) 的 Timer 来处理这种情况。换句话说，当因为硬件或者其余问题时，整体的包处理时长可能会增加 50μs 的时间（其实这里感觉 Google 怎么是在得瑟，你看我们性能超棒的噢，只有硬件是我们的瓶颈喔（逃</p><h3 id="后端选择"><a href="#后端选择" class="headerlink" title="后端选择"></a>后端选择</h3><p>如同前面所说的一样，<code>Forwarder</code> 会为数据包选择一个后端。对于 TCP 这种常见来说，将相同五元组的数据包转发到同一个后端节点上非常重要。Google 采取在 Maglev 中维护一个 <code>connction tracking table</code> 来解决这个问题。当一个包抵达的时候，Maglev 会计算其五元组 Hash ，然后确定在 table 中是否存在，如果不存在，则选择一个节点作为后端，然后将记录值添加到 table 中。如果存在则直接复用</p><p>这样看起来没有问题了对吧？Google：不，不是，还有问题！</p><p>我们首先考虑这样一种场景：如前面所说，Maglev 前面挂了一个/组 Router，而 Router 是不提供连接亲和的，即不保证把同一个连接的包发送到同一个机器上。所以可能存在的情况是同一个连接的不同数据包会被仍在不同的机器上。再比如，我们假设 Router 是具有连接亲和的，但是也会存在如果机器发生重启后，<code>connection tracking table</code> 被清空的情况。</p><p>再来一个例子，我们都知道 <code>connection tracking table</code> 它所能使用的内存，必定是有一个阈值的。这样在面对一些流量非常大，或者 <code>SYN Flood</code> 这种非正常情景的时候。当 <code>connection tracking table</code> 的容量到达阈值的时候，我们势必会清理一些数据。那么在这个时候，一个连接的 tracking 信息就很有可能被清理。那么在这种情况下，我们怎么样去做 <code>connection tracking</code> ？</p><p>Google 选择的做法是引入一致性 Hash</p><h3 id="一致性-Hash：Maglev-Hash"><a href="#一致性-Hash：Maglev-Hash" class="headerlink" title="一致性 Hash：Maglev Hash"></a>一致性 Hash：Maglev Hash</h3><p>整体算法其实有很多细节，这里只说明大概，具体细节大家可以去阅读原文查找</p><p>首先，我们要确定经过预处理后的产物 <code>lookup table</code> 的长度 M。所有 Key 都会被 hash 到这个 <code>lookup table</code> 中去，而 <code>lookup table</code> 中的每个元素都会被映射到一个 Node 上</p><p>而计算 <code>lookup table</code> 的计算分为两步</p><ol><li>计算每一个 node 对于每一个 lookup table 项的一个取值（也就是原文中提到的 permutation）；</li><li>根据这个值，去计算每一个 lookup table 项所映射到的 node（放在 entry 中，此处 entry 用原文的话来讲就是叫做 <code>the final lookup table</code>）。</li></ol><p>permutation 是一个 M×N 的矩阵，列对应 lookup table，行对应 node。 为了计算 permutation，需要挑选两个 hash 算法，分别计算两个值 offset 与 skip 。最后根据 offset 和 skip 的值来填充 permutation，计算方式描述如下：</p><ol><li>offset ← h 1 (name[i]) mod M</li><li>skip ← h 2 (name[i]) mod (M − 1)+ 1</li><li>permutation[i][j] ← (offset+ j × skip) mod M</li></ol><p>其中 i 是 Node Table 中 Node 的下标，j 是 lookup table 下标</p><p>在计算完 permutation 后，我们就可以计算最后的 lookup table 了，这个 table 用一维的数组表示</p><p><img src="https://user-images.githubusercontent.com/7054676/82696622-f73b2800-9c99-11ea-8d14-08f67487f3b9.png" alt="image"></p><p>这里贴一张图，大家可以配合下面的代码一起看一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据已经计算好的 permutation 来计算 lookup_table</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_lookup_table</span>(<span class="params">n: <span class="built_in">int</span>, m: <span class="built_in">int</span>, permutation: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="comment"># result 是最终记录分布的 Hash 表</span></span><br><span class="line">    result: <span class="type">List</span>[<span class="built_in">int</span>] = [-<span class="number">1</span>] * m</span><br><span class="line">    <span class="comment"># next 是用来解决冲突的，在遍历过程中突然想要填入的 entry 表已经被占用，</span></span><br><span class="line">    <span class="comment"># 则通过 next 找到下一行。一直进行该过程直到找到一个空位。</span></span><br><span class="line">    <span class="comment"># 因为每一列都包含有 0~M-1 的每一个值，所以最终肯定能遍历完每一行。</span></span><br><span class="line">    <span class="comment"># 计算复杂度为 O(M logM) ~ O(M^2)</span></span><br><span class="line">    <span class="built_in">next</span>: <span class="type">List</span>[<span class="built_in">int</span>] = [<span class="number">0</span>] * n</span><br><span class="line">    flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            x = permutation[i][<span class="built_in">next</span>[i]]</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="comment"># 找到空位，退出查找</span></span><br><span class="line">                <span class="keyword">if</span> result[x] == -<span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="built_in">next</span>[i] += <span class="number">1</span></span><br><span class="line">                x = permutation[i][<span class="built_in">next</span>[i]]</span><br><span class="line">            result[x] = i</span><br><span class="line">            <span class="built_in">next</span>[i] += <span class="number">1</span></span><br><span class="line">            flag += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 表已经填满，退出计算</span></span><br><span class="line">            <span class="keyword">if</span> flag == m:</span><br><span class="line">                <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>在这里我们能看到，这段循环代码必然结束，而最坏情况下，复杂度会非常高，最坏的情况可能会到 O(M^2)。原文中建议找一个远大于 N 的 M （To avoid this happening we always choose M such that M ≫ N.）可以使平均复杂度维持在 O(MlogM)</p><p>而 Maglev 中 Google 自研的一致性算法性能怎么样呢？论文中也做了测试</p><p><img src="https://user-images.githubusercontent.com/7054676/82696955-abd54980-9c9a-11ea-8aa4-480ae328d387.png" alt="image"></p><p>可以看到，对于不同大小的 lookup table，Maglev 表现出了更好的均衡性</p><p>说实话，Maglev 在我看来本质上是一个带虚节点的 Hash，说实话，我没想到为什么 Google 不用 Dynamo 等已经比较成熟的 Hash ？难道是因为政策原因？（毕竟 Dynamo 是 AWS 家的嘛（逃。BTW Enovy 也实现了 Maglev 。参见 <a href="https://github.com/envoyproxy/envoy/issues/2267">Evaluate other consistent hash LB algorithms</a> ，而且引入了权重，实现的挺不错，有兴趣的同学可以去看看（逃</p><p>说实话，Maglev Hash 还有很多细节没有讲，不过实在懒得写了，，等后面出一个一致性 Hash 的分析博客吧，Flag++</p><h2 id="Maglev-优化"><a href="#Maglev-优化" class="headerlink" title="Maglev 优化"></a>Maglev 优化</h2><p>前面我们已经把 Maglev 这一套的基本原理讲的差不多了。但是如果作为一个生产上大规模使用的 LB ，那么势必还需要针对细节做很多优化，由于这里涉及到很多方面，我这里只简单介绍一下，剩下的还是建议大家直接去读原文</p><h3 id="分段数据包的处理"><a href="#分段数据包的处理" class="headerlink" title="分段数据包的处理"></a>分段数据包的处理</h3><p>熟悉网络的同学都知道，在基于 IP 协议传输报文的时候，受限于 MTU 的大小，在传输的时候，可能会存在数据分片传输的情况，而这些分片后的数据不一定会带有完整的五元组信息。比如一个数据被切分为两段，那么第一段将带有 L3 和 L4 的头部信息，而第二段只带有 L3 的信息。而在传输过程中，因为网络关系，Maglev 无法完全保证对接收到的数据作出正确的处理</p><p>这样问题就大了，因为数据分段的情况实际上是非常场景的。那么对于这样的场景，Maglev 应该怎么样去处理？首先我们需要确定怎么样才能保证所有数据都能妥投</p><ol><li>保证一个数据报文的不同数据段都需要由同一个 Maglev 实例处理</li><li>对于同一个数据报文的不同数据段需要能保证后端选择结果是一致的</li></ol><p>OK，那么我们来看看 Google 是怎么解决这个问题的。</p><p>首先，每个 Maglev 实例中都会有一个特殊的 <code>backend pool</code> ，池子中是该 Maglev 集群中所有的实例。当接收到数据后，Maglev 会先根据三元组（源地址，目标地址，协议簇）计算 hash ，然后选择一个 Maglev 实例进行转发，这样就能保证同一数据报文的不同分段能传输到同一个 Maglev 实例上。当然这里需要利用 GRE 的递归控制来避免无限循环。</p><p>好了我们来看看条件2怎么满足。在每个 Maglev 实例上会维护一个特殊的表，记录数据分片后第一个数据端的转发结果。以前面的例子为例，当一个报文的第二个分段抵达的时候，Maglev 会查询表中是否存在第一个数据段的转发结果。如果存在则直接转发，如果不存在，则将这个数据段缓存，直到第一个数据段抵达，或者到达超时阈值</p><h3 id="监控与调试"><a href="#监控与调试" class="headerlink" title="监控与调试"></a>监控与调试</h3><p>真正的用时都是不需要调试（划掉）（笑，Google 为了这一套系统设计了辅助的监控与调试手段来帮助日常的开发迭代。</p><p>在监控这边，分为黑盒和白盒两种监控手段。比如遍布全球的特定监控节点，以确认 VIP 的健康状态。当然与之配套的还有一整套白盒监控。Google 会监控具体的服务器指标，同时会监控 Maglev 本身的指标</p><p>当然与之配套的还有一些调试工具。比如 Google 开发了一套类似 X-Trace 的 packettracer。可以通过 packettracer 来发送一些带有特定标头和 payload 的信息。当 Maglev 接到这样一些特殊的数据包后，除了照常转发数据包以外，也会讲一些关键信息上报到指定位置</p><p>这其实也体现了软负载均衡相较于硬件负载均衡的一个好处，无论可调试性还是可迭代性都是硬件负载均衡无法媲美的</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章其实我读了挺久，里面很多细节挺值得慢慢深究的，所以再次建议大家一定要去找原文读一下，非常不错。另外顺便推荐一篇文章，是美团技术团队的作品，他们也参考了 Maglev 来实现自己的高性能 L4 负载均衡，参见<a href="https://tech.meituan.com/2017/01/05/mgw.html">MGW——美团点评高性能四层负载均衡</a></p><p>好了，这篇文章，就先到这里吧，这篇文章应该是我写的最耗时的一篇文章了。。不过想想后面还有几篇文章要写，头就很大</p><p>溜了溜了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;好久没博客了，来写个简单的读论文笔记吧，这篇文章是来自 Google 2016 年发表的一篇论文 &lt;a href=&quot;https://research.google/pubs/pub44824/&quot;&gt;Maglev: A Fast and Reliable Software Network Load Balancer&lt;/a&gt; 分享了他们内部从08年开始大规模使用的软负载均衡系统的实现。里面很多很有趣的细节，我看我能写多少，算多少吧&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="水文" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/%E6%B0%B4%E6%96%87/"/>
    
    <category term="论文" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/%E6%B0%B4%E6%96%87/%E8%AE%BA%E6%96%87/"/>
    
    
    <category term="编程" scheme="https://manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="笔记" scheme="https://manjusaka.blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="水文" scheme="https://manjusaka.blog/tags/%E6%B0%B4%E6%96%87/"/>
    
    <category term="分布式" scheme="https://manjusaka.blog/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    <category term="论文" scheme="https://manjusaka.blog/tags/%E8%AE%BA%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>为什么 Python 的 Type Hint 没有流行起来</title>
    <link href="https://manjusaka.blog/posts/2020/03/20/a-simple-history-about-type-hint-in-python/"/>
    <id>https://manjusaka.blog/posts/2020/03/20/a-simple-history-about-type-hint-in-python/</id>
    <published>2020-03-20T08:00:00.000Z</published>
    <updated>2022-11-20T15:39:13.817Z</updated>
    
    <content type="html"><![CDATA[<p>在知乎上看到一个很有意思的问题，<a href="https://www.zhihu.com/question/370231112/answer/1091038983">为什么TypeScript如此流行，却少见有人写带类型标注的Python？</a></p><p>虽然我没忍住在知乎上输出了答案，但是为了以防万一，我在博客上扩展，与更新一下</p><p>BTW 最近上线真的心力憔悴，写个文章放松下</p><span id="more"></span><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>其实这个答案很简单，历史包袱与 ROI，在了解为什么有这样的现象之前，首先我们要去了解 Type Hint 能给我们带来什么，然后我们需要去了解 Type Hint 的前世今生</p><p>在现在这个时间点（2020.03）来看，Type Hint 能给我们带来肉眼可见的收益是</p><ol><li>通过 annotation ，配合 IDE 的支持，能让我们在代码编辑的时候的体验更好</li><li>通过 mypy/pytype 等工具的支持，我们能在 CI/CD 流程中去集成静态类型检查</li><li>通过 pydantic 以及很多新式框架的支持，我们能够减少很多重复的工作</li></ol><p>可能大家以为从 Python 3.5 引入 <a href="https://www.python.org/dev/peps/pep-0484/">PEP 484</a> 开始，Python Type Hint 便已经成熟。但是实际上，这个时间比大家想象的短的多</p><p>好了，我们现在要去回顾一下整个 Type Hint 发展史上的关键节点</p><ol><li>PEP 3107 Function Annotations</li><li>PEP 484 Type Hints</li><li>PEP 526 Syntax for Variable Annotations</li><li>PEP 563 Postponed Evaluation of Annotations</li></ol><h3 id="PEP-3107"><a href="#PEP-3107" class="headerlink" title="PEP 3107"></a>PEP 3107</h3><p>如同前面所说，大家最开始认识 Type Hint 的时间应该是14 年 9 月提出，15 年 5 月通过的 <a href="https://www.python.org/dev/peps/pep-0484/">PEP 484</a> 。但是实际上雏形早的多，PEP 484 的语法实际上来自于 06 年提出，3.0 引入的 PEP 3107 所设计的语法，参见 <a href="https://www.python.org/dev/peps/pep-3107/">PEP 3107 – Function Annotations</a></p><p>在 PEP 3107 中，对于这个提案的目标，有这样一段描述</p><blockquote><p>Because Python’s 2.x series lacks a standard way of annotating a function’s parameters and return values, a variety of tools and libraries have appeared to fill this gap. Some utilise the decorators introduced in “PEP 318”, while others parse a function’s docstring, looking for annotations there.<br>This PEP aims to provide a single, standard way of specifying this information, reducing the confusion caused by the wide variation in mechanism and syntax that has existed until this point.</p></blockquote><p>说人话就是，为了能够给函数的参数或者返回值添加额外的元信息，大家五花八门各显神通，有用 <a href="https://www.python.org/dev/peps/pep-0318/">PEP 318</a> 装饰器的，有用 docstring 来做的。社区为了缓解这个现象，决定推出新的语法糖，来让用户能够方便的为参数签名和返回值添加额外的信息</p><p>最后形成的语法如下 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">a: <span class="string">&#x27;x&#x27;</span>, b: <span class="number">5</span> + <span class="number">6</span>, c: <span class="built_in">list</span></span>) -&gt; <span class="built_in">max</span>(<span class="number">2</span>, <span class="number">9</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>是不是很眼熟？ 没错，3107 实际上奠定了后续 Type Hint 的基调</p><ol><li>可标注</li><li>作为 function/method 信息的一部分，可 inspect</li><li>runtime</li></ol><p>但是新的疑惑就来了，为什么这个提案经常被人忽略？还是，我们需要放在具体的时间点来看</p><p>这个提案提出时间最早可以追溯至06年，在 <a href="https://www.python.org/dev/peps/pep-3000/">PEP3000</a> 这个可能是 Python 历史上最著名的提案（即宣告 Python 3 的诞生）中确定在 Python 3 中引入，08年正式发布</p><p>在这个时间点下，3107 面临着两个问题：</p><ol><li>在06-08这个时间点上，社区最主要的精力都在友(ji)好(lie)的讨(si)论(bi)，我们为什么要 Python 3？以及为什么我们要迁到 Python 3</li><li>3107 实际上只是告诉大家，你可以标注，你可以方便的获取标注信息，但是怎么样去抽象一个类型的表示，如一个 int 类型的 list ，这种事，还是依靠社区自行发展，换句话说，叫做放养</li></ol><p>问题1，无解，只能依靠时间去慢慢推动。问题2，促成了 PEP 484 的诞生</p><h3 id="PEP-484"><a href="#PEP-484" class="headerlink" title="PEP 484"></a>PEP 484</h3><p><a href="https://www.python.org/dev/peps/pep-0484/">PEP 484</a> 这个提案大家应该都有一定程度上的了解了，在此不再描述提案的具体内容</p><p>PEP 484 最大的意义在于， 在继承了 PEP 3107 奠定的语法和基调之上，将 Python 的类型系统进行了合理的抽象，这也是重要的产物 <code>typing</code>，直到这时，Python 中的 type hint 才有了基本的官方规范，同时达到了基本的可用性，这个时间点是 15 年 9 月（9月13，Python 3.5.0 正式 Release）</p><p>但是实际上 PEP 484 在这个时间点也只能说基本满足使用，我来举几个被诟病的例子</p><p>首先看一段代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    left: <span class="type">Optional</span>[Node]</span><br><span class="line">    right: <span class="type">Optional</span>[Node]</span><br></pre></td></tr></table></figure><p>这段代码实际上很简单对吧，一个标准的二叉树节点的描述，但是放在 PEP 484 中，这段代码暴露出两个问题</p><ol><li>无法对变量进行标注。如同我前面所说的一样，PEP 484 本质上是 PEP 3107 的一个扩展，这个时候 hint 的范围仅限于 function/method ，而在上面的代码中，在 3.5 时期，我是无法对我的 left 和 right 的变量进行标注的，一个编程语言的基本要素之一的变量，无法被 Type Hint ，那么一定程度上我们可以说这样一个 type hint 的功能没有闭环</li><li>循环引用，字面意义，在社区/StackOverflow 上如何解决 Type Hint 中的循环引用这个问题，一度让人十分头大。社区：What the fuck?</li></ol><p>所幸，Python 社区意识到了这个问题，推出了两个提案来解决这样的问题</p><h3 id="PEP-526"><a href="#PEP-526" class="headerlink" title="PEP 526"></a>PEP 526</h3><p>问题1 促成了 <a href="https://www.python.org/dev/peps/pep-0526/">PEP 526 – Syntax for Variable Annotations</a> 的诞生，16 年 8 月提出，16 年 9 月被接受。16 年 9 月在 <a href="https://bugs.python.org/issue27985">BPO-27985</a> 实现。在我印象里，这应该是 Python 社区中数的出来的争议小，接收快，实现快的 PEP 了</p><p>在 526 中，Python 正式允许大家对变量进行标注，无论是 <code>class attribute</code> 还是普通的 <code>variable</code> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    left: <span class="built_in">str</span></span><br></pre></td></tr></table></figure><p>这样是可以的，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">abc</span>():</span><br><span class="line">    a:<span class="built_in">int</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这样也是可以的</p><p>在这个提案的基础上，Python 官方也推动了 <a href="https://www.python.org/dev/peps/pep-0557/">PEP 557 – Data Classes</a> 的落地，当然这是后话</p><p>话说回来，526 只解决了上面的问题1，没有解决问题2，这个事情，将会由 PEP 563 来解决</p><h3 id="PEP-563"><a href="#PEP-563" class="headerlink" title="PEP 563"></a>PEP 563</h3><p>为了解决循环引用的问题，Python 引入了 <a href="https://www.python.org/dev/peps/pep-0563/">PEP 563 – Postponed Evaluation of Annotations</a>，17 年 9 月社区提出，17 年 11 月被接受，18 年 1 月在 <a href="https://github.com/python/cpython/pull/4390">GH-4390</a> 中实现。</p><p>在 563 之后，我们上面的代码可以这么写了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    left: <span class="type">Optional</span>[<span class="string">&quot;Node&quot;</span>]</span><br><span class="line">    right: <span class="type">Optional</span>[<span class="string">&quot;Node&quot;</span>]</span><br></pre></td></tr></table></figure><p>嗯，484 中的两个问题，终于被解决了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以 PEP 563 作为重要分割点，Python 最早在 18 年 1 月之后才初步具备完整的生态和生产可用性，如果考虑 release version，那么应该是 18 年 6 月，Python 3.7 正式发布之后的事了。</p><p>在 Python 3.6/7 之后，社区也才开始围绕 Type Hint 去构建一套生态体系，</p><p>比如利用 PEP 526 来高效的验证数据格式，参见 <a href="https://github.com/samuelcolvin/pydantic">pydantic</a> </p><p>顺带一提，这货也是目前很火的一个新型框架（也是我目前最喜欢的一个框架）FastAPI 的根基</p><p>各大公司也开始跟进，例如 Google 的 <a href="https://github.com/google/pytype">pytype</a> ，微软推出了 <a href="https://github.com/microsoft/pyright">pyright</a> 来提供在 VSCode 上的支持</p><p>还有许许多多优秀的如 starlette 这样库</p><p>直到这时，Python + Type Hint 的真正的威力才开始挥发出来。这样才开始能回答大家这样一个问题：“我为什么要切换到 Type Hint”，我猜在 IDE 里写的爽肯定不是一个重要原因</p><p>要知道，我们在做技术决策时候，一定是因为这个决策能给我们带来足够的 benefit，换句话说，有足够的 ROI，而不是单纯的因为，我们喜欢它</p><p>这样看起来，到现在，满打满算一年半不超过两年的时间。对于一个用户习惯养成周期来说，这太短了。更何况还有一大堆的 Python 2 代码在那放着23333</p><p>话说回来，作为对比，TypeScript Release 时间可以上溯至 12 年 10 月，发布 0.8 版本，当时的 TS 应该是具备了相对完整地类型系统。</p><p>TS 用了 8 年，Python 可能也还有很长的路要走</p><p>当然，这个答案也只是从技术和历史的角度聊聊这个问题。至于其余的很多因素，包括社区的博奕与妥协等，暂还不在这个答案的范围内，大家有兴趣的话，可以去 python-idea，python-dev，discuss-python 这几个地方去找一找历史上关于这几个提案的讨论，非常有意思。</p><p>最后，TS 成功还有一个原因，它有个好爸爸&amp;&amp;它爸爸有钱（逃</p><p>嗯，差不多就这样吧，最近干活干的心里憔悴的我，也就只能写点垃圾水文了压压惊，平复心情了。。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在知乎上看到一个很有意思的问题，&lt;a href=&quot;https://www.zhihu.com/question/370231112/answer/1091038983&quot;&gt;为什么TypeScript如此流行，却少见有人写带类型标注的Python？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;虽然我没忍住在知乎上输出了答案，但是为了以防万一，我在博客上扩展，与更新一下&lt;/p&gt;
&lt;p&gt;BTW 最近上线真的心力憔悴，写个文章放松下&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Python" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/Python/"/>
    
    <category term="随笔" scheme="https://manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/Python/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="Python" scheme="https://manjusaka.blog/tags/Python/"/>
    
    <category term="编程" scheme="https://manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="随笔" scheme="https://manjusaka.blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
