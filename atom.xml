<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Manjusaka</title>
  
  <subtitle>写代码的香港记者</subtitle>
  <link href="http://manjusaka.itscoder.com/atom.xml" rel="self"/>
  
  <link href="http://manjusaka.itscoder.com/"/>
  <updated>2020-12-31T13:40:30.529Z</updated>
  <id>http://manjusaka.itscoder.com/</id>
  
  <author>
    <name>Manjusaka</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>云原生时代的几个爆论</title>
    <link href="http://manjusaka.itscoder.com/posts/2020/12/31/fuck-the-cloud-native/"/>
    <id>http://manjusaka.itscoder.com/posts/2020/12/31/fuck-the-cloud-native/</id>
    <published>2020-12-31T12:00:00.000Z</published>
    <updated>2020-12-31T13:40:30.529Z</updated>
    
    <content type="html"><![CDATA[<p>从去年调转到现在，做了一段时间的云原生，我突发奇想，想发表几个爆论来论述下我眼中的云原生来作为今年最后一篇技术博客。本文纯属个人向吐槽，与本人公司立场无关</p><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>云原生大概在 2014-2015 年开始左右，开始正式的提出了这个概念。2015 年 Google 主导成立了云原生计算基金会（Cloud Native Computing Foundation aka CNCF)。在 2018 年，CNCF 在 <strong>CNCF Cloud Native Definition v1.0</strong><a href="#refer-anchor-1"><sup>1</sup></a> 首次对云原生的概念有了一个认定</p><blockquote><p>Cloud native technologies empower organizations to build and run scalable applications in modern, dynamic environments such as public, private, and hybrid clouds. Containers, service meshes, microservices, immutable infrastructure, and declarative APIs exemplify this approach.<br>These techniques enable loosely coupled systems that are resilient, manageable, and observable. Combined with robust automation, they allow engineers to make high-impact changes frequently and predictably with minimal toil.</p></blockquote><p>其中文翻译如下：</p><blockquote><p>云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式API。<br>这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更。</p></blockquote><p>从官方的定义来看，我更愿意将其称为一个愿景(vision/landscape)而不是一个定义(definition)，因为在上述的表达中，并没有清晰明确的表述出<strong>云原生</strong>这一新生概念的具体的范围与边界，也没有阐述清楚 <strong>Cloud Native</strong> 和 <strong>Non-Cloud Native</strong> 之间的差异。</p><p>如果以个人的视角来看，一个云原生应用具备以下特质</p><ol><li>容器化</li><li>服务化</li></ol><p>而一个践行云原生的组织，那么应该具备以下特质</p><ol><li><p>重度 Kubernetes 或其余容器调度平台（如 Shopee 自研的 <strong>eru2</strong><a href="#refer-anchor-2"><sup>2</sup></a></p></li><li><p>具备完整的监控体系</p></li><li><p>具备完整的 CI/CD 体系</p></li></ol><p>在这个基础上，最近看到很多人都在讨论云原生这一新生概念，所以我想在这里聊聊个人向的四个爆论（爆论中的数据是个人主观判断，轻喷）</p><ol><li>百分之95以上的公司，没有完成 CI/CD 体系的建立。也没有完成线上服务进程的收敛</li><li>百分之90以上的公司，没有能微服务化的技术储备</li><li>百分之90以上的公司，没有能撑起容器化的技术储备</li></ol><h2 id="开始爆论"><a href="#开始爆论" class="headerlink" title="开始爆论"></a>开始爆论</h2><h3 id="1-百分之95以上的公司，没有完成-CI-CD-体系的建立。也没有完成线上服务进程的收敛"><a href="#1-百分之95以上的公司，没有完成-CI-CD-体系的建立。也没有完成线上服务进程的收敛" class="headerlink" title="1. 百分之95以上的公司，没有完成 CI/CD 体系的建立。也没有完成线上服务进程的收敛"></a>1. 百分之95以上的公司，没有完成 CI/CD 体系的建立。也没有完成线上服务进程的收敛</h3><p>CI 指持续集成（Continuous Integration aka CI），而 CD 指<strong>持续交付</strong>(Continuous Delivery aka CD)，通常来讲 CI 与 CD 的定义如下（此处引用 Brent Laster 在 <strong>What is CI/CD?</strong><a href="#refer-anchor-3"><sup>3</sup></a> 中给出的定义</p><blockquote><p>Continuous integration (CI) is the process of automatically detecting, pulling, building, and (in most cases) doing unit testing as source code is changed for a product. CI is the activity that starts the pipeline (although certain pre-validations—often called “pre-flight checks”—are sometimes incorporated ahead of CI).<br>The goal of CI is to quickly make sure a new change from a developer is “good” and suitable for further use in the code base.<br>Continuous deployment (CD) refers to the idea of being able to automatically take a release of code that has come out of the CD pipeline and make it available for end users. Depending on the way the code is “installed” by users, that may mean automatically deploying something in a cloud, making an update available (such as for an app on a phone), updating a website, or simply updating the list of available releases.</p></blockquote><p>通常在我们的实践中，CI 和 CD 的边界并不明显。以常见的基于 Jenkins 的实践为例，我们通常的一套路径是</p><ol><li><p>创建一个 Jenkins 的项目，设定一个 Pipeline（其中包含代码拉取，构建，单元测试等 task），设置触发条件</p></li><li><p>当指定代码仓库存在主分支代码合入等操作时，执行 Pipeline ，然后生成产物</p></li></ol><p>在生成产物后的，常见有两种做法</p><ol><li><p>在生成产物的下一个阶段触发自动的 deploy 流程，按照 deploy script 直接将生成的产物/镜像直接部署到目标服务器上</p></li><li><p>将生成的产物上传到中间平台，由人通过部署平台手动触发部署任务</p></li></ol><p>在上面描述的过程中，如果有着完备的流程的公司还会有着其余的辅助流程（如 PR/MR 时的 CI 流程，CR 流程等）</p><p>而在面对目标平台的部署时，我自己的另外一个观点是大部分的公司没有完成线上服务进程的收敛。讲个笑话：</p><blockquote><p>Q: 你们怎么部署线上服务呀？A；nohup，tmux，screen</p></blockquote><p>对于当下而言，一个规范化的 CI/CD 流程，收口的线上的服务进程的管理，至少在当下，有着可以遇见的几个好处</p><ol><li><p>尽可能的降低人为手动变更带来的风险</p></li><li><p>能够较好的完成基础运行依赖配置的收口</p></li><li><p>依托目前主流的开源的 systemd, supervisor, pm2 等进程管理工具，能对进程提供基础的 HA 的保证（包括进程探活，进程重拉等）</p></li><li><p>为后续的服务化，容器化等步骤打下基础</p></li></ol><h3 id="2-百分之90以上的公司，没有能微服务化的技术储备"><a href="#2-百分之90以上的公司，没有能微服务化的技术储备" class="headerlink" title="2. 百分之90以上的公司，没有能微服务化的技术储备"></a>2. 百分之90以上的公司，没有能微服务化的技术储备</h3><p>如果说，对于爆论1 提到的 CI/CD 等手段，我更多的觉得这是一个制度障碍大于技术障碍的现实。那么接下来的几个爆论，我更愿意用<strong>没有技术储备</strong>来形容</p><p>先来说说爆论2: 百分之90以上的公司，没有能微服务化的技术储备</p><p>首先来聊聊微服务的概念吧，微服务实际上在计算机历史上有着不同的论述，在2014年 Martin Fowler 和 James Lewis 正式在 <strong>Microservices a definition of this new architectural term</strong><a href="#refer-anchor-4"><sup>4</sup></a> 一文中正式的提出了微服务（Microservice）这一概念。<br>此处引用维基百科的一段概述</p><blockquote><p>微服务是由以单一应用程序构成的小服务，自己拥有自己的行程与轻量化处理，服务依业务功能设计，以全自动的方式部署，与其他服务使用HTTP API通信。同时服务会使用最小的规模的集中管理 (例如 Docker) 能力，服务可以用不同的编程语言与数据库等组件实现</p></blockquote><p>那么我们来用研发的话来尝试描述下关于微服务和与之对应的传统单体服务（Monolith） 之间显著性的差异</p><ol><li><p>微服务的 scope 更小，其更多的专注在某一个功能，或者某一类的功能上</p></li><li><p>由于其 scope 更小的特性，其变更，crash 所带来的影响相较于传统的单体来说更小</p></li><li><p>对于多语言多技术栈团队来说更为友好</p></li><li><p>”符合“现在互联网所需求的小步快跑，快速迭代的大目标</p></li></ol><p>那么我们这里需要思考一下，微服务这一套体系，如果我们想要去进行落地和实践，那么我们需要怎么样的技术储备？我觉得主要是两个方面，架构和治理</p><p>首先来聊聊架构吧，我觉得对于微服务来说，最麻烦的一个问题在于从传统单体应用上进行拆分（当然要是最开始创始之初就开始搞微服务的当我没说，虽然这样也有其余的问题）</p><p>如前面所说，微服务相较于传统的单体应用来说，，其 scope 更小，更专注在某一个功能或者某一类的功能上。那么这里所引申出来我觉得做微服务最大的一个问题在于合理的划分功能边界并进行拆分</p><p>如果拆分不合理那么将导致服务之间相互耦合，比如我将用户鉴权放置在商城服务中，导致我论坛服务需要依赖其不需要的商城服务。如果拆分的过细，那么将导致出现一个很有趣的现象，一个规模不大的业务拆了100多个服务 repo 出来（我们把这种情况称为： 微服务难民2333）</p><p>我们践行落地微服务这一套理念，是因为我们在业务和团队规模扩大后，面对多样化的需求与团队成员技术栈时，传统单体应用在其持续维护上的成本将会是一个不小的开支。我们希望引入微服务来尽可能减少维护成本，降低风险。但是不合理的拆分，将会重新让我们的维护成本远超继续践行单体化的方案</p><p>而我觉得阻碍微服务继续践行的另外一个问题是治理问题。我们来看一下在微服务化后我们所面临的几个问题</p><ol><li><p>可观测性的问题。如前面所说，微服务化后的单个服务 scope 更小，更多的专注在某一个功能或者某一类功能上。那么这可能导致的问题是，我们在完成一个业务请求所需要经历的请求链路更长。那么按照通用的观点来看，链路更长，其风险更大。那么在在当服务存在异常时（比如业务 RT 的突然增高）我们怎么样去定位具体服务的问题？</p></li><li><p>配置框架的收口。在微服务化的场景中，我们可能会选择将一些基础的功能下沉至具体的内部框架中（如服务注册，发现，路由等），那么意味着我们需要维护自己的框架，同时完成配置的收敛</p></li><li><p>老生常谈的服务治理（注册、发现、熔断）等</p></li><li><p>由于微服务化后，对于一个完备 CI/CD 机制的需求将变得更为迫切。那么如果存在爆论1的情况，将会成为践行微服务这一理念的障碍</p></li></ol><p>诚然，目前无论开源社区（如 Spring Cloud，Go—Micro 等）还是四大云厂商（AWS，Azure，阿里云，GCP）都在尝试提供一种开箱即用的微服务方案，但是除了没法很好的解决如上面所说的诸如架构这样的问题外，其也存在自己的问题</p><ol><li><p>无论是依赖开源社区的方案，还是云厂商的方案，都需要使用者具备一定的技术素养，来定位特定情况下框架中的问题</p></li><li><p>Vendor Lock-in，目前开箱即用的微服务方案并没有一个通用的开源事实标准。那么依赖某一个开源社区或者云厂商的方案将存在 vendor lock-in 的问题</p></li><li><p>无论是开源社区的方案还是云厂商的方案，都存在多语言不友好的问题（大家貌似现在都喜欢 Java 一点（Python 没人权.jpg</p></li></ol><p>所以爆论2想表明的一个最核心的观点就是：微服务化并不是一个无代价的行为，与之相反的是一个需要不低技术储备与人力投入的的行为。所以请不要认为微服务是万能良药。请按需使用</p><h3 id="3-百分之90以上的公司，没有能撑起容器化的技术储备"><a href="#3-百分之90以上的公司，没有能撑起容器化的技术储备" class="headerlink" title="3. 百分之90以上的公司，没有能撑起容器化的技术储备"></a>3. 百分之90以上的公司，没有能撑起容器化的技术储备</h3><p>目前很主流的一个观点，是能上容器尽可能上容器，说实话这个想法实际上是有一定的合理性的，去 review 这个想法，我们需要去看一下容器这个东西，给我们带来了什么样的改变</p><p>容器首先毫无疑问，会给我们带来非常多的好处：</p><ol><li>真正意义上让开发与生产环境保持一致是一种非常方便的事，换句话说，开发说的“这个服务在我本地没啥问题”是一句有用的话了</li><li>让部署一些服务变的更为方便，无论是分发，还是部署，</li><li>能做到一定程度上的资源隔离与分配</li></ol><p>那么，看起来我们是不是可以无脑用容器？不，不是，我们需要再来 Review 一下，容器化后我们可能所要面临的一些弊端：</p><ol><li>容器安全性问题，目前最主流的容器实现（此处点名 Docker）本质上而言还是基于 CGroups + NS 来进行资源与进程隔离。那么其安全性将会是一个非常值得考量的问题。毕竟 Docker 越权与逃逸漏洞年年有，年年新。那么这意味着我们是需要去有一个系统的机制去规范我们容器的使用，来保证相关的越权点能被把控在一个可控的范围内。而另一个方向是镜像安全问题，大家都是面向百度/CSDN/Google/Stackoverflow 编(fu)程(zhi)选手，那么势必会出现一个情况，当我们遇到一个问题，搜索一番，直接复制点 Dockerfile 下来，这个时候，将会存在很大的风险点，毕竟谁也不知道 base image 里加了啥料不是？</li><li>容器的网络问题。当我们启动若干个镜像后，那么容器之间的网络互通怎么处理？而大家生产环境，肯定不止一个机器那么少，那么跨主机的情况下，怎么样去进行容器间的通信，同时保证网络的稳定性？</li><li>容器的调度与运维的问题，当我一个机器高负载的时候，怎么样去将该机器上的一些容器调度到其余的机器上？而怎么样去探知一个容器是否存活？如果一个容器 crash 了，怎么样重新拉起？</li><li>容器具体的细节问题，比如镜像怎么样构建与打包？怎么样上传？（又回到了爆论1）乃至说怎么样去排查一些 corner case 的问题？</li><li>对于一些特定的 large size 的镜像（如机器学习同学常用的 CUDA 官方镜像，打包了字典模型等大量数据的镜像等）怎么样去快速下载，快速发布？</li></ol><p>可能这里又会有一种观点，没事，我们上 Kubernetes 就好啦，上面这些很多问题就能解决啦！好吧，我们再来聊聊这个问题</p><p>首先我已经忽略掉自建 Kubernetes 集群的场景了，因为那不是一般人能 Hold 住的。那么我们来看一下，依托公有云使用的情况吧，以阿里云为例，点开页面，然后我们见到这样张图</p><p><img src="https://manjusakablog.blob.core.windows.net/blog-resource/images/2020-06-29-01.png" alt="1"></p><p><img src="https://manjusakablog.blob.core.windows.net/blog-resource/images/2020-06-29-02.png" alt="2"></p><p>好了，提问：</p><ol><li>VPC 是什么？</li><li>Kubernetes 1.16.9 和 1.14.8 有什么区别</li><li>Docker 19.03.5 和阿里云安全沙箱 1.1.0 是什么，有什么区别</li><li>专有网络是什么？</li><li>虚拟交换机是什么？</li><li>网络插件是什么？Flannel 和 Terway 又是什么？有什么区别？当你翻了翻文档，然后文档告诉你，Terway 是阿里云基于 Calico 魔改的 CNI 插件。那么 CNI 插件是什么？Calico 是什么？</li><li>Pod CIDR 是什么怎么设？</li><li>Service CIDR 是什么怎么设？</li><li>SNAT 是什么怎么设？</li><li>安全组怎么配置？</li><li>Kube-Proxy 是什么？iptables 和 IPVS 有什么区别？怎么选？</li></ol><p>大家能看到上面的问题涵盖了这样几方面</p><ol><li><p>Kubernetes 本身的深入了解（CNI，runtime，kube-proxy 等）</p></li><li><p>一个合理网络规划</p></li><li><p>对于云厂商特定功能的熟悉</p></li></ol><p>在我看来，这三方面任何一方面对于一个技术团队的技术储备以及对于业务的理解（广义的技术储备）都需要有一个不浅的需求。</p><p>当然这里在碎碎念一下，实际上搞 Kubernetes 这一套开销实际上很大的（有点偏题，但是还是继续说吧）</p><ol><li>你得有个镜像仓库吧，不贵，中国区基础版780一个月</li><li>你集群内的服务需要暴露出去用吧？行叭，买个最低规格的 SLB，简约型，每个月200</li><li>好了，你每个月日志得花钱吧？假设你每个月20G日志，不多吧？行，39.1</li><li>你集群监控要不要？好，买，每天50w条日志上报吧？行，不贵，975 一个月</li></ol><p>算一下，一个集群吧，(780+200+39.1+975)*12=23292.2一年，不算集群基础的 ENI，ECS 等费用，美滋滋</p><p>而且 Kubernetes 会有很多的玄学的问题，也需要技术团队有足够的技术储备来进行排查（我想想啊，我遇到过 CNI 一号进程 crash 了没重拉，特定版本上的内核 cgroup 泄漏，ingress OOM 等问题），大家可以去 Kubernetes 的 Issue 区看一下盛况（说多了都是泪）</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我知道这篇文章写出来会存在很多的争议。但是我始终想表述的一个观点是对于云原生时代这一套东西（实际上也更多是之前传统技术的延伸），他们的引入并不是无代价，并不是无成本的。对于有着足够规模与痛点的公司来说，这样的成本对于他们的业务增长来说是一个正向的促进，而对于更多中小企业来说，可能这一套对于业务的提升将会是非常小乃至说是负作用。</p><p>我希望我们技术人员在做技术决策的时候，一定是在评估自己的团队的技术储备乃至对于业务的收益后再引入某一种技术与理念，而不是引入一个技术只是因为它看起来够先进，够屌，能够为我的简历背书</p><p>最后用之前我分享过的一句话来作为本文的结尾吧</p><blockquote><p>一个企业奔着技术先进性去搞技术，就是死</p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><div id="refer-anchor-1"></div><ul><li><ol><li><a href="https://github.com/cncf/toc/blob/master/DEFINITION.md">CNCF Cloud Native Definition v1.0</a></li></ol></li></ul><div id="refer-anchor-2"></div><ul><li><ol start="2"><li><a href="https://github.com/projecteru2/core">projecteru2</a></li></ol></li></ul><div id="refer-anchor-3"></div><ul><li><ol start="3"><li><a href="https://opensource.com/article/18/8/what-cicd">What is CI/CD?</a></li></ol></li></ul><div id="refer-anchor-4"></div><ul><li><ol start="4"><li><a href="https://martinfowler.com/articles/microservices.html">Microservices a definition of this new architectural term</a></li></ol></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;从去年调转到现在，做了一段时间的云原生，我突发奇想，想发表几个爆论来论述下我眼中的云原生来作为今年最后一篇技术博客。本文纯属个人向吐槽，与本人公司立场无关&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="随想" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/%E9%9A%8F%E6%83%B3/"/>
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="随想" scheme="http://manjusaka.itscoder.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
    <category term="云原生" scheme="http://manjusaka.itscoder.com/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>简单聊聊进程中的信号处理 V2</title>
    <link href="http://manjusaka.itscoder.com/posts/2020/11/07/a-simple-introduction-about-signal-process-in-linux-v2/"/>
    <id>http://manjusaka.itscoder.com/posts/2020/11/07/a-simple-introduction-about-signal-process-in-linux-v2/</id>
    <published>2020-11-07T21:09:00.000Z</published>
    <updated>2020-12-31T13:40:30.529Z</updated>
    
    <content type="html"><![CDATA[<p>上次写了一个水文<a href="https://manjusaka.itscoder.com/posts/2020/10/24/a-simple-introduction-about-signal-process-in-linux/">简单聊聊进程中的信号处理</a> ，师父看了后把我怒斥了一顿，表示上篇水文中的例子太 old style, too simple ,too naive。如果未来出了偏差，我也要负泽任的。吓得我连和妹子周年庆的文章都没写，先赶紧来重新水一篇文章，聊聊更优秀，更方便的信号处理方式</p><a id="more"></a><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>首先来看看，之前那篇文章中的例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deletejob</span><span class="params">(<span class="keyword">pid_t</span> pid)</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;delete task %d\n&quot;</span>, pid); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addjob</span><span class="params">(<span class="keyword">pid_t</span> pid)</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;add task %d\n&quot;</span>, pid); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handler</span><span class="params">(<span class="keyword">int</span> sig)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> olderrno = errno;</span><br><span class="line">  <span class="keyword">sigset_t</span> mask_all, prev_all;</span><br><span class="line">  <span class="keyword">pid_t</span> pid;</span><br><span class="line">  sigfillset(&amp;mask_all);</span><br><span class="line">  <span class="keyword">while</span> ((pid = waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev_all);</span><br><span class="line">    deletejob(pid);</span><br><span class="line">    sigprocmask(SIG_SETMASK, &amp;prev_all, <span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (errno != ECHILD) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;waitpid error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  errno = olderrno;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> pid;</span><br><span class="line">  <span class="keyword">sigset_t</span> mask_all, prev_all;</span><br><span class="line">  sigfillset(&amp;mask_all);</span><br><span class="line">  signal(SIGCHLD, handler);</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((pid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">      execve(<span class="string">&quot;/bin/date&quot;</span>, argv, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev_all);</span><br><span class="line">    addjob(pid);</span><br><span class="line">    sigprocmask(SIG_SETMASK, &amp;prev_all, <span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来复习下几个关键的 <code>syscall</code></p><ol><li><strong>signal</strong><a href="#refer-anchor-1"><sup>1</sup></a>: 信号处理函数，使用者可以通过这个函数为当前进程指定具体信号的 Handler。当信号触发时，系统会调用具体的 Handler 进行对应的逻辑处理。</li><li><strong>sigfillset</strong><a href="#refer-anchor-2"><sup>2</sup></a>: 用于操作 <strong>signal sets</strong>（信号集）的函数之一，这里的含义是将系统所有支持的信号量添加进一个信号集中</li><li><strong>fork</strong><a href="#refer-anchor-3"><sup>3</sup></a>: 大家比较熟悉的一个 API 了，创建一个新的进程，并返回 <strong>pid</strong> 。如果是在父进程中，返回的 <strong>pid</strong> 是对应子进程的 <strong>pid</strong>。如果子进程中，<strong>pid</strong> 为0</li><li><strong>execve</strong><a href="#refer-anchor-4"><sup>4</sup></a>: 执行一个特定的可执行文件</li><li><strong>sigprocmask</strong><a href="#refer-anchor-5"><sup>5</sup></a>：设置进程的信号屏蔽集。当传入第一个参数为 <strong>SIG_BLOCK</strong> 时，函数会将当前进程的信号屏蔽集保存在第三个参数传入的信号集变量中，并将当前进程的信号屏蔽集设置为第二个参数传入的信号屏蔽集。当第一个参数为 <strong>SIG_SETMASK</strong> 时，函数会将当前进程的信号屏蔽集设置为第二个参数设置的值。</li><li><strong>wait_pid</strong><a href="#refer-anchor-6"><sup>6</sup></a>: 做一个不精确的概括，回收并释放已终止的子进程的资源。</li></ol><p>好了，复习完关键点之后，开始进入本文的关键部分。</p><h2 id="更优雅的信号处理手段"><a href="#更优雅的信号处理手段" class="headerlink" title="更优雅的信号处理手段"></a>更优雅的信号处理手段</h2><h3 id="更优雅的-handler"><a href="#更优雅的-handler" class="headerlink" title="更优雅的 handler"></a>更优雅的 handler</h3><p>首先再来看看上面信号处理部分的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handler</span><span class="params">(<span class="keyword">int</span> sig)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> olderrno = errno;</span><br><span class="line">  <span class="keyword">sigset_t</span> mask_all, prev_all;</span><br><span class="line">  <span class="keyword">pid_t</span> pid;</span><br><span class="line">  sigfillset(&amp;mask_all);</span><br><span class="line">  <span class="keyword">while</span> ((pid = waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev_all);</span><br><span class="line">    deletejob(pid);</span><br><span class="line">    sigprocmask(SIG_SETMASK, &amp;prev_all, <span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (errno != ECHILD) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;waitpid error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  errno = olderrno;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们为了保证 <code>handler</code> 不被其余的信号打断，所以我们在处理的时候使用 <code>sigprocmask</code> + <code>SIG_BLOCK</code> 来做信号屏蔽。这样看起来逻辑上没啥问题，但是有个问题。当我们有其余很多不同 <code>handler</code> 的时候，我们势必会生成很多重复冗余的代码。那么我们有没有更优雅的方法来保证我们的 <code>handler</code> 的安全呢？</p><p>有（超大声（好，很有精神！（逃。隆重介绍一个新的 <strong>syscall</strong> -&gt; <strong>sigaction</strong><a href="#refer-anchor-7"><sup>7</sup></a></p><p>废话不多说，先上代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deletejob</span><span class="params">(<span class="keyword">pid_t</span> pid)</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;delete task %d\n&quot;</span>, pid); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addjob</span><span class="params">(<span class="keyword">pid_t</span> pid)</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;add task %d\n&quot;</span>, pid); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handler</span><span class="params">(<span class="keyword">int</span> sig)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> olderrno = errno;</span><br><span class="line">  <span class="keyword">sigset_t</span> mask_all, prev_all;</span><br><span class="line">  <span class="keyword">pid_t</span> pid;</span><br><span class="line">  sigfillset(&amp;mask_all);</span><br><span class="line">  <span class="keyword">while</span> ((pid = waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    deletejob(pid);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (errno != ECHILD) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;waitpid error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  errno = olderrno;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> pid;</span><br><span class="line">  <span class="keyword">sigset_t</span> mask_all, prev_all;</span><br><span class="line">  sigfillset(&amp;mask_all);</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">new_action</span>;</span></span><br><span class="line">  new_action.sa_handler=handler;</span><br><span class="line">  new_action.sa_mask=mask_all;</span><br><span class="line">  signal(SIGCHLD, handler);</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((pid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">      execve(<span class="string">&quot;/bin/date&quot;</span>, argv, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev_all);</span><br><span class="line">    addjob(pid);</span><br><span class="line">    sigprocmask(SIG_SETMASK, &amp;prev_all, <span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好！很有精神！大家可能发现了，我们这段代码相较于之前的代码增加了关于 sigaction 相关的设置。难道？</p><p>yep，在 <strong>sigaction</strong> 中，我们可以通过设置 <code>sa_mask</code> 来设置当信号处理函数执行期间，进程将阻塞哪些信号。</p><p>你看，这样我们的代码是不是相较于之前更为优雅了。当然，<strong>sigaction</strong> 还有很多其余很有用的设置项，大家可以下来了解一下。</p><h3 id="更快速的信号处理方式"><a href="#更快速的信号处理方式" class="headerlink" title="更快速的信号处理方式"></a>更快速的信号处理方式</h3><p>在我们上面的例子中，我们已经解决了优雅的设置信号处理函数这样的问题，那么我们现在又面临了一个全新的问题。</p><p>如上面所说，我们信号处理函数在执行时，我们选择阻塞了其余的信号。那么这里存在一个问题，当我们在信号处理函数中的逻辑耗时较长，且不需要原子性（即需要和信号处理函数保持同步），而且系统中的信号发生频率较高。那么我们这样的做法将会导致进程的信号队列不断增加，进而导致不可预料的后果。</p><p>那么我们这里有什么更好的方法来处理这件事呢？</p><p>假设，我们打开一个文件，在信号处理函数中只完成一件事，就是往这个文件中写一个特定的值。然后我们轮询这个文件，如果一旦发生变化，那么我们读取文件中的值，判断具体的信号，做具体的信号处理，这样是不是既保证了信号的妥投，又保证我们信号处理逻辑将阻塞信号的代价降至最低了？</p><p>当然，当然，社区知道大家嫌写代码难，所以专门给大家提供了一个船新的 <code>syscall</code> -&gt; <strong>signalfd</strong><a href="#refer-anchor-8"><sup>8</sup></a></p><p>老规矩，先来看看例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/signalfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXEVENTS 64</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deletejob</span><span class="params">(<span class="keyword">pid_t</span> pid)</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;delete task %d\n&quot;</span>, pid); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addjob</span><span class="params">(<span class="keyword">pid_t</span> pid)</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;add task %d\n&quot;</span>, pid); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> pid;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">event</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> *<span class="title">events</span>;</span></span><br><span class="line">  <span class="keyword">sigset_t</span> mask;</span><br><span class="line">  sigemptyset(&amp;mask);</span><br><span class="line">  sigaddset(&amp;mask, SIGCHLD);</span><br><span class="line">  <span class="keyword">if</span> (sigprocmask(SIG_SETMASK, &amp;mask, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;sigprocmask&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> sfd = signalfd(<span class="number">-1</span>, &amp;mask, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">int</span> epoll_fd = epoll_create(MAXEVENTS);</span><br><span class="line">  event.events = EPOLLIN | EPOLLEXCLUSIVE | EPOLLET;</span><br><span class="line">  event.data.fd = sfd;</span><br><span class="line">  <span class="keyword">int</span> s = epoll_ctl(epoll_fd, EPOLL_CTL_ADD, sfd, &amp;event);</span><br><span class="line">  <span class="keyword">if</span> (s == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">abort</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  events = <span class="built_in">calloc</span>(MAXEVENTS, <span class="keyword">sizeof</span>(event));</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> n = epoll_wait(epoll_fd, events, MAXEVENTS, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (errno == EINTR) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;epoll EINTR error\n&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (errno == EINVAL) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;epoll EINVAL error\n&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (errno == EFAULT) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;epoll EFAULT error\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (errno == EBADF) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;epoll EBADF error\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((events[i].events &amp; EPOLLERR) || (events[i].events &amp; EPOLLHUP) ||</span><br><span class="line">          (!(events[i].events &amp; EPOLLIN))) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;epoll err\n&quot;</span>);</span><br><span class="line">        close(events[i].data.fd);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sfd == events[i].data.fd) &#123;</span><br><span class="line">        struct signalfd_siginfo si;</span><br><span class="line">        <span class="keyword">ssize_t</span> res = read(sfd, &amp;si, <span class="keyword">sizeof</span>(si));</span><br><span class="line">        <span class="keyword">if</span> (res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;read error\n&quot;</span>);</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res != <span class="keyword">sizeof</span>(si)) &#123;</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Something wrong\n&quot;</span>);</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (si.ssi_signo == SIGCHLD) &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;Got SIGCHLD\n&quot;</span>);</span><br><span class="line">          <span class="keyword">int</span> child_pid = waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">          deletejob(child_pid);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((pid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">      execve(<span class="string">&quot;/bin/date&quot;</span>, argv, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    addjob(pid);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，我们来介绍下这段代码中的一些关键点</p><ol><li>signalfd 是一类特殊的文件描述符，这个文件可读，可 <strong>select</strong> 。当我们指定的信号发生时，我们可以从返回的 fd 中读取到具体的信号值。</li><li><strong>signalfd</strong> 优先级比信号处理函数低。换句话说，假设我们为信号 <strong>SIGCHLD</strong> 注册了信号处理函数，同时也为其注册了 <strong>signalfd</strong> 那么当信号发生时，将优先调用信号处理函数。所以我们在使用 <strong>signalfd</strong> 时，需要利用 <strong>sigprocmask</strong> 设置进程的信号屏蔽集。</li><li>如前面所说，该文件描述符可 <strong>select</strong> ，换句话说，我们可以利用 <strong>select</strong><a href="#refer-anchor-9"><sup>9</sup></a>, <strong>poll</strong><a href="#refer-anchor-10"><sup>10</sup></a>, <strong>epoll</strong><a href="#refer-anchor-11"><sup>11</sup></a><a href="#refer-anchor-12"><sup>12</sup></a> 等函数来对 fd 进行监听。在上面的的代码中，我们就利用 <strong>epoll</strong> 对 <strong>signalfd</strong> 进行监听</li></ol><p>当然，这里额外要注意的一点是，很多语言不一定提供了官方的 <strong>signalfd</strong> 的 API（如 Python），但是也有可能提供了等价的替代品，典型的例子就是 Python 中的 <strong>signal.set_wakeup_fd</strong><a href="#refer-anchor-13"><sup>13</sup></a></p><p>在这里也给大家留一个思考题：除了利用 <strong>signalfd</strong> ，还有什么方法可以实现高效，安全的信号处理？</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>私以为信号处理是作为一个研发的基本功，我们需要安全，可靠的处理在程序环境中遇到的各种信号。而系统也提供了很多设计很优秀的 API 来减轻研发的负担。但是我们要知道，信号本质上是通讯手段的一种。而其天生的弊端便是携带的信息较少。很多时候，当我们有很多高频的信息传递需要去做的时候，这个时候可能利用信号并不是一个很好的选择。当然这个并没有定论。只能 case by case 的去做 trade-off。</p><p>差不多就这样吧，本周第二篇水文混完（逃</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><div id="refer-anchor-1"></div><ul><li>[1]. <a href="https://man7.org/linux/man-pages/man7/signal.7.html">Linux man page: signal</a></li></ul><div id="refer-anchor-2"></div><ul><li>[2]. <a href="https://linux.die.net/man/3/sigfillset">Linux man page: sigfillset</a></li></ul><div id="refer-anchor-3"></div><ul><li>[3]. <a href="https://man7.org/linux/man-pages/man2/fork.2.html">Linux man page: fork</a></li></ul><div id="refer-anchor-4"></div><ul><li>[4]. <a href="https://man7.org/linux/man-pages/man2/execve.2.html">Linux man page: execve</a></li></ul><div id="refer-anchor-5"></div><ul><li>[5]. <a href="https://man7.org/linux/man-pages/man2/sigprocmask.2.html">Linux man page: sigprocmask</a></li></ul><div id="refer-anchor-6"></div><ul><li>[6]. <a href="https://linux.die.net/man/2/waitpid">Linux man page: waitpid</a></li></ul><div id="refer-anchor-7"></div><ul><li>[7]. <a href="https://www.man7.org/linux/man-pages/man2/sigaction.2.html">Linux man page: sigaction</a></li></ul><div id="refer-anchor-8"></div><ul><li>[8]. <a href="https://www.man7.org/linux/man-pages/man2/sigaction.2.html">Linux man page: signalfd</a></li></ul><div id="refer-anchor-9"></div><ul><li>[9]. <a href="https://man7.org/linux/man-pages/man2/select.2.html">Linux man page: select</a></li></ul><div id="refer-anchor-10"></div><ul><li>[10]. <a href="https://man7.org/linux/man-pages/man2/poll.2.html">Linux man page: poll</a></li></ul><div id="refer-anchor-11"></div><ul><li>[11]. <a href="https://man7.org/linux/man-pages/man2/epoll_ctl.2.html">Linux man page: epoll_ctl</a></li></ul><div id="refer-anchor-12"></div><ul><li>[12]. <a href="https://man7.org/linux/man-pages/man2/epoll_wait.2.html">Linux man page: epoll_wait</a></li></ul><div id="refer-anchor-13"></div><ul><li>[13]. <a href="https://docs.python.org/3/library/signal.html#signal.set_wakeup_fd">Python Documentation: signal.set_wakeup_fd</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;上次写了一个水文&lt;a href=&quot;https://manjusaka.itscoder.com/posts/2020/10/24/a-simple-introduction-about-signal-process-in-linux/&quot;&gt;简单聊聊进程中的信号处理&lt;/a&gt; ，师父看了后把我怒斥了一顿，表示上篇水文中的例子太 old style, too simple ,too naive。如果未来出了偏差，我也要负泽任的。吓得我连和妹子周年庆的文章都没写，先赶紧来重新水一篇文章，聊聊更优秀，更方便的信号处理方式&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/Linux/"/>
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="http://manjusaka.itscoder.com/tags/Linux/"/>
    
    <category term="笔记" scheme="http://manjusaka.itscoder.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="水文" scheme="http://manjusaka.itscoder.com/tags/%E6%B0%B4%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>为什么有些时候 Python 中乘法比位运算更快</title>
    <link href="http://manjusaka.itscoder.com/posts/2020/11/06/why-mul-faster-than-bit-shift-sometimes-in-python/"/>
    <id>http://manjusaka.itscoder.com/posts/2020/11/06/why-mul-faster-than-bit-shift-sometimes-in-python/</id>
    <published>2020-11-06T22:09:00.000Z</published>
    <updated>2020-12-31T13:40:30.533Z</updated>
    
    <content type="html"><![CDATA[<p>我本来以为我不再会写水文了，但是突然发现自己现在也只能勉强写写水文才能维持生活这样子。那就继续写水文吧</p><a id="more"></a><p>某天，一个技术群里老哥提出了这样一个问题，为什么在一些情况下，Python 中的简单乘/除法比位运算要慢</p><p>首先秉持着实事求是的精神，我们先来验证一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [33]: %timeit 1073741825*2                                                                                                                                                                                                                                                                           </span><br><span class="line">7.47 ns ± 0.0843 ns per loop (mean ± std. dev. of 7 runs, 100000000 loops each)</span><br><span class="line"></span><br><span class="line">In [34]: %timeit 1073741825&lt;&lt;<span class="string">1                                                                                                                                                                                                                                                                          </span></span><br><span class="line"><span class="string">7.43 ns ± 0.0451 ns per loop (mean ± std. dev. of 7 runs, 100000000 loops each)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In [35]: %timeit 1073741823&lt;&lt;1</span>                                                                                                                                                                                                                                                                          </span><br><span class="line">7.48 ns ± 0.0621 ns per loop (mean ± std. dev. of 7 runs, 100000000 loops each)</span><br><span class="line"></span><br><span class="line">In [37]: %timeit 1073741823*2                                                                                                                                                                                                                                                                           </span><br><span class="line">7.47 ns ± 0.0564 ns per loop (mean ± std. dev. of 7 runs, 100000000 loops each)</span><br></pre></td></tr></table></figure><p>我们发现几个很有趣的现象</p><ol><li>在值 <code>x&lt;=2^30</code> 时，乘法比直接位运算要快</li><li>在值 <code>x&gt;2^32</code> 时，乘法显著慢于位运算</li></ol><p>这个现象很有趣，那么这个现象的 <code>root cause</code> 是什么？实际上这和 Python 底层的实现有关</p><h2 id="简单聊聊"><a href="#简单聊聊" class="headerlink" title="简单聊聊"></a>简单聊聊</h2><h3 id="PyLongObject-的实现"><a href="#PyLongObject-的实现" class="headerlink" title="PyLongObject 的实现"></a>PyLongObject 的实现</h3><p>在 Python 2.x 时期，Python 中将整型分为两类，一类是 <strong>long</strong>, 一类是 <strong>int</strong> 。在 Python3 中这两者进行了合并。目前在 Python3 中这两者做了合并，仅剩一个 <strong>long</strong> </p><p>首先来看看 <strong>long</strong> 这样一个数据结构底层的实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">longobject</span> &#123;</span></span><br><span class="line">    PyObject_VAR_HEAD</span><br><span class="line">    digit ob_digit[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这里不用关心，<strong>PyObject_VAR_HEAD</strong> 的含义，我们只需要关心 <strong>ob_digit</strong> 即可。</p><p>在这里，<code>ob_digit</code> 是使用了 C99 中的“柔性数组”来实现任意长度的整数的存储。这里我们可以看一下官方代码中的文档</p><blockquote><p>Long integer representation.The absolute value of a number is equal to SUM(for i=0 through abs(ob_size)-1) ob_digit[i] * 2*<em>(SHIFT</em>i)<br>Negative numbers are represented with ob_size &lt; 0; zero is represented by ob_size == 0.<br>In a normalized number, ob_digit[abs(ob_size)-1] (the most significant digit) is never zero.  Also, in all cases, for all valid i,0 &lt;= ob_digit[i] &lt;= MASK.<br>The allocation function takes care of allocating extra memory so that ob_digit[0] … ob_digit[abs(ob_size)-1] are actually available.<br>CAUTION:  Generic code manipulating subtypes of PyVarObject has to aware that ints abuse  ob_size’s sign bit.</p></blockquote><p>简而言之，Python 是将一个十进制数转为 <strong>2^(SHIFT)</strong> 进制数来进行存储。这里可能不太好了理解。我来举个例子，在我的电脑上，SHIFT 为 30 ，假设现在有整数 1152921506754330628 ，那么将起转为 2^30 进制表示则为: 4*(2^30)^0+2*(2^30)^1+1*(2^30)^2 。那么此时 <code>ob_digit</code> 是一个含有三个元素的数组，其值为 [4,2,1]</p><p>OK，在明白了这样一些基础知识后，我们回过头去看看 Python 中的乘法运算</p><h3 id="Python-中的乘法运算"><a href="#Python-中的乘法运算" class="headerlink" title="Python 中的乘法运算"></a>Python 中的乘法运算</h3><p>Python 中的乘法运算，分为两部分，其中关于大数的乘法，Python 使用了 <strong>Karatsuba 算法</strong><a href="#refer-anchor-1"><sup>1</sup></a>，具体实现如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> PyLongObject *</span><br><span class="line">k_mul(PyLongObject *a, PyLongObject *b)</span><br><span class="line">&#123;</span><br><span class="line">    Py_ssize_t asize = Py_ABS(Py_SIZE(a));</span><br><span class="line">    Py_ssize_t bsize = Py_ABS(Py_SIZE(b));</span><br><span class="line">    PyLongObject *ah = <span class="literal">NULL</span>;</span><br><span class="line">    PyLongObject *al = <span class="literal">NULL</span>;</span><br><span class="line">    PyLongObject *bh = <span class="literal">NULL</span>;</span><br><span class="line">    PyLongObject *bl = <span class="literal">NULL</span>;</span><br><span class="line">    PyLongObject *ret = <span class="literal">NULL</span>;</span><br><span class="line">    PyLongObject *t1, *t2, *t3;</span><br><span class="line">    Py_ssize_t shift;           <span class="comment">/* the number of digits we split off */</span></span><br><span class="line">    Py_ssize_t i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* (ah*X+al)(bh*X+bl) = ah*bh*X*X + (ah*bl + al*bh)*X + al*bl</span></span><br><span class="line"><span class="comment">     * Let k = (ah+al)*(bh+bl) = ah*bl + al*bh  + ah*bh + al*bl</span></span><br><span class="line"><span class="comment">     * Then the original product is</span></span><br><span class="line"><span class="comment">     *     ah*bh*X*X + (k - ah*bh - al*bl)*X + al*bl</span></span><br><span class="line"><span class="comment">     * By picking X to be a power of 2, &quot;*X&quot; is just shifting, and it&#x27;s</span></span><br><span class="line"><span class="comment">     * been reduced to 3 multiplies on numbers half the size.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* We want to split based on the larger number; fiddle so that b</span></span><br><span class="line"><span class="comment">     * is largest.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (asize &gt; bsize) &#123;</span><br><span class="line">        t1 = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = t1;</span><br><span class="line"></span><br><span class="line">        i = asize;</span><br><span class="line">        asize = bsize;</span><br><span class="line">        bsize = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Use gradeschool math when either number is too small. */</span></span><br><span class="line">    i = a == b ? KARATSUBA_SQUARE_CUTOFF : KARATSUBA_CUTOFF;</span><br><span class="line">    <span class="keyword">if</span> (asize &lt;= i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (asize == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> (PyLongObject *)PyLong_FromLong(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> x_mul(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If a is small compared to b, splitting on b gives a degenerate</span></span><br><span class="line"><span class="comment">     * case with ah==0, and Karatsuba may be (even much) less efficient</span></span><br><span class="line"><span class="comment">     * than &quot;grade school&quot; then.  However, we can still win, by viewing</span></span><br><span class="line"><span class="comment">     * b as a string of &quot;big digits&quot;, each of width a-&gt;ob_size.  That</span></span><br><span class="line"><span class="comment">     * leads to a sequence of balanced calls to k_mul.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span> * asize &lt;= bsize)</span><br><span class="line">        <span class="keyword">return</span> k_lopsided_mul(a, b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Split a &amp; b into hi &amp; lo pieces. */</span></span><br><span class="line">    shift = bsize &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (kmul_split(a, shift, &amp;ah, &amp;al) &lt; <span class="number">0</span>) <span class="keyword">goto</span> fail;</span><br><span class="line">    assert(Py_SIZE(ah) &gt; <span class="number">0</span>);            <span class="comment">/* the split isn&#x27;t degenerate */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">        bh = ah;</span><br><span class="line">        bl = al;</span><br><span class="line">        Py_INCREF(bh);</span><br><span class="line">        Py_INCREF(bl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (kmul_split(b, shift, &amp;bh, &amp;bl) &lt; <span class="number">0</span>) <span class="keyword">goto</span> fail;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* The plan:</span></span><br><span class="line"><span class="comment">     * 1. Allocate result space (asize + bsize digits:  that&#x27;s always</span></span><br><span class="line"><span class="comment">     *    enough).</span></span><br><span class="line"><span class="comment">     * 2. Compute ah*bh, and copy into result at 2*shift.</span></span><br><span class="line"><span class="comment">     * 3. Compute al*bl, and copy into result at 0.  Note that this</span></span><br><span class="line"><span class="comment">     *    can&#x27;t overlap with #2.</span></span><br><span class="line"><span class="comment">     * 4. Subtract al*bl from the result, starting at shift.  This may</span></span><br><span class="line"><span class="comment">     *    underflow (borrow out of the high digit), but we don&#x27;t care:</span></span><br><span class="line"><span class="comment">     *    we&#x27;re effectively doing unsigned arithmetic mod</span></span><br><span class="line"><span class="comment">     *    BASE**(sizea + sizeb), and so long as the *final* result fits,</span></span><br><span class="line"><span class="comment">     *    borrows and carries out of the high digit can be ignored.</span></span><br><span class="line"><span class="comment">     * 5. Subtract ah*bh from the result, starting at shift.</span></span><br><span class="line"><span class="comment">     * 6. Compute (ah+al)*(bh+bl), and add it into the result starting</span></span><br><span class="line"><span class="comment">     *    at shift.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 1. Allocate result space. */</span></span><br><span class="line">    ret = _PyLong_New(asize + bsize);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="literal">NULL</span>) <span class="keyword">goto</span> fail;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Py_DEBUG</span></span><br><span class="line">    <span class="comment">/* Fill with trash, to catch reference to uninitialized digits. */</span></span><br><span class="line">    <span class="built_in">memset</span>(ret-&gt;ob_digit, <span class="number">0xDF</span>, Py_SIZE(ret) * <span class="keyword">sizeof</span>(digit));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. t1 &lt;- ah*bh, and copy into high digits of result. */</span></span><br><span class="line">    <span class="keyword">if</span> ((t1 = k_mul(ah, bh)) == <span class="literal">NULL</span>) <span class="keyword">goto</span> fail;</span><br><span class="line">    assert(Py_SIZE(t1) &gt;= <span class="number">0</span>);</span><br><span class="line">    assert(<span class="number">2</span>*shift + Py_SIZE(t1) &lt;= Py_SIZE(ret));</span><br><span class="line">    <span class="built_in">memcpy</span>(ret-&gt;ob_digit + <span class="number">2</span>*shift, t1-&gt;ob_digit,</span><br><span class="line">           Py_SIZE(t1) * <span class="keyword">sizeof</span>(digit));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Zero-out the digits higher than the ah*bh copy. */</span></span><br><span class="line">    i = Py_SIZE(ret) - <span class="number">2</span>*shift - Py_SIZE(t1);</span><br><span class="line">    <span class="keyword">if</span> (i)</span><br><span class="line">        <span class="built_in">memset</span>(ret-&gt;ob_digit + <span class="number">2</span>*shift + Py_SIZE(t1), <span class="number">0</span>,</span><br><span class="line">               i * <span class="keyword">sizeof</span>(digit));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3. t2 &lt;- al*bl, and copy into the low digits. */</span></span><br><span class="line">    <span class="keyword">if</span> ((t2 = k_mul(al, bl)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        Py_DECREF(t1);</span><br><span class="line">        <span class="keyword">goto</span> fail;</span><br><span class="line">    &#125;</span><br><span class="line">    assert(Py_SIZE(t2) &gt;= <span class="number">0</span>);</span><br><span class="line">    assert(Py_SIZE(t2) &lt;= <span class="number">2</span>*shift); <span class="comment">/* no overlap with high digits */</span></span><br><span class="line">    <span class="built_in">memcpy</span>(ret-&gt;ob_digit, t2-&gt;ob_digit, Py_SIZE(t2) * <span class="keyword">sizeof</span>(digit));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Zero out remaining digits. */</span></span><br><span class="line">    i = <span class="number">2</span>*shift - Py_SIZE(t2);          <span class="comment">/* number of uninitialized digits */</span></span><br><span class="line">    <span class="keyword">if</span> (i)</span><br><span class="line">        <span class="built_in">memset</span>(ret-&gt;ob_digit + Py_SIZE(t2), <span class="number">0</span>, i * <span class="keyword">sizeof</span>(digit));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4 &amp; 5. Subtract ah*bh (t1) and al*bl (t2).  We do al*bl first</span></span><br><span class="line"><span class="comment">     * because it&#x27;s fresher in cache.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    i = Py_SIZE(ret) - shift;  <span class="comment">/* # digits after shift */</span></span><br><span class="line">    (<span class="keyword">void</span>)v_isub(ret-&gt;ob_digit + shift, i, t2-&gt;ob_digit, Py_SIZE(t2));</span><br><span class="line">    Py_DECREF(t2);</span><br><span class="line"></span><br><span class="line">    (<span class="keyword">void</span>)v_isub(ret-&gt;ob_digit + shift, i, t1-&gt;ob_digit, Py_SIZE(t1));</span><br><span class="line">    Py_DECREF(t1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 6. t3 &lt;- (ah+al)(bh+bl), and add into result. */</span></span><br><span class="line">    <span class="keyword">if</span> ((t1 = x_add(ah, al)) == <span class="literal">NULL</span>) <span class="keyword">goto</span> fail;</span><br><span class="line">    Py_DECREF(ah);</span><br><span class="line">    Py_DECREF(al);</span><br><span class="line">    ah = al = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">        t2 = t1;</span><br><span class="line">        Py_INCREF(t2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((t2 = x_add(bh, bl)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        Py_DECREF(t1);</span><br><span class="line">        <span class="keyword">goto</span> fail;</span><br><span class="line">    &#125;</span><br><span class="line">    Py_DECREF(bh);</span><br><span class="line">    Py_DECREF(bl);</span><br><span class="line">    bh = bl = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    t3 = k_mul(t1, t2);</span><br><span class="line">    Py_DECREF(t1);</span><br><span class="line">    Py_DECREF(t2);</span><br><span class="line">    <span class="keyword">if</span> (t3 == <span class="literal">NULL</span>) <span class="keyword">goto</span> fail;</span><br><span class="line">    assert(Py_SIZE(t3) &gt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Add t3.  It&#x27;s not obvious why we can&#x27;t run out of room here.</span></span><br><span class="line"><span class="comment">     * See the (*) comment after this function.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    (<span class="keyword">void</span>)v_iadd(ret-&gt;ob_digit + shift, i, t3-&gt;ob_digit, Py_SIZE(t3));</span><br><span class="line">    Py_DECREF(t3);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> long_normalize(ret);</span><br><span class="line"></span><br><span class="line">  fail:</span><br><span class="line">    Py_XDECREF(ret);</span><br><span class="line">    Py_XDECREF(ah);</span><br><span class="line">    Py_XDECREF(al);</span><br><span class="line">    Py_XDECREF(bh);</span><br><span class="line">    Py_XDECREF(bl);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里不对 <strong>Karatsuba 算法</strong><a href="#refer-anchor-1"><sup>1</sup></a> 的实现做单独解释，有兴趣的朋友可以参考文末的 reference 去了解具体的详情。</p><p>在普通情况下，普通乘法的时间复杂度位 n^2 (n 为位数），而 K 算法的时间复杂度为 3n^(log3) ≈ 3n^1.585 ，看起来 K 算法的性能要优于普通乘法，那么为什么 Python 不全部使用 K 算法呢？</p><p>很简单，K 算法的优势实际上要在当 n 足够大的时候，才会对普通乘法形成优势。同时考虑到内存访问等因素，当 n 不够大时，实际上采用 K 算法的性能将差于直接进行乘法。</p><p>所以我们来看看 Python 中乘法的实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> PyObject *</span><br><span class="line">long_mul(PyLongObject *a, PyLongObject *b)</span><br><span class="line">&#123;</span><br><span class="line">    PyLongObject *z;</span><br><span class="line"></span><br><span class="line">    CHECK_BINOP(a, b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* fast path for single-digit multiplication */</span></span><br><span class="line">    <span class="keyword">if</span> (Py_ABS(Py_SIZE(a)) &lt;= <span class="number">1</span> &amp;&amp; Py_ABS(Py_SIZE(b)) &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        stwodigits v = (stwodigits)(MEDIUM_VALUE(a)) * MEDIUM_VALUE(b);</span><br><span class="line">        <span class="keyword">return</span> PyLong_FromLongLong((<span class="keyword">long</span> <span class="keyword">long</span>)v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    z = k_mul(a, b);</span><br><span class="line">    <span class="comment">/* Negate if exactly one of the inputs is negative. */</span></span><br><span class="line">    <span class="keyword">if</span> (((Py_SIZE(a) ^ Py_SIZE(b)) &lt; <span class="number">0</span>) &amp;&amp; z) &#123;</span><br><span class="line">        _PyLong_Negate(&amp;z);</span><br><span class="line">        <span class="keyword">if</span> (z == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (PyObject *)z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我们看到，当两个数皆小于 2^30-1 时，Python 将直接使用普通乘法并返回，否则将使用 K 算法进行计算</p><p>这个时候，我们来看一下位运算的实现，以右移为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">static PyObject *</span><br><span class="line">long_rshift(PyObject *a, PyObject *b)</span><br><span class="line">&#123;</span><br><span class="line">    Py_ssize_t wordshift;</span><br><span class="line">    digit remshift;</span><br><span class="line"></span><br><span class="line">    CHECK_BINOP(a, b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Py_SIZE(b) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        PyErr_SetString(PyExc_ValueError, <span class="string">&quot;negative shift count&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Py_SIZE(a) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> PyLong_FromLong(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (divmod_shift(b, &amp;wordshift, &amp;remshift) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> NULL;</span><br><span class="line">    <span class="keyword">return</span> long_rshift1((PyLongObject *)a, wordshift, remshift);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static PyObject *</span><br><span class="line">long_rshift1(PyLongObject *a, Py_ssize_t wordshift, digit remshift)</span><br><span class="line">&#123;</span><br><span class="line">    PyLongObject *z = NULL;</span><br><span class="line">    Py_ssize_t newsize, hishift, i, j;</span><br><span class="line">    digit lomask, himask;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Py_SIZE(a) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        /* Right shifting negative numbers <span class="keyword">is</span> harder */</span><br><span class="line">        PyLongObject *a1, *a2;</span><br><span class="line">        a1 = (PyLongObject *) long_invert(a);</span><br><span class="line">        <span class="keyword">if</span> (a1 == NULL)</span><br><span class="line">            <span class="keyword">return</span> NULL;</span><br><span class="line">        a2 = (PyLongObject *) long_rshift1(a1, wordshift, remshift);</span><br><span class="line">        Py_DECREF(a1);</span><br><span class="line">        <span class="keyword">if</span> (a2 == NULL)</span><br><span class="line">            <span class="keyword">return</span> NULL;</span><br><span class="line">        z = (PyLongObject *) long_invert(a2);</span><br><span class="line">        Py_DECREF(a2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        newsize = Py_SIZE(a) - wordshift;</span><br><span class="line">        <span class="keyword">if</span> (newsize &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> PyLong_FromLong(<span class="number">0</span>);</span><br><span class="line">        hishift = PyLong_SHIFT - remshift;</span><br><span class="line">        lomask = ((digit)<span class="number">1</span> &lt;&lt; hishift) - <span class="number">1</span>;</span><br><span class="line">        himask = PyLong_MASK ^ lomask;</span><br><span class="line">        z = _PyLong_New(newsize);</span><br><span class="line">        <span class="keyword">if</span> (z == NULL)</span><br><span class="line">            <span class="keyword">return</span> NULL;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>, j = wordshift; i &lt; newsize; i++, j++) &#123;</span><br><span class="line">            z-&gt;ob_digit[i] = (a-&gt;ob_digit[j] &gt;&gt; remshift) &amp; lomask;</span><br><span class="line">            <span class="keyword">if</span> (i+<span class="number">1</span> &lt; newsize)</span><br><span class="line">                z-&gt;ob_digit[i] |= (a-&gt;ob_digit[j+1] &lt;&lt; hishift) &amp; himask;</span><br><span class="line">        &#125;</span><br><span class="line">        z = maybe_small_long(long_normalize(z));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (PyObject *)z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我们能看到，在两侧都是小数的情况下，位移动算法将比普通乘法，存在更多的内存分配等操作。这样也会回答了我们文初所提到的一个问题，“为什么一些时候乘法比位运算更快”。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文差不多就到这里了，实际上通过这次分析我们能得到一些很有趣但是也很冷门的知识。实际上我们目前看到这样一个结果，是 Python 对于我们常见且高频的操作所做的一个特定的设计。而这也提醒我们，Python 实际上对于很多操作都存在自己内建的设计哲学，在日常使用的时候，其余语言的经验，可能无法复用</p><p>差不多就这样吧，只能勉强写水文苟活了（逃</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><div id="refer-anchor-1"></div><ul><li>[1]. <a href="https://zh.wikipedia.org/wiki/Karatsuba%E7%AE%97%E6%B3%95">Karatsuba 算法</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;我本来以为我不再会写水文了，但是突然发现自己现在也只能勉强写写水文才能维持生活这样子。那就继续写水文吧&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Python" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/Python/"/>
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Python" scheme="http://manjusaka.itscoder.com/tags/Python/"/>
    
    <category term="随笔" scheme="http://manjusaka.itscoder.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>简单聊聊进程中的信号处理</title>
    <link href="http://manjusaka.itscoder.com/posts/2020/10/24/a-simple-introduction-about-signal-process-in-linux/"/>
    <id>http://manjusaka.itscoder.com/posts/2020/10/24/a-simple-introduction-about-signal-process-in-linux/</id>
    <published>2020-10-24T21:09:00.000Z</published>
    <updated>2020-12-31T13:40:30.529Z</updated>
    
    <content type="html"><![CDATA[<p>最近在某个技术群里帮人分析了 Linux 编程下信号处理的一段代码。我自己觉得这段代码是挺不错的一个例子，所以写个简单的水文，用这段代码聊聊 Linux 中的信号处理</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>我们首先来看一看这一段代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deletejob</span><span class="params">(<span class="keyword">pid_t</span> pid)</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;delete task %d\n&quot;</span>, pid); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addjob</span><span class="params">(<span class="keyword">pid_t</span> pid)</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;add task %d\n&quot;</span>, pid); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handler</span><span class="params">(<span class="keyword">int</span> sig)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> olderrno = errno;</span><br><span class="line">  <span class="keyword">sigset_t</span> mask_all, prev_all;</span><br><span class="line">  <span class="keyword">pid_t</span> pid;</span><br><span class="line">  sigfillset(&amp;mask_all);</span><br><span class="line">  <span class="keyword">while</span> ((pid = waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev_all);</span><br><span class="line">    deletejob(pid);</span><br><span class="line">    sigprocmask(SIG_SETMASK, &amp;prev_all, <span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (errno != ECHILD) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;waitpid error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  errno = olderrno;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> pid;</span><br><span class="line">  <span class="keyword">sigset_t</span> mask_all, prev_all;</span><br><span class="line">  sigfillset(&amp;mask_all);</span><br><span class="line">  signal(SIGCHLD, handler);</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((pid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">      execve(<span class="string">&quot;/bin/date&quot;</span>, argv, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev_all);</span><br><span class="line">    addjob(pid);</span><br><span class="line">    sigprocmask(SIG_SETMASK, &amp;prev_all, <span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上这段代码是比较典型的信号处理的代码，为了引出后续的内容，我们先来复习一下，这段代码中几个关键的 <code>syscall</code> </p><ol><li><strong>signal</strong><a href="#refer-anchor-1"><sup>1</sup></a>: 信号处理函数，使用者可以通过这个函数为当前进程指定具体信号的 Handler。当信号触发时，系统会调用具体的 Handler 进行对应的逻辑处理。</li><li><strong>sigfillset</strong><a href="#refer-anchor-2"><sup>2</sup></a>: 用于操作 <strong>signal sets</strong>（信号集）的函数之一，这里的含义是将系统所有支持的信号量添加进一个信号集中</li><li><strong>fork</strong><a href="#refer-anchor-3"><sup>3</sup></a>: 大家比较熟悉的一个 API 了，创建一个新的进程，并返回 <strong>pid</strong> 。如果是在父进程中，返回的 <strong>pid</strong> 是对应子进程的 <strong>pid</strong>。如果子进程中，<strong>pid</strong> 为0</li><li><strong>execve</strong><a href="#refer-anchor-4"><sup>4</sup></a>: 执行一个特定的可执行文件</li><li><strong>sigprocmask</strong><a href="#refer-anchor-5"><sup>5</sup></a>：设置进程的信号屏蔽集。当传入第一个参数为 <strong>SIG_BLOCK</strong> 时，函数会将当前进程的信号屏蔽集保存在第三个参数传入的信号集变量中，并将当前进程的信号屏蔽集设置为第二个参数传入的信号屏蔽集。当第一个参数为 <strong>SIG_SETMASK</strong> 时，函数会将当前进程的信号屏蔽集设置为第二个参数设置的值。</li><li><strong>wait_pid</strong><a href="#refer-anchor-6"><sup>6</sup></a>: 做一个不精确的概括，回收并释放已终止的子进程的资源。</li></ol><p>OK 了解完这样一些关键的 <strong>syscall</strong> 后，这段代码那么基本上不难理解了。但是要吃透这段代码，我们还需要去复习一下一些 Linux 或者说 POSIX 中的机制：</p><ol><li>由 <code>fork</code> 创建出来的子进程，会继承父进程中的很多东西。就本文中聊的信号一部分来说，子进程会继承父进程的信号屏蔽集和信号处理函数的相关设置</li><li><code>execve</code> 执行后，会重设当前进程的程序段与堆栈。所以在上面的代码中我们执行 <code>/bin/date</code> 后，子进程会被重设。信号处理函数等设置也会被重设</li><li>每个进程都有信号屏蔽集，在信号屏蔽集中的信号被触发时，会进入一个队列，暂时不会触发进程的信号处理，此时信号处于 <strong>pending</strong> 状态。在取消对应信号的屏蔽与阻塞后，再次触发进程的信号处理机制。如果进程显式声明忽略信号，那么不会触发信号的处理。（Tips：关于信号队列这一点，这是一个 POSIX 1. 的约定。在 POSIX 中将这种机制称为<strong>可靠信号</strong>，当阻塞期间，有多个信号发生时，会进入一个可靠队列确保信号能被妥投。 Linux 支持可靠信号，其余 Unix/类 Unix 不一定支持）</li><li>子进程退出后，会给所属的父进程传递一个 <strong>SIGCHLD</strong><a href="#refer-anchor-1"><sup>1</sup></a> 信号，父进程在接受到这种信号后，需要调用 <strong>wait_pid</strong><a href="#refer-anchor-6"><sup>6</sup></a> 函数对子进程进行处理。否则未被回收的子进程，会成为一个僵尸进程，也就是通常说的 Z 进程</li></ol><p>OK，到现在，大家在掌握这些东西后，对于上面的代码应该能完整明白了。不过可能大家还有一个疑惑，为什么在这段代码中需要调用 <strong>sigprocmask</strong><a href="#refer-anchor-5"><sup>5</sup></a> 设置进程的信号屏蔽集来阻塞信号呢？这涉及到另一个问题。</p><p>如前面所说，信号在触发时，进程会”跳转“对应的信号处理函数进行处理。但是信号处理函数处理完后的行为会怎么样呢？依照 Linux 中的设计，可能会出现两种情况</p><ol><li>对于可重入函数而言，信号处理函数返回后会继续处理</li><li>对于不可重入函数而言，会返回 <strong>EINTR</strong><a href="#refer-anchor-1"><sup>1</sup></a></li></ol><p>OK 大家这里应该对我们为什么会在这里使用 <strong>sigprocmask</strong><a href="#refer-anchor-5"><sup>5</sup></a> 有具体的了解了，实际上是为了保证我们的一些函数能够正常的执行完，不会被信号处理所打断。当然这里也有其余的问题，如果信号触发特别密集的情况下，这里的处理会带来额外的 cost。所以还是需要根据不同的场景做 trade-off 了。</p><p>好了。差不多就这样吧，福报久了真没力气写文章，💊。下一篇文章应该就是我最近做内核协议栈监控的一些吃屎记录了（flag++（逃。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><div id="refer-anchor-1"></div><ul><li>[1]. <a href="https://man7.org/linux/man-pages/man7/signal.7.html">Linux man page: signal</a></li></ul><div id="refer-anchor-2"></div><ul><li>[2]. <a href="https://linux.die.net/man/3/sigfillset">Linux man page: sigfillset</a></li></ul><div id="refer-anchor-3"></div><ul><li>[3]. <a href="https://man7.org/linux/man-pages/man2/fork.2.html">Linux man page: fork</a></li></ul><div id="refer-anchor-4"></div><ul><li>[4]. <a href="https://man7.org/linux/man-pages/man2/execve.2.html">Linux man page: execve</a></li></ul><div id="refer-anchor-5"></div><ul><li>[5]. <a href="https://man7.org/linux/man-pages/man2/sigprocmask.2.html">Linux man page: sigprocmask</a></li></ul><div id="refer-anchor-6"></div><ul><li>[6]. <a href="https://linux.die.net/man/2/waitpid">Linux man page: waitpid</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在某个技术群里帮人分析了 Linux 编程下信号处理的一段代码。我自己觉得这段代码是挺不错的一个例子，所以写个简单的水文，用这段代码聊聊 Linux 中的信号处理&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/Linux/"/>
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="http://manjusaka.itscoder.com/tags/Linux/"/>
    
    <category term="笔记" scheme="http://manjusaka.itscoder.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="水文" scheme="http://manjusaka.itscoder.com/tags/%E6%B0%B4%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>关于 Kubernetes 和容器化的一些随想</title>
    <link href="http://manjusaka.itscoder.com/posts/2020/06/29/some-tips-about-kubernetes-and-container/"/>
    <id>http://manjusaka.itscoder.com/posts/2020/06/29/some-tips-about-kubernetes-and-container/</id>
    <published>2020-06-29T18:09:00.000Z</published>
    <updated>2020-12-31T13:40:30.533Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间在不少群里争论过关于 Kubernetes 和容器化的一些事，干脆总结下一些碎碎念作为一个概括吧。本文仅代表个人立场，不代表商业观点</p><a id="more"></a><h2 id="容器化"><a href="#容器化" class="headerlink" title="容器化"></a>容器化</h2><p>目前很主流的一个观点，是能上容器尽可能上容器，说实话这个想法实际上是有一定的合理性的，去 review 这个想法，我们需要去看一下容器这个东西，给我们带来了什么样的改变</p><p>容器首先毫无疑问，会给我们带来非常多的好处：</p><ol><li>真正意义上让开发与生产环境保持一致是一种非常方便的事，换句话说，开发说的“这个服务在我本地没啥问题”是一句有用的话了</li><li>让部署一些服务变的更为方便，无论是分发，还是部署，</li><li>能做到一定程度上的资源隔离与分配</li></ol><p>那么，看起来我们是不是可以无脑用容器？不，不是，我们需要再来 Review 一下，容器化后我们所要面临的一些弊端：</p><ol><li>容器安全性问题，目前最主流的容器实现（此处点名 Docker）本质上而言还是基于 CGroups + NS 来进行资源与进程隔离。那么其安全性将会是一个非常值得考量的问题。毕竟 Docker 越权与逃逸漏洞年年有，年年新。那么这意味着我们是需要去有一个系统的机制去规范我们容器的使用，来保证相关的越权点能被把控在一个可控的范围内。而另一个方向是镜像安全问题，大家都是面向百度/CSDN/Google/Stackoverflow 编(fu)程(zhi)选手，那么势必会出现一个情况，当我们遇到一个问题，搜索一番，直接复制点 Dockerfile 下来，这个时候，将会存在很大的风险点，毕竟谁也不知道 base image 里加了啥料不是？</li><li>容器的网络问题。当我们启动若干个镜像后，那么容器之间的网络互通怎么处理？而大家生产环境，肯定不止一个机器那么少，那么跨主机的情况下，怎么样去进行容器间的通信，同时保证网络的稳定性？</li><li>容器的调度与运维的问题，当我一个机器高负载的时候，怎么样去将该机器上的一些容器调度到其余的机器上？而怎么样去探知一个容器是否存活？如果一个容器 crash 了，怎么样重新拉起？</li><li>容器具体的细节问题，比如镜像怎么样构建与打包？怎么样上传？乃至说怎么样去排查一些 corner case 的问题？</li></ol><p>我们做一个业务决策的时候，我们肯定不会是因为某个技术够先进，够舒服，而是需要去衡量这个业务决策的 ROI，同时在利弊之间做一个 Trade-Off，用容器化这件事来说吧，我们来思考下我们可能迁移容器常见的几个误区：</p><ol><li>我们想对利用容器做资源隔离！那么问题来了，用 systemd + cgroup 这样简便的方法做和容器之间有什么区别？是容器的成本更低？</li><li>我们想践行 Devops 所以想上容器化！实际上 Devops 和容器化关联并不算大，它更多的是一种方法论，一个团队之间内部协作的一套方法论。不精确的来讲，是通过自动化，流程改进，SOP 引入等手段，将一套服务的分发与运维更为简便化。换句话说，在我们去践行 Devops 这一套方法论的时候，实际上不是一个技术问题，而是一个制度问题（讲个笑话，Devops 的开发不需要写脚本）。在其中，无论是我们传统的 Ansible 等运维手段，还是一些自动化测试的方法与框架，都可以成为 Devops 的一部分。那么这里还是一个问题，我们为什么要用容器？是因为传统的工具践行 Devops 的 cost 远高于用容器化的？</li></ol><p>从这两个例子大家能看出来，当我们去做容器化这件事的时候，一定要思考的问题是，容器化是真正解决了我们什么痛点，还是只是因为它看起来够先进，够屌，能为我简历背书？</p><h2 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h2><p>前面聊到容器化的几个问题，促成了以 Kubernetes 为代表的容器编排体系的诞生。大家在想，哇，既然解决了这个问题，那么我们再来聊聊这个问题</p><p>首先我已经忽略掉自建 Kubernetes 集群的场景了，因为那不是一般人能 Hold 住的。那么我们来看一下，依托公有云使用的情况吧，以阿里云为例，点开页面，然后我们见到这样张图</p><p><img src="https://manjusakablog.blob.core.windows.net/blog-resource/images/2020-06-29-01.png" alt="images"></p><p><img src="https://manjusakablog.blob.core.windows.net/blog-resource/images/2020-06-29-02.png" alt="images"></p><p>好了，提问：</p><ol><li>VPC 是什么？</li><li>Kubernetes 1.16.9 和 1.14.8 有什么区别</li><li>Docker 19.03.5 和阿里云安全沙箱 1.1.0 是什么，有什么区别</li><li>专有网络是什么？</li><li>虚拟交换机是什么？</li><li>网络插件是什么？Flannel 和 Terway 又是什么？有什么区别？当你翻了翻文档，然后文档告诉你，Terway 是阿里云基于 Calico 魔改的 CNI 插件。那么 CNI 插件是什么？Calico 是什么？</li><li>Pod CIDR 是什么怎么设？</li><li>Service CIDR 是什么怎么设？</li><li>SNAT 是什么怎么设？</li><li>安全组怎么配置？</li><li>Kube-Proxy 是什么？iptables 和 IPVS 有什么区别？怎么选？</li></ol><p>是不是和你想象的一键点点点有很大区别？你可能说，我们小公司不管这些，暴力出奇迹，一键全默认。。。。emmmm，那上什么 Kubernetes 啊。。好了，假设你上了后，来，我们继续算账</p><ol><li>你得有个镜像仓库吧，不贵，中国区基础版780一个月</li><li>你集群内的服务需要暴露出去用吧？行叭，买个最低规格的 SLB，简约型，每个月200</li><li>好了，你每个月日志得花钱吧？假设你每个月20G日志，不多吧？行，39.1</li><li>你集群监控要不要？好，买，每天50w条日志上报吧？行，不贵，975 一个月</li></ol><p>算一下，一个集群吧，(780+200+39.1+975)*12=23292.2 不算集群基础的 ENI，ECS 等费用，美滋滋</p><p>而且会衍生很多其余的问题，具体的话，大家可以去 Kubernetes 的 Issue 区看一下盛况</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写这个文章，并不为吐槽或者喷人，只是想表明一个观点，借用我比较喜欢的一篇文章<a href="https://mp.weixin.qq.com/s/9j3BnR3UqA-lnJDoM5Hrvg">中台，我信了你的邪 | 深氪</a> 中的一句话</p><blockquote><p>到了去年底，阿里巴巴董事长兼CEO张勇在湖畔大学分享时也说：如果一个企业奔着中台做中台，就是死。</p></blockquote><p>逍遥子是不是说过这句话待考，但我很赞同，同时我认为<strong>一个企业奔着技术先进性去搞技术，就是死</strong> ，毕竟技术是需要为业务服务的，而技术的进步很大程度上依赖业务的沉淀与需求</p><p>好了，这应该是我写过最水的文章了，先这样吧。继续搬砖了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这段时间在不少群里争论过关于 Kubernetes 和容器化的一些事，干脆总结下一些碎碎念作为一个概括吧。本文仅代表个人立场，不代表商业观点&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="水文" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/%E6%B0%B4%E6%96%87/"/>
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="水文" scheme="http://manjusaka.itscoder.com/tags/%E6%B0%B4%E6%96%87/"/>
    
    <category term="杂记" scheme="http://manjusaka.itscoder.com/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>简单聊聊 Maglev ，来自 Google 的软负载均衡实践</title>
    <link href="http://manjusaka.itscoder.com/posts/2020/05/23/a-simple-introduction-about-maglev/"/>
    <id>http://manjusaka.itscoder.com/posts/2020/05/23/a-simple-introduction-about-maglev/</id>
    <published>2020-05-23T03:09:00.000Z</published>
    <updated>2020-12-31T13:40:30.529Z</updated>
    
    <content type="html"><![CDATA[<p>好久没博客了，来写个简单的读论文笔记吧，这篇文章是来自 Google 2016 年发表的一篇论文 <a href="https://research.google/pubs/pub44824/">Maglev: A Fast and Reliable Software Network Load Balancer</a> 分享了他们内部从08年开始大规模使用的软负载均衡系统的实现。里面很多很有趣的细节，我看我能写多少，算多少吧</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>负载均衡的概念大家肯定都比较熟悉了，再次不再赘述。现在我们需要考虑 Google 的场景。设计之初，Google 需要一种高性能的 LB 来承担 Google 一些重头服务的流量，比如 Google 搜索，Gmail 等等。由于流量非常庞大，那么 LB 需要非常强大的性能来处理大量的流量。</p><p>在这里，传统的想法可能说，我直接上专业的硬件负载均衡，能用钱解决的问题，都不算事（笑。但是这样的方案有着不小的问题</p><p><img src="https://user-images.githubusercontent.com/7054676/82123782-c9537080-97cd-11ea-9030-4af01358be9d.png" alt="image"></p><ol><li>硬件负载均衡单点的性能决定了整个网络能承担的请求</li><li>在 HA 上存在缺陷。为了保证单点失效的时候，整个网络集群不陷入瘫痪。那么我们通常需要 1:1 的做冗余</li><li>灵活性和编程性欠缺，想做骚操作的时候没有切入点</li><li>太贵了。贵到 Google 都承受不了（逃</li></ol><p>在这样一种情况下，Google 开始考虑自行构建一种 SLB (Software Load Balance) 系统。去构建这样一种系统。好处也很明显。比如方便的 Scale ，为了保证 HA 所需的冗余从之前的 1:1 可以降至 N+1 ，方便的定制性等。架构就演变成下图了</p><p><img src="https://user-images.githubusercontent.com/7054676/82126035-7c2acb00-97dc-11ea-9f65-8aa4f29b34ea.png" alt="image"></p><p>但是挑战也很明显。首先需要有足够的性能，这样保证集群有足够的吞吐。同时需要做 connection tracking ，这样保证同一个连接的数据包能妥投到同一个机器上。也许要保证能有透明的 failover 的能力。</p><p>这样一些要件结合起来，这也就是我们今天要聊的 Maglev。Google 从 08 年开始大规模的应用的 LB 系统</p><h2 id="Maglev-初窥"><a href="#Maglev-初窥" class="headerlink" title="Maglev 初窥"></a>Maglev 初窥</h2><h3 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h3><p>在继续聊 Maglev 之前，我们需要去了解 Google 现在怎么样去去使用 Maglev 的，下面是一个简化后的示意图</p><p><img src="https://user-images.githubusercontent.com/7054676/82126042-8c42aa80-97dc-11ea-8647-767d5e63dda8.png" alt="image"></p><p>同时这里我们需要介绍一个很重要的概念叫做 VIP(Virtual IP Address) 。 用过 Kubernetes 的同学肯定对这个概念并不陌生。VIP 并不是一个实际与网卡绑定的物理 IP。近似来讲它可以作为后端一组 Endpoint 的抽象，当你访问这个 VIP 的时候，实际上是在访问后端的 Endpoint 。这里举个更方便理解的例子，以 Kubernetes 为例，我们在创建完一组 Pod 后，为了暴露 Pod 中提供的服务，我们通常会创建一个 Service 来关联对应的 Pod。Service 通常会有一个 IP，那么这个 IP 就是一个 VIP 。当我们访问 Service 的 IP 的时候，通常会随机从后面的 Pod 中选择一个承接请求。</p><p>好了，回到 Maglev ，我们现在来看下整个的一个流程。Maglev 会和 VIP 关联，然后将 VIP 透传给一组 Router。 当用户在浏览器中输入 <a href="https://www.google.com/">https://www.google.com</a> 并按下回车的时候，浏览器会进行 DNS 解析。而 DNS 解析将由 Google 的 DNS 服务器进行处理。DNS 服务器会根据用户的区域选择一个最近集群的 VIP 返回给用户，然后浏览器会根据获取到的 VIP 建立连接。</p><p>当 Router 收到对应包时，会将包转发给 VIP 所属的 Maglev 集群中的任意节点。集群中的每个节点权重都是平衡。Maglev 节点在接受到包的时候，会利用 GRE(Generic Routing Encapsulation) 进行封包。然后传输给对应的后端端点。</p><p>当后端端点接收到数据包的时候，会进行接包并处理请求。当响应数据准备就绪的时候，会进行封包操作，会将 VIP 的作为源地址，用户的 IP 作为目标地址，然后响应数据作为数据包操作。这个时候，后端端点会利用 DSR(Direct Server Return) 将数据包绕过 Maglev 直接返回。这样避免响应过大的时候对 Maglev 造成额外的负担。实际上 DSR 在 L4 的 LB 实现，如 HAProxy，Envoy 等都得到了比较多的应用。改天有时间写篇博客来聊聊。</p><h3 id="Maglev-配置"><a href="#Maglev-配置" class="headerlink" title="Maglev 配置"></a>Maglev 配置</h3><p>如前面所说， Maglev 接收来自 Router 的 VIP 请求，然后将对应流量转发到对应的后端端点上。每个 Maglev 将由 Controller 和 Forwarder 组成，其架构如下所示</p><p><img src="https://user-images.githubusercontent.com/7054676/82127700-3d9b0d80-97e8-11ea-8cc3-8a6f5b1ccd3e.png" alt="image"></p><p>而 Controller 和 Forwarder 都利用 Configuration Object 管理相关 VIP。Configuration Object 这一套实际上又是另外一套系统（可以近似的认为是注册中心），彼此之间通过 RPC 来通信。</p><p>在 Maglev 机器上，Controller 会定期对 Forwarder 进行检查。根据检查结果来确定是否通过 BGP 提交/撤回所有 VIP 的注册（要么全部成功，要么全部失败，其实还是为了保障系统的一致性）。这样确保从 Router 过来的流量都能扔到健康的机器上</p><p>而从 Router 过来的 VIP 流量将会由 Forwarder 进行处理。在 Forwarder 中，每个 VIP 都会和一个或多个 backend pool 关联。除非特殊处理，Maglev 中的 backend 都是服务端点。一个 backend pool 可以包含一组服务端点的的物理 IP ，也可以是其余的 backend pool。每个 backend pool 都会根据其特定需求，设计若干个监控检查器，数据包只会转发给健康的服务。如之前所说，同一个服务可能会被包含在多个 backend pool 中，因此 Forwarder 将会根据具体的地址进行去重，避免额外的开销。</p><p>Forwarder 的 Config Manager 将负责从 Configuration Object 中拉取，解析并验证相关的配置。所有配置的提交都是具备原子性（要么全部成功，要么全部失败）。在推送和解析到生效的过程中，存在一个非常短暂的 gap，在此期间，一个 Maglev 集群之间的配置可能存在不同步的情况。不过因为一致性 Hash 的存在，在这个非常短的 Gap 内，大部分请求还是能成功妥投。</p><h2 id="Maglev-实现"><a href="#Maglev-实现" class="headerlink" title="Maglev 实现"></a>Maglev 实现</h2><p>好了，扯了这么多，来看一下 Maglev 整个系统的一些实践细节</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>总所周知（如前面所说），Maglev 由 Forwarder 来实际承担流量相关的转发工作，我们用一张图来说明一下它的结构</p><p><img src="https://user-images.githubusercontent.com/7054676/82140858-7082e700-9864-11ea-9653-a5e8ba9b5d97.png" alt="image"></p><p>Forwarder 将直接从 NIC(Network Interface Card) 拿到数据包，然后直接扔入 NIC 转发到后端。期间所有操作都不会过内核（实际上过内核会有额外的 cost）</p><p>从 NIC 中捞出的包，会先由 <code>Steering Module</code> 进行处理，在处理过程中，<code>Steering Module</code> 将会根据五元组（协议，目标地址，目标端口，源地址，源端口）进行 hash 计算。然后将其转入对应的 <code>Receiving Queue</code> 中。每个 <code>Receiving Queue</code> 都会对应一个处理线程。处理线程将过滤掉目标 VIP 和本机注册 VIP 不匹配的包。然后会重新计算五元组 hash，然后从 <code>Connection Tracking Table</code> 中查找对应的值。</p><p>在 <code>Connection Tracking Table</code> 中存放之前五元组 Hash 所对应的 Backend，然后如果查找命中，那么直接复用，如果未命中，则为这个包选择一个新的 Backend, 然后将键值对加入 <code>Connection Tracking Table</code>。如果此时没有 Backend 可用，那么这个包会被丢弃。当这个包完成查找操作后，如前面所说，会改写这个包，然后将其放入 <code>transmission queue</code> 中去。最后将 <code>muxing module</code> 会将 <code>transmission queue</code> 的包直接通过 NIC 发送出去。</p><p>这里有个问题，在 <code>Steering Module</code> 中为啥不考虑根据 <code>round-robin</code> 这种常见的策略来做？大家都知道每个线程的处理速度是不一致的，如果直接裸 <code>round-robin</code> ，那么面对这种情况，可能会导致数据包重排的情况发生，如果是引入权重的概念来改良，又会引入新的复杂度，毕竟线程的处理速度是动态变化的。另外一种是 <code>connnection tracking</code> 的情况，假设我们有个需要持久化的连接，我们需要保证每个包都能扔到同样的机器上，这个时候用 <code>round-robin</code> 就会引入额外的复杂性。不过对于一些特殊情况，比如 <code>receive queue</code> 满了，一致性 Hash 处理不过来的时候，我们会利用 <code>round-robin</code> 作为 backup 的手段来替代一致性 Hash，这种情况对于同时存在同样5元组包的时候比较好用。</p><h3 id="高效处理数据包"><a href="#高效处理数据包" class="headerlink" title="高效处理数据包"></a>高效处理数据包</h3><p>前面已经花了很多时间讲述了，Maglev 是直接对 TCP 的数据包进行操作，同时因为 Google 的流量极为庞大，那么这个时候实际上是需要 Maglev 有着良好的转发性能。不然在大规模场景下，其吞吐能力会无法满足需求。Google 怎么做的？答：直接对网卡操作。。</p><p>我们都知道在 Linux 中进行网络编程的时候，将数据包从内核态拷贝到用户态实际上是一件开销非常大的事，所以对于一些极端需求性能的场景，如 L4 的负载均衡等，大家可能更倾向于将东西做到内核里，避免跨态拷贝。这也是 LVS 等工具的思路。但是实际上对于更大规模的流量，来讲，从网卡到内核，经过内核中的一堆 filter 处理也是一件开销非常大的事，而如同前面所说，Maglev 只依赖数据包中的五元组，对于包序列号，包 payload ，都不需要关心。于是 Google：我有一个大胆的想法！好了，来看张图</p><p><img src="https://user-images.githubusercontent.com/7054676/82677245-4bceab00-9c7a-11ea-9d30-68f948b32f9a.png" alt="image"></p><p>Google 选择直接在 NIC (即网卡) 上进行编程。让 <code>Forwarder</code> 和 NIC 共享一片内存。内存中维护的是一个环状的数据包池子。然后 <code>Forwarder</code> 中的 <code>steering module</code> 和 <code>muxing module</code> 各自维护三个指针来处理这些数据包，下面详细描述一下</p><p>首先而言 <code>steering module</code> 维护了三个指针</p><ol><li><code>received</code> ，管理接收数据包</li><li><code>reserved</code>, 管理已接收未处理的数据包</li><li><code>processed</code>, 管理处理完成的数据包</li></ol><p>那么流程是这样的，当 NIC 接受到新的数据包后，那么 <code>received</code> 指针指向的内存会被修改。然后当一个数据包被分发给线程完成相关操作后，那么 <code>processed</code> 指针指向的内存地址会被修改。因为是个环状结构嘛， <code>received</code> 和 <code>processed</code> 中间存在的数据包就是已接收但未完成处理的包，由 <code>reserved</code> 指针进行管理。</p><p>于此对应的，<code>muxing module</code> 也维护了三个指针</p><ol><li><code>sent</code>，管理已发送完毕的数据包</li><li><code>ready</code>，管理已经就绪等待发送的数据包</li><li><code>recycled</code>, 管理已回收的数据包</li></ol><p>那么对应的流程是这样的，当 <code>steering module</code> 完成相关包的处理的时候，<code>ready</code> 指针指向的内存会被修改，然后等待发送。当一个数据包发送后，<code>sent</code> 指向的内存地址被修改。在 <code>ready</code> 和 <code>sent</code> 之外有另一个状态 <code>recycled</code> 管理已经回收的数据包。</p><p>我们可以看到在这个过程中，没有发生数据拷贝的操作，实际上这减小了一部分复制数据带来的时延。不过这种方法存在的问题就是，当指针越界后，会带来很大的额外开销。所以 Google 采用的做法是批处理，比如接收 3000 个小包集中处理一次，这样的骚操作</p><p>另外需要做一些额外的优化，比如包处理线程之间不共享数据以避免竞态。比如需要将线程与具体 CPU Core 绑定来保证性能等等</p><p>目前来看，Google 这一套的做法效率非常的出色，平均每个包的处理只需要 300 ns(10^-9s)。如同前面所说，Google 采用批处理的方式来处理包，这样的问题是每当一些例如硬件中断的情况发生的时候，可能到达处理阈值的时间会比大部分情况长很多，所以 Google 设计了一个 50μs(10^-6s) 的 Timer 来处理这种情况。换句话说，当因为硬件或者其余问题时，整体的包处理时长可能会增加 50μs 的时间（其实这里感觉 Google 怎么是在得瑟，你看我们性能超棒的噢，只有硬件是我们的瓶颈喔（逃</p><h3 id="后端选择"><a href="#后端选择" class="headerlink" title="后端选择"></a>后端选择</h3><p>如同前面所说的一样，<code>Forwarder</code> 会为数据包选择一个后端。对于 TCP 这种常见来说，将相同五元组的数据包转发到同一个后端节点上非常重要。Google 采取在 Maglev 中维护一个 <code>connction tracking table</code> 来解决这个问题。当一个包抵达的时候，Maglev 会计算其五元组 Hash ，然后确定在 table 中是否存在，如果不存在，则选择一个节点作为后端，然后将记录值添加到 table 中。如果存在则直接复用</p><p>这样看起来没有问题了对吧？Google：不，不是，还有问题！</p><p>我们首先考虑这样一种场景：如前面所说，Maglev 前面挂了一个/组 Router，而 Router 是不提供连接亲和的，即不保证把同一个连接的包发送到同一个机器上。所以可能存在的情况是同一个连接的不同数据包会被仍在不同的机器上。再比如，我们假设 Router 是具有连接亲和的，但是也会存在如果机器发生重启后，<code>connection tracking table</code> 被清空的情况。</p><p>再来一个例子，我们都知道 <code>connection tracking table</code> 它所能使用的内存，必定是有一个阈值的。这样在面对一些流量非常大，或者 <code>SYN Flood</code> 这种非正常情景的时候。当 <code>connection tracking table</code> 的容量到达阈值的时候，我们势必会清理一些数据。那么在这个时候，一个连接的 tracking 信息就很有可能被清理。那么在这种情况下，我们怎么样去做 <code>connection tracking</code> ？</p><p>Google 选择的做法是引入一致性 Hash</p><h3 id="一致性-Hash：Maglev-Hash"><a href="#一致性-Hash：Maglev-Hash" class="headerlink" title="一致性 Hash：Maglev Hash"></a>一致性 Hash：Maglev Hash</h3><p>整体算法其实有很多细节，这里只说明大概，具体细节大家可以去阅读原文查找</p><p>首先，我们要确定经过预处理后的产物 <code>lookup table</code> 的长度 M。所有 Key 都会被 hash 到这个 <code>lookup table</code> 中去，而 <code>lookup table</code> 中的每个元素都会被映射到一个 Node 上</p><p>而计算 <code>lookup table</code> 的计算分为两步</p><ol><li>计算每一个 node 对于每一个 lookup table 项的一个取值（也就是原文中提到的 permutation）；</li><li>根据这个值，去计算每一个 lookup table 项所映射到的 node（放在 entry 中，此处 entry 用原文的话来讲就是叫做 <code>the final lookup table</code>）。</li></ol><p>permutation 是一个 M×N 的矩阵，列对应 lookup table，行对应 node。 为了计算 permutation，需要挑选两个 hash 算法，分别计算两个值 offset 与 skip 。最后根据 offset 和 skip 的值来填充 permutation，计算方式描述如下：</p><ol><li>offset ← h 1 (name[i]) mod M</li><li>skip ← h 2 (name[i]) mod (M − 1)+ 1</li><li>permutation[i][j] ← (offset+ j × skip) mod M</li></ol><p>其中 i 是 Node Table 中 Node 的下标，j 是 lookup table 下标</p><p>在计算完 permutation 后，我们就可以计算最后的 lookup table 了，这个 table 用一维的数组表示</p><p><img src="https://user-images.githubusercontent.com/7054676/82696622-f73b2800-9c99-11ea-8d14-08f67487f3b9.png" alt="image"></p><p>这里贴一张图，大家可以配合下面的代码一起看一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据已经计算好的 permutation 来计算 lookup_table</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_lookup_table</span>(<span class="params">n: <span class="built_in">int</span>, m: <span class="built_in">int</span>, permutation: List[List[<span class="built_in">int</span>]]</span>) -&gt; List[int]:</span></span><br><span class="line">    <span class="comment"># result 是最终记录分布的 Hash 表</span></span><br><span class="line">    result: List[<span class="built_in">int</span>] = [-<span class="number">1</span>] * m</span><br><span class="line">    <span class="comment"># next 是用来解决冲突的，在遍历过程中突然想要填入的 entry 表已经被占用，</span></span><br><span class="line">    <span class="comment"># 则通过 next 找到下一行。一直进行该过程直到找到一个空位。</span></span><br><span class="line">    <span class="comment"># 因为每一列都包含有 0~M-1 的每一个值，所以最终肯定能遍历完每一行。</span></span><br><span class="line">    <span class="comment"># 计算复杂度为 O(M logM) ~ O(M^2)</span></span><br><span class="line">    <span class="built_in">next</span>: List[<span class="built_in">int</span>] = [<span class="number">0</span>] * n</span><br><span class="line">    flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            x = permutation[i][<span class="built_in">next</span>[i]]</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="comment"># 找到空位，退出查找</span></span><br><span class="line">                <span class="keyword">if</span> result[x] == -<span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="built_in">next</span>[i] += <span class="number">1</span></span><br><span class="line">                x = permutation[i][<span class="built_in">next</span>[i]]</span><br><span class="line">            result[x] = i</span><br><span class="line">            <span class="built_in">next</span>[i] += <span class="number">1</span></span><br><span class="line">            flag += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 表已经填满，退出计算</span></span><br><span class="line">            <span class="keyword">if</span> flag == m:</span><br><span class="line">                <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>在这里我们能看到，这段循环代码必然结束，而最坏情况下，复杂度会非常高，最坏的情况可能会到 O(M^2)。原文中建议找一个远大于 N 的 M （To avoid this happening we always choose M such that M ≫ N.）可以使平均复杂度维持在 O(MlogM)</p><p>而 Maglev 中 Google 自研的一致性算法性能怎么样呢？论文中也做了测试</p><p><img src="https://user-images.githubusercontent.com/7054676/82696955-abd54980-9c9a-11ea-8aa4-480ae328d387.png" alt="image"></p><p>可以看到，对于不同大小的 lookup table，Maglev 表现出了更好的均衡性</p><p>说实话，Maglev 在我看来本质上是一个带虚节点的 Hash，说实话，我没想到为什么 Google 不用 Dynamo 等已经比较成熟的 Hash ？难道是因为政策原因？（毕竟 Dynamo 是 AWS 家的嘛（逃。BTW Enovy 也实现了 Maglev 。参见 <a href="https://github.com/envoyproxy/envoy/issues/2267">Evaluate other consistent hash LB algorithms</a> ，而且引入了权重，实现的挺不错，有兴趣的同学可以去看看（逃</p><p>说实话，Maglev Hash 还有很多细节没有讲，不过实在懒得写了，，等后面出一个一致性 Hash 的分析博客吧，Flag++</p><h2 id="Maglev-优化"><a href="#Maglev-优化" class="headerlink" title="Maglev 优化"></a>Maglev 优化</h2><p>前面我们已经把 Maglev 这一套的基本原理讲的差不多了。但是如果作为一个生产上大规模使用的 LB ，那么势必还需要针对细节做很多优化，由于这里涉及到很多方面，我这里只简单介绍一下，剩下的还是建议大家直接去读原文</p><h3 id="分段数据包的处理"><a href="#分段数据包的处理" class="headerlink" title="分段数据包的处理"></a>分段数据包的处理</h3><p>熟悉网络的同学都知道，在基于 IP 协议传输报文的时候，受限于 MTU 的大小，在传输的时候，可能会存在数据分片传输的情况，而这些分片后的数据不一定会带有完整的五元组信息。比如一个数据被切分为两段，那么第一段将带有 L3 和 L4 的头部信息，而第二段只带有 L3 的信息。而在传输过程中，因为网络关系，Maglev 无法完全保证对接收到的数据作出正确的处理</p><p>这样问题就大了，因为数据分段的情况实际上是非常场景的。那么对于这样的场景，Maglev 应该怎么样去处理？首先我们需要确定怎么样才能保证所有数据都能妥投</p><ol><li>保证一个数据报文的不同数据段都需要由同一个 Maglev 实例处理</li><li>对于同一个数据报文的不同数据段需要能保证后端选择结果是一致的</li></ol><p>OK，那么我们来看看 Google 是怎么解决这个问题的。</p><p>首先，每个 Maglev 实例中都会有一个特殊的 <code>backend pool</code> ，池子中是该 Maglev 集群中所有的实例。当接收到数据后，Maglev 会先根据三元组（源地址，目标地址，协议簇）计算 hash ，然后选择一个 Maglev 实例进行转发，这样就能保证同一数据报文的不同分段能传输到同一个 Maglev 实例上。当然这里需要利用 GRE 的递归控制来避免无限循环。</p><p>好了我们来看看条件2怎么满足。在每个 Maglev 实例上会维护一个特殊的表，记录数据分片后第一个数据端的转发结果。以前面的例子为例，当一个报文的第二个分段抵达的时候，Maglev 会查询表中是否存在第一个数据段的转发结果。如果存在则直接转发，如果不存在，则将这个数据段缓存，直到第一个数据段抵达，或者到达超时阈值</p><h3 id="监控与调试"><a href="#监控与调试" class="headerlink" title="监控与调试"></a>监控与调试</h3><p>真正的用时都是不需要调试（划掉）（笑，Google 为了这一套系统设计了辅助的监控与调试手段来帮助日常的开发迭代。</p><p>在监控这边，分为黑盒和白盒两种监控手段。比如遍布全球的特定监控节点，以确认 VIP 的健康状态。当然与之配套的还有一整套白盒监控。Google 会监控具体的服务器指标，同时会监控 Maglev 本身的指标</p><p>当然与之配套的还有一些调试工具。比如 Google 开发了一套类似 X-Trace 的 packettracer。可以通过 packettracer 来发送一些带有特定标头和 payload 的信息。当 Maglev 接到这样一些特殊的数据包后，除了照常转发数据包以外，也会讲一些关键信息上报到指定位置</p><p>这其实也体现了软负载均衡相较于硬件负载均衡的一个好处，无论可调试性还是可迭代性都是硬件负载均衡无法媲美的</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章其实我读了挺久，里面很多细节挺值得慢慢深究的，所以再次建议大家一定要去找原文读一下，非常不错。另外顺便推荐一篇文章，是美团技术团队的作品，他们也参考了 Maglev 来实现自己的高性能 L4 负载均衡，参见<a href="https://tech.meituan.com/2017/01/05/mgw.html">MGW——美团点评高性能四层负载均衡</a></p><p>好了，这篇文章，就先到这里吧，这篇文章应该是我写的最耗时的一篇文章了。。不过想想后面还有几篇文章要写，头就很大</p><p>溜了溜了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;好久没博客了，来写个简单的读论文笔记吧，这篇文章是来自 Google 2016 年发表的一篇论文 &lt;a href=&quot;https://research.google/pubs/pub44824/&quot;&gt;Maglev: A Fast and Reliable Software Network Load Balancer&lt;/a&gt; 分享了他们内部从08年开始大规模使用的软负载均衡系统的实现。里面很多很有趣的细节，我看我能写多少，算多少吧&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="水文" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/%E6%B0%B4%E6%96%87/"/>
    
    <category term="论文" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/%E6%B0%B4%E6%96%87/%E8%AE%BA%E6%96%87/"/>
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="笔记" scheme="http://manjusaka.itscoder.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="水文" scheme="http://manjusaka.itscoder.com/tags/%E6%B0%B4%E6%96%87/"/>
    
    <category term="分布式" scheme="http://manjusaka.itscoder.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    <category term="论文" scheme="http://manjusaka.itscoder.com/tags/%E8%AE%BA%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>为什么 Python 的 Type Hint 没有流行起来</title>
    <link href="http://manjusaka.itscoder.com/posts/2020/03/20/a-simple-history-about-type-hint-in-python/"/>
    <id>http://manjusaka.itscoder.com/posts/2020/03/20/a-simple-history-about-type-hint-in-python/</id>
    <published>2020-03-20T16:00:00.000Z</published>
    <updated>2020-12-31T13:40:30.529Z</updated>
    
    <content type="html"><![CDATA[<p>在知乎上看到一个很有意思的问题，<a href="https://www.zhihu.com/question/370231112/answer/1091038983">为什么TypeScript如此流行，却少见有人写带类型标注的Python？</a></p><p>虽然我没忍住在知乎上输出了答案，但是为了以防万一，我在博客上扩展，与更新一下</p><p>BTW 最近上线真的心力憔悴，写个文章放松下</p><a id="more"></a><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>其实这个答案很简单，历史包袱与 ROI，在了解为什么有这样的现象之前，首先我们要去了解 Type Hint 能给我们带来什么，然后我们需要去了解 Type Hint 的前世今生</p><p>在现在这个时间点（2020.03）来看，Type Hint 能给我们带来肉眼可见的收益是</p><ol><li>通过 annotation ，配合 IDE 的支持，能让我们在代码编辑的时候的体验更好</li><li>通过 mypy/pytype 等工具的支持，我们能在 CI/CD 流程中去集成静态类型检查</li><li>通过 pydantic 以及很多新式框架的支持，我们能够减少很多重复的工作</li></ol><p>可能大家以为从 Python 3.5 引入 <a href="https://www.python.org/dev/peps/pep-0484/">PEP 484</a> 开始，Python Type Hint 便已经成熟。但是实际上，这个时间比大家想象的短的多</p><p>好了，我们现在要去回顾一下整个 Type Hint 发展史上的关键节点</p><ol><li>PEP 3107 Function Annotations</li><li>PEP 484 Type Hints</li><li>PEP 526 Syntax for Variable Annotations</li><li>PEP 563 Postponed Evaluation of Annotations</li></ol><h3 id="PEP-3107"><a href="#PEP-3107" class="headerlink" title="PEP 3107"></a>PEP 3107</h3><p>如同前面所说，大家最开始认识 Type Hint 的时间应该是14 年 9 月提出，15 年 5 月通过的 <a href="https://www.python.org/dev/peps/pep-0484/">PEP 484</a> 。但是实际上雏形早的多，PEP 484 的语法实际上来自于 06 年提出，3.0 引入的 PEP 3107 所设计的语法，参见 <a href="https://www.python.org/dev/peps/pep-3107/">PEP 3107 – Function Annotations</a></p><p>在 PEP 3107 中，对于这个提案的目标，有这样一段描述</p><blockquote><p>Because Python’s 2.x series lacks a standard way of annotating a function’s parameters and return values, a variety of tools and libraries have appeared to fill this gap. Some utilise the decorators introduced in “PEP 318”, while others parse a function’s docstring, looking for annotations there.<br>This PEP aims to provide a single, standard way of specifying this information, reducing the confusion caused by the wide variation in mechanism and syntax that has existed until this point.</p></blockquote><p>说人话就是，为了能够给函数的参数或者返回值添加额外的元信息，大家五花八门各显神通，有用 <a href="https://www.python.org/dev/peps/pep-0318/">PEP 318</a> 装饰器的，有用 docstring 来做的。社区为了缓解这个现象，决定推出新的语法糖，来让用户能够方便的为参数签名和返回值添加额外的信息</p><p>最后形成的语法如下 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">a: <span class="string">&#x27;x&#x27;</span>, b: <span class="number">5</span> + <span class="number">6</span>, c: <span class="built_in">list</span></span>) -&gt; max(2, 9):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>是不是很眼熟？ 没错，3107 实际上奠定了后续 Type Hint 的基调</p><ol><li>可标注</li><li>作为 function/method 信息的一部分，可 inspect</li><li>runtime</li></ol><p>但是新的疑惑就来了，为什么这个提案经常被人忽略？还是，我们需要放在具体的时间点来看</p><p>这个提案提出时间最早可以追溯至06年，在 <a href="https://www.python.org/dev/peps/pep-3000/">PEP3000</a> 这个可能是 Python 历史上最著名的提案（即宣告 Python 3 的诞生）中确定在 Python 3 中引入，08年正式发布</p><p>在这个时间点下，3107 面临着两个问题：</p><ol><li>在06-08这个时间点上，社区最主要的精力都在友(ji)好(lie)的讨(si)论(bi)，我们为什么要 Python 3？以及为什么我们要迁到 Python 3</li><li>3107 实际上只是告诉大家，你可以标注，你可以方便的获取标注信息，但是怎么样去抽象一个类型的表示，如一个 int 类型的 list ，这种事，还是依靠社区自行发展，换句话说，叫做放养</li></ol><p>问题1，无解，只能依靠时间去慢慢推动。问题2，促成了 PEP 484 的诞生</p><h3 id="PEP-484"><a href="#PEP-484" class="headerlink" title="PEP 484"></a>PEP 484</h3><p><a href="https://www.python.org/dev/peps/pep-0484/">PEP 484</a> 这个提案大家应该都有一定程度上的了解了，在此不再描述提案的具体内容</p><p>PEP 484 最大的意义在于， 在继承了 PEP 3107 奠定的语法和基调之上，将 Python 的类型系统进行了合理的抽象，这也是重要的产物 <code>typing</code>，直到这时，Python 中的 type hint 才有了基本的官方规范，同时达到了基本的可用性，这个时间点是 15 年 9 月（9月13，Python 3.5.0 正式 Release）</p><p>但是实际上 PEP 484 在这个时间点也只能说基本满足使用，我来举几个被诟病的例子</p><p>首先看一段代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Optional</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    left: Optional[Node]</span><br><span class="line">    right: Optional[Node]</span><br></pre></td></tr></table></figure><p>这段代码实际上很简单对吧，一个标准的二叉树节点的描述，但是放在 PEP 484 中，这段代码暴露出两个问题</p><ol><li>无法对变量进行标注。如同我前面所说的一样，PEP 484 本质上是 PEP 3107 的一个扩展，这个时候 hint 的范围仅限于 function/method ，而在上面的代码中，在 3.5 时期，我是无法对我的 left 和 right 的变量进行标注的，一个编程语言的基本要素之一的变量，无法被 Type Hint ，那么一定程度上我们可以说这样一个 type hint 的功能没有闭环</li><li>循环引用，字面意义，在社区/StackOverflow 上如何解决 Type Hint 中的循环引用这个问题，一度让人十分头大。社区：What the fuck?</li></ol><p>所幸，Python 社区意识到了这个问题，推出了两个提案来解决这样的问题</p><h3 id="PEP-526"><a href="#PEP-526" class="headerlink" title="PEP 526"></a>PEP 526</h3><p>问题1 促成了 <a href="https://www.python.org/dev/peps/pep-0526/">PEP 526 – Syntax for Variable Annotations</a> 的诞生，16 年 8 月提出，16 年 9 月被接受。16 年 9 月在 <a href="https://bugs.python.org/issue27985">BPO-27985</a> 实现。在我印象里，这应该是 Python 社区中数的出来的争议小，接收快，实现快的 PEP 了</p><p>在 526 中，Python 正式允许大家对变量进行标注，无论是 <code>class attribute</code> 还是普通的 <code>variable</code> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    left: <span class="built_in">str</span></span><br></pre></td></tr></table></figure><p>这样是可以的，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abc</span>():</span></span><br><span class="line">    a:<span class="built_in">int</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这样也是可以的</p><p>在这个提案的基础上，Python 官方也推动了 <a href="https://www.python.org/dev/peps/pep-0557/">PEP 557 – Data Classes</a> 的落地，当然这是后话</p><p>话说回来，526 只解决了上面的问题1，没有解决问题2，这个事情，将会由 PEP 563 来解决</p><h3 id="PEP-563"><a href="#PEP-563" class="headerlink" title="PEP 563"></a>PEP 563</h3><p>为了解决循环引用的问题，Python 引入了 <a href="https://www.python.org/dev/peps/pep-0563/">PEP 563 – Postponed Evaluation of Annotations</a>，17 年 9 月社区提出，17 年 11 月被接受，18 年 1 月在 <a href="https://github.com/python/cpython/pull/4390">GH-4390</a> 中实现。</p><p>在 563 之后，我们上面的代码可以这么写了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Optional</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    left: Optional[<span class="string">&quot;Node&quot;</span>]</span><br><span class="line">    right: Optional[<span class="string">&quot;Node&quot;</span>]</span><br></pre></td></tr></table></figure><p>嗯，484 中的两个问题，终于被解决了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以 PEP 563 作为重要分割点，Python 最早在 18 年 1 月之后才初步具备完整的生态和生产可用性，如果考虑 release version，那么应该是 18 年 6 月，Python 3.7 正式发布之后的事了。</p><p>在 Python 3.6/7 之后，社区也才开始围绕 Type Hint 去构建一套生态体系，</p><p>比如利用 PEP 526 来高效的验证数据格式，参见 <a href="https://github.com/samuelcolvin/pydantic">pydantic</a> </p><p>顺带一提，这货也是目前很火的一个新型框架（也是我目前最喜欢的一个框架）FastAPI 的根基</p><p>各大公司也开始跟进，例如 Google 的 <a href="https://github.com/google/pytype">pytype</a> ，微软推出了 <a href="https://github.com/microsoft/pyright">pyright</a> 来提供在 VSCode 上的支持</p><p>还有许许多多优秀的如 starlette 这样库</p><p>直到这时，Python + Type Hint 的真正的威力才开始挥发出来。这样才开始能回答大家这样一个问题：“我为什么要切换到 Type Hint”，我猜在 IDE 里写的爽肯定不是一个重要原因</p><p>要知道，我们在做技术决策时候，一定是因为这个决策能给我们带来足够的 benefit，换句话说，有足够的 ROI，而不是单纯的因为，我们喜欢它</p><p>这样看起来，到现在，满打满算一年半不超过两年的时间。对于一个用户习惯养成周期来说，这太短了。更何况还有一大堆的 Python 2 代码在那放着23333</p><p>话说回来，作为对比，TypeScript Release 时间可以上溯至 12 年 10 月，发布 0.8 版本，当时的 TS 应该是具备了相对完整地类型系统。</p><p>TS 用了 8 年，Python 可能也还有很长的路要走</p><p>当然，这个答案也只是从技术和历史的角度聊聊这个问题。至于其余的很多因素，包括社区的博奕与妥协等，暂还不在这个答案的范围内，大家有兴趣的话，可以去 python-idea，python-dev，discuss-python 这几个地方去找一找历史上关于这几个提案的讨论，非常有意思。</p><p>最后，TS 成功还有一个原因，它有个好爸爸&amp;&amp;它爸爸有钱（逃</p><p>嗯，差不多就这样吧，最近干活干的心里憔悴的我，也就只能写点垃圾水文了压压惊，平复心情了。。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在知乎上看到一个很有意思的问题，&lt;a href=&quot;https://www.zhihu.com/question/370231112/answer/1091038983&quot;&gt;为什么TypeScript如此流行，却少见有人写带类型标注的Python？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;虽然我没忍住在知乎上输出了答案，但是为了以防万一，我在博客上扩展，与更新一下&lt;/p&gt;
&lt;p&gt;BTW 最近上线真的心力憔悴，写个文章放松下&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Python" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/Python/"/>
    
    <category term="随笔" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/Python/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Python" scheme="http://manjusaka.itscoder.com/tags/Python/"/>
    
    <category term="随笔" scheme="http://manjusaka.itscoder.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>简单聊聊 MySQL 全文索引</title>
    <link href="http://manjusaka.itscoder.com/posts/2020/03/01/talk-about-full-text-search-in-mysql/"/>
    <id>http://manjusaka.itscoder.com/posts/2020/03/01/talk-about-full-text-search-in-mysql/</id>
    <published>2020-03-01T19:30:00.000Z</published>
    <updated>2020-12-31T13:40:30.533Z</updated>
    
    <content type="html"><![CDATA[<p>最近踩 MYSQL 中文本搜索的坑踩了挺多，来写个具体的文章总结下 MYSQL 中文本搜索的一些知识点吧</p><a id="more"></a><h2 id="模糊搜索"><a href="#模糊搜索" class="headerlink" title="模糊搜索"></a>模糊搜索</h2><p>在我们是使用 MYSQL 的过程中，总会有一些模糊搜索的需求，比如我们现在有这样一张表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> `<span class="keyword">user</span>`</span><br><span class="line">(</span><br><span class="line">    `id`         <span class="type">bigint</span>(<span class="number">20</span>)   <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">    `name`       <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    `age`        <span class="type">int</span>          <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    `update_time` <span class="type">timestamp</span>    <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    `create_time` <span class="type">timestamp</span>    <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    index (`name`),</span><br><span class="line">    <span class="keyword">primary</span> <span class="keyword">key</span> (`id`)</span><br><span class="line">) engine <span class="operator">=</span> InnoDB</span><br><span class="line">  charset <span class="operator">=</span> <span class="string">&#x27;utf8mb4&#x27;</span>;</span><br></pre></td></tr></table></figure><p>现在我们需要对于 <code>name</code> 做一些模糊匹配的需求，比如我们需要去匹配 <code>name</code> 中包含 <code>草</code> 字，于是大家仔细一想，OK，写出了如下的 SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%草%&#x27;</span></span><br></pre></td></tr></table></figure><p>好了，当你行高采烈的将这段代码上线后，你发现，线上炸了，为啥？因为 MYSQL 的坑. MYSQL 的 like 查询存在这样两个限制</p><ol><li>只有前缀匹配 ‘草%’ 和后缀匹配 ‘%草’ 才会走索引，而任意匹配则不会</li><li>当无法走索引的时候，MYSQL 会遍历全表来查询数据</li></ol><p>当你一个表的数据规模很大的时候，那么暴力扫表必然会带来极大的开销</p><p>但是我们实际工作中这样的任意匹配的需求肯定很多，那么我们应该怎么做？或许可以尝试下全文搜索</p><h2 id="全文搜索"><a href="#全文搜索" class="headerlink" title="全文搜索"></a>全文搜索</h2><h3 id="简单聊聊全文搜索"><a href="#简单聊聊全文搜索" class="headerlink" title="简单聊聊全文搜索"></a>简单聊聊全文搜索</h3><p>全文搜索大家已经不太陌生了，简而言之用一种不太精确的说法就是，用一组关键词在一堆文本数据中寻找匹配项。在目前业界比较主流的全文搜索方案有：</p><ol><li>支持全文搜索的关系行数据库</li><li>Apache Lucene</li><li>基于 Apache Lucene 的 ElasticSearch</li><li>Apache Solr</li></ol><p>后两种是目前业界主要的方案，可能很多全文搜索的需求都会考虑用 ES 或者 Solr 实现。但是这样一种方法并不是无代价的。有这样几个比较现实的问题</p><ol><li>ES/Solr 在数据量比较大的情况下的运维问题，怎么样保证集群的 HA 将是一个很考研团队功底的问题</li><li>怎么样将 MYSQL 或其余数据源中的数据实时/离线 ETL 至 Search Engine 中</li><li>新增的学习与 Codebase 的维护成本。</li><li>新增一个依赖之后，对于系统整体的 HA 的保证</li></ol><p>在技术决策中，我们往往需要去衡量一个选项的 ROI 来辅助决策。如果我们面对一个比较简单的搜索场景，那么选用 ES/Solr 所带来的开销将会使其 ROI 变得相对较低。因此在一些简单的场景，我们可能会更希望利用数据库本身的能力来完成我们的需求</p><p>所幸，在 MySQL 5.5 之后，其支持了一定的全文搜索的能力</p><h3 id="MySQL-全文搜索"><a href="#MySQL-全文搜索" class="headerlink" title="MySQL 全文搜索"></a>MySQL 全文搜索</h3><p>MYSQL 全文搜索的前提是需要在表中建立一个 Full Text Index</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> `<span class="keyword">user</span>`</span><br><span class="line">    <span class="keyword">ADD</span> FULLTEXT INDEX name_index (`name`);</span><br></pre></td></tr></table></figure><p>注意全文索引，仅对类型为 <code>CHAR</code>/<code>VARCHAR</code>/<code>TEXT</code> 的字段生效。</p><p>然后，我们插入两条数据 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (name, age, createTime, updateTime)</span><br><span class="line"><span class="keyword">values</span> (<span class="string">&#x27;Jeff.S.Wang&#x27;</span>, <span class="number">18</span>, <span class="built_in">current_timestamp</span>, <span class="built_in">current_timestamp</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (name, age, createTime, updateTime)</span><br><span class="line"><span class="keyword">values</span> (<span class="string">&#x27;Jeff.Li&#x27;</span>, <span class="number">18</span>, <span class="built_in">current_timestamp</span>, <span class="built_in">current_timestamp</span>);</span><br></pre></td></tr></table></figure><p>好了，我们可以来看看 MYSQL 怎么进行全文查询了</p><p>首先，按照官方的定义，</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MATCH (col1,col2,...) AGAINST (expr [search_modifier])</span><br></pre></td></tr></table></figure><p>而 <code>search_modifier</code> 是所选取的匹配模式，在MYSQL中共有四种</p><ol><li>IN NATURAL LANGUAGE MODE 自然语言模式</li><li>IN NATURAL LANGUAGE MODE WITH QUERY EXPANSION 自然语言带扩展模式</li><li>IN BOOLEAN MODE 逻辑模式</li><li>WITH QUERY EXPANSION 扩展模式</li></ol><p>我们常用的是 <strong>自然语言模式</strong> 和 <strong>逻辑模式</strong>。</p><p>首先来聊聊 <strong>自然语言模式</strong>，很简单，顾名思义，MYSQL 会直接计算待匹配关键字，然后返回对应的值，这里引用一段官网的解释：</p><blockquote><p>By default or with the IN NATURAL LANGUAGE MODE modifier, the MATCH() function performs a natural language search for a string against a text collection. A collection is a set of one or more columns included in a FULLTEXT index. The search string is given as the argument to AGAINST(). For each row in the table, MATCH() returns a relevance value; that is, a similarity measure between the search string and the text in that row in the columns named in the MATCH() list.</p></blockquote><p>我们来写一段 SQL </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> `<span class="keyword">user</span>` </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">MATCH</span>(name) AGAINST(<span class="string">&#x27;Jeff&#x27;</span> <span class="keyword">IN</span> <span class="keyword">NATURAL</span> <span class="keyword">LANGUAGE</span> MODE)</span><br></pre></td></tr></table></figure><p>然后我们发现能得到如下的结果</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>updateTime</th><th>createTime</th></tr></thead><tbody><tr><td>1</td><td>Jeff Li</td><td>18</td><td>2020-03-01 15:38:07</td><td>2020-03-01 15:38:07</td></tr><tr><td>2</td><td>Jeff.S.Wang</td><td>18</td><td>2020-03-01 15:42:28</td><td>2020-03-01 15:42:28</td></tr></tbody></table><p>然后，我们来尝试匹配下用户的 LastName，比如我们想找一位姓 Wang 的用户</p><p>然后我们写出了如下的 SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> `<span class="keyword">user</span>` </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">MATCH</span>(name) AGAINST(<span class="string">&#x27;Jeff&#x27;</span> <span class="keyword">IN</span> <span class="keyword">NATURAL</span> <span class="keyword">LANGUAGE</span> MODE)</span><br></pre></td></tr></table></figure><p>得到如下结果</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>updateTime</th><th>createTime</th></tr></thead><tbody><tr><td>2</td><td>Jeff.S.Wang</td><td>18</td><td>2020-03-01 15:42:28</td><td>2020-03-01 15:42:28</td></tr></tbody></table><p>然后我们开始尝试，去搜索一位姓 Li 的用户，然后我们写下了，如下的 SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> `<span class="keyword">user</span>` </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">MATCH</span>(name) AGAINST(<span class="string">&#x27;Li&#x27;</span> <span class="keyword">IN</span> <span class="keyword">NATURAL</span> <span class="keyword">LANGUAGE</span> MODE)</span><br></pre></td></tr></table></figure><p>然后我们发现，什么结果都没有？？？？？WTF？Why？</p><p>原因在于分词粒度，在我们进行录入新数据的时候，MySQL 会将我们的索引字段中的数据按照一定的分词基准长度进行分词，然后存储以待查询，其有四个参数控制分词的长度</p><ol><li>innodb_ft_min_token_size </li><li>innodb_ft_max_token_size </li><li>ft_min_word_len 作用同上，不过是针对 MyISAM 引擎</li><li>ft_max_word_len </li></ol><p>以 InnoDB 为例，其默认的 <code>innodb_ft_min_token_size</code> 的值是 3，换句话说在我们之前的录入的数据中，我们数据中存储的分词后的单元是</p><ol><li>Jeff</li><li>Wang</li></ol><p>所以我们第二次搜索没有结果，现在我们将 MySQL 的参数修改一下后，重新执行一下？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> `<span class="keyword">user</span>` </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">MATCH</span>(name) AGAINST(<span class="string">&#x27;Li&#x27;</span> <span class="keyword">IN</span> <span class="keyword">NATURAL</span> <span class="keyword">LANGUAGE</span> MODE)</span><br></pre></td></tr></table></figure><p>还还还是不行？？？？</p><p>查了下官方文档后，我们发现有这样的描述</p><blockquote><p>Some variable changes require that you rebuild the FULLTEXT indexes in your tables. Instructions for doing so are given later in this section.</p></blockquote><p>而索引分词粒度也包含在其中，，所以我们需要删除/rebuild索引，，然后重新执行（有点坑。。）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> `<span class="keyword">user</span>` </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">MATCH</span>(name) AGAINST(<span class="string">&#x27;Li&#x27;</span> <span class="keyword">IN</span> <span class="keyword">NATURAL</span> <span class="keyword">LANGUAGE</span> MODE)</span><br></pre></td></tr></table></figure><p>好了，现在正常的返回结果了</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>updateTime</th><th>createTime</th></tr></thead><tbody><tr><td>1</td><td>Jeff Li</td><td>18</td><td>2020-03-01 15:38:07</td><td>2020-03-01 15:38:07</td></tr></tbody></table><p>现在让我们来聊聊另一种匹配模式，BOOLEAN MODE </p><p>逻辑模式允许我们用一些操作符来检索一些数据，我们举一些常见的例子，剩下大家可以去看看 MYSQL 官方文档</p><ol><li>AGAINST(‘Jeff Li’ IN BOOLEAN MODE) 表示，要么存在 <strong>Jeff</strong> 要么存在 <strong>Li</strong></li><li>AGAINST(‘+Jeff’ IN BOOLEAN MODE) 表示，必须存在 <strong>Jeff</strong></li><li>AGAINST(‘+Jeff -Li’ IN BOOLEAN MODE) 表示 必须存在 <strong>Jeff</strong> 且 <strong>Li</strong> 必须不存在</li></ol><p>我们来执行下这几个 SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> `<span class="keyword">user</span>` </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">MATCH</span>(name) AGAINST(<span class="string">&#x27;Jeff Li&#x27;</span> <span class="keyword">IN</span> <span class="type">BOOLEAN</span> MODE)</span><br></pre></td></tr></table></figure><p>结果</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>updateTime</th><th>createTime</th></tr></thead><tbody><tr><td>1</td><td>Jeff Li</td><td>18</td><td>2020-03-01 15:38:07</td><td>2020-03-01 15:38:07</td></tr><tr><td>2</td><td>Jeff.S.Wang</td><td>18</td><td>2020-03-01 15:42:28</td><td>2020-03-01 15:42:28</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> `<span class="keyword">user</span>` </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">MATCH</span>(name) AGAINST(<span class="string">&#x27;+Jeff&#x27;</span> <span class="keyword">IN</span> <span class="type">BOOLEAN</span> MODE)</span><br></pre></td></tr></table></figure><p>结果</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>updateTime</th><th>createTime</th></tr></thead><tbody><tr><td>1</td><td>Jeff Li</td><td>18</td><td>2020-03-01 15:38:07</td><td>2020-03-01 15:38:07</td></tr><tr><td>2</td><td>Jeff.S.Wang</td><td>18</td><td>2020-03-01 15:42:28</td><td>2020-03-01 15:42:28</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> `<span class="keyword">user</span>` </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">MATCH</span>(name) AGAINST(<span class="string">&#x27;+Jeff -Li&#x27;</span> <span class="keyword">IN</span> <span class="type">BOOLEAN</span> MODE) </span><br></pre></td></tr></table></figure><p>结果</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>updateTime</th><th>createTime</th></tr></thead><tbody><tr><td>2</td><td>Jeff.S.Wang</td><td>18</td><td>2020-03-01 15:42:28</td><td>2020-03-01 15:42:28</td></tr></tbody></table><p>好，现在我们有一些中文搜索的需求，我们先来插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (name, age, createTime, updateTime)</span><br><span class="line"><span class="keyword">values</span> (<span class="string">&#x27;奥特曼&#x27;</span>, <span class="number">18</span>, <span class="built_in">current_timestamp</span>, <span class="built_in">current_timestamp</span>);</span><br></pre></td></tr></table></figure><p>现在我们来搜索姓<strong>奥</strong>的用户，我们按照之前的 Guide 写出了如下的 SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> `<span class="keyword">user</span>`</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">MATCH</span>(name) AGAINST(<span class="string">&#x27;+奥&#x27;</span> <span class="keyword">IN</span> <span class="type">BOOLEAN</span> MODE)</span><br></pre></td></tr></table></figure><p>然后我们惊喜的发现，又又又没有结果？？？Why？？？</p><p>其实还是之前提到过的一个问题，<strong>分词</strong>，MySQL 的默认的分词引擎，只支持英文的分词，而不支持中文分词，那么没有分词，没有搜索？怎么办？</p><p>在 MySQL 5.7 之后，MySQL 提供了 <code>ngram</code> 这个组件来帮助我们进行中文分词，使用很简单</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> `<span class="keyword">user</span>`</span><br><span class="line">    <span class="keyword">add</span> fulltext index name_index (`name`) <span class="keyword">with</span> parser ngram;</span><br></pre></td></tr></table></figure><p>这里有几点要注意：</p><ol><li>ngram 不仅适用于中文，按照官方文档，韩文，日文也都支持</li><li>一个字段上只能有一个全文索引，所以需要删除原有全文索引</li></ol><p>同时，如同默认的分词一样，<strong>ngram</strong> 也受分词粒度的限制，不过 <strong>ngram</strong> 的设置参数是</p><ol><li>ngram_token_size</li></ol><p>我们按照需要设置即可</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>全文搜索对于日常开发来讲，是一个很常见的需求，在我们的 infra 没法让我们去安心的使用外部组件的时候，利用数据库提供的能力也许是个不错的选项。不过还是有很多的坑要踩，有很多的参数要优化。。BTW 阿里云的 RDS 设置真的难用（小声吐槽</p><p>好了。。我的拖延症实在没救了。。而且这两天牙疼真的无奈，呜呜呜呜呜</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近踩 MYSQL 中文本搜索的坑踩了挺多，来写个具体的文章总结下 MYSQL 中文本搜索的一些知识点吧&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Python" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/Python/"/>
    
    <category term="MySQL" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/Python/MySQL/"/>
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Python" scheme="http://manjusaka.itscoder.com/tags/Python/"/>
    
    <category term="MySQL" scheme="http://manjusaka.itscoder.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Weekly Contest 176 题解</title>
    <link href="http://manjusaka.itscoder.com/posts/2020/02/23/leetcode-weekly-contest-176/"/>
    <id>http://manjusaka.itscoder.com/posts/2020/02/23/leetcode-weekly-contest-176/</id>
    <published>2020-02-23T21:00:00.000Z</published>
    <updated>2020-12-31T13:40:30.529Z</updated>
    
    <content type="html"><![CDATA[<p>emmmm，我的拖延症没救了，顺便加上这周沉迷 Kotlin ，这篇本应该周一就写完的题解拖到现在，= =然而这周双周赛，，我又得写两篇题解了。。。</p><a id="more"></a><h2 id="1351-Count-Negative-Numbers-in-a-Sorted-Matrix"><a href="#1351-Count-Negative-Numbers-in-a-Sorted-Matrix" class="headerlink" title="1351. Count Negative Numbers in a Sorted Matrix"></a>1351. Count Negative Numbers in a Sorted Matrix</h2><p>题面：</p><blockquote><p>Given a m * n matrix grid which is sorted in non-increasing order both row-wise and column-wise.<br>Return the number of negative numbers in grid.</p></blockquote><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]</span><br><span class="line">Output: 8</span><br><span class="line">Explanation: There are 8 negatives number in the matrix.</span><br></pre></td></tr></table></figure><p>题面很简单，给定一个矩阵，矩阵横/纵向都是递减的，求这个矩阵中负数的个数，这个题，因为横/纵向的数据规模都是小于100的，那就没啥说的了，，直接暴力，横向遍历，然后遇到负数就停止遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countNegatives</span>(<span class="params">self, grid: List[List[<span class="built_in">int</span>]]</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> grid:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        n_length = <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> grid:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n_length):</span><br><span class="line">                <span class="keyword">if</span> item[i] &lt; <span class="number">0</span>:</span><br><span class="line">                    result += n_length - i</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="1352-Product-of-the-Last-K-Numbers"><a href="#1352-Product-of-the-Last-K-Numbers" class="headerlink" title="1352. Product of the Last K Numbers"></a>1352. Product of the Last K Numbers</h2><p>题面:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Implement the class ProductOfNumbers that supports two methods:</span><br><span class="line"></span><br><span class="line">1. add(int num)</span><br><span class="line"></span><br><span class="line">Adds the number num to the back of the current list of numbers.</span><br><span class="line">2. getProduct(int k)</span><br><span class="line"></span><br><span class="line">Returns the product of the last k numbers in the current list.</span><br><span class="line">You can assume that always the current list has at least k numbers.</span><br><span class="line">At any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;ProductOfNumbers&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;getProduct&quot;,&quot;getProduct&quot;,&quot;getProduct&quot;,&quot;add&quot;,&quot;getProduct&quot;]</span><br><span class="line">[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]</span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line">[null,null,null,null,null,null,20,40,0,null,32]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">ProductOfNumbers productOfNumbers = new ProductOfNumbers();</span><br><span class="line">productOfNumbers.add(3);        // [3]</span><br><span class="line">productOfNumbers.add(0);        // [3,0]</span><br><span class="line">productOfNumbers.add(2);        // [3,0,2]</span><br><span class="line">productOfNumbers.add(5);        // [3,0,2,5]</span><br><span class="line">productOfNumbers.add(4);        // [3,0,2,5,4]</span><br><span class="line">productOfNumbers.getProduct(2); // return 20. The product of the last 2 numbers is 5 * 4 = 20</span><br><span class="line">productOfNumbers.getProduct(3); // return 40. The product of the last 3 numbers is 2 * 5 * 4 = 40</span><br><span class="line">productOfNumbers.getProduct(4); // return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0</span><br><span class="line">productOfNumbers.add(8);        // [3,0,2,5,4,8]</span><br><span class="line">productOfNumbers.getProduct(2); // return 32. The product of the last 2 numbers is 4 * 8 = 32 </span><br></pre></td></tr></table></figure><p>题面很简单，设计一个数据结构，提供一个 <code>add</code> 方法，让用户能够往里面添加速度，提供一个 <code>getProduct</code> 方法，让用户能求倒数K个数的乘积，这题没啥好说的，直接暴力写，中间加个 hashmap 作为缓存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List, Dict</span><br><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductOfNumbers</span>:</span></span><br><span class="line">    _value: List[<span class="built_in">int</span>]</span><br><span class="line">    _cache_result: Dict[<span class="built_in">int</span>, <span class="built_in">int</span>]</span><br><span class="line">    _cache_index: List[<span class="built_in">int</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._value = []</span><br><span class="line">        self._cache_result = &#123;&#125;</span><br><span class="line">        self._cache_index = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self._value.append(num)</span><br><span class="line">        self._cache_index.clear()</span><br><span class="line">        self._cache_result.clear()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getProduct</span>(<span class="params">self, k: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> k <span class="keyword">in</span> self._cache_result:</span><br><span class="line">            <span class="keyword">return</span> self._cache_result[k]</span><br><span class="line">        cache_index = bisect.bisect(self._cache_index, k) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> cache_index &gt;= <span class="number">0</span>:</span><br><span class="line">            last_k = self._cache_index[cache_index]</span><br><span class="line">            result = self._cache_result[last_k]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, cache_index + <span class="number">1</span>):</span><br><span class="line">                temp_last_k = last_k + i</span><br><span class="line">                <span class="keyword">if</span> temp_last_k &gt;= <span class="built_in">len</span>(self._value):</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                result *= self._value[-last_k]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp_value = (</span><br><span class="line">                self._value[-<span class="number">1</span> : -k - <span class="number">1</span> : -<span class="number">1</span>] <span class="keyword">if</span> k &lt;= <span class="built_in">len</span>(self._value) <span class="keyword">else</span> self._value</span><br><span class="line">            )</span><br><span class="line">            result = reduce(mul, temp_value, <span class="number">1</span>)</span><br><span class="line">        bisect.bisect_left(self._cache_index, k)</span><br><span class="line">        self._cache_result[k] = result</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="1353-Maximum-Number-of-Events-That-Can-Be-Attended"><a href="#1353-Maximum-Number-of-Events-That-Can-Be-Attended" class="headerlink" title="1353. Maximum Number of Events That Can Be Attended"></a>1353. Maximum Number of Events That Can Be Attended</h2><p>题面：</p><blockquote><p>Given an array of events where events[i] = [startDayi, endDayi]. Every event i starts at startDayi and ends at endDayi.<br>You can attend an event i at any day d where startTimei &lt;= d &lt;= endTimei. Notice that you can only attend one event at any time d.<br>Return the maximum number of events you can attend.</p></blockquote><p>示例</p><p><img src="https://user-images.githubusercontent.com/7054676/75112667-e110d200-5680-11ea-8686-80f04332fe44.png" alt="image"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: events = [[1,2],[2,3],[3,4]]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: You can attend all the three events.</span><br><span class="line">One way to attend them all is as shown.</span><br><span class="line">Attend the first event on day 1.</span><br><span class="line">Attend the second event on day 2.</span><br><span class="line">Attend the third event on day 3.</span><br></pre></td></tr></table></figure><p>给定一个数组，数组中每个元素 x 代表一个活动，x[0], x[i] 代表该活动的起始与结束时间，一个用户一天只能参加一个活动，求用户最多能参加多少个活动。经典的一个贪心题目，首先对活动列表以结束时间进行排序，然后依次遍历每个时间，确认具体哪一天可以参加，整体时间复杂度为 O(max(nlogn,n*m))</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List, Dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxEvents</span>(<span class="params">self, events: List[List[<span class="built_in">int</span>]]</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> events:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        events_size = <span class="built_in">len</span>(events)</span><br><span class="line">        <span class="keyword">if</span> events_size == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        events = <span class="built_in">sorted</span>(events)</span><br><span class="line">        _day_map: Dict[<span class="built_in">str</span>, <span class="built_in">bool</span>] = &#123;&#125;</span><br><span class="line">        _event_map: Dict[<span class="built_in">int</span>, <span class="built_in">bool</span>] = &#123;&#125;</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(events_size):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(events[i][<span class="number">0</span>], events[i][<span class="number">1</span>]+<span class="number">1</span>):</span><br><span class="line">                temp = <span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(j)</span><br><span class="line">                <span class="keyword">if</span> temp <span class="keyword">not</span> <span class="keyword">in</span> _day_map <span class="keyword">and</span> i <span class="keyword">not</span> <span class="keyword">in</span> _event_map:</span><br><span class="line">                    count += <span class="number">1</span></span><br><span class="line">                    _day_map[temp] = <span class="literal">True</span></span><br><span class="line">                    _event_map[i] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><h2 id="1354-Construct-Target-Array-With-Multiple-Sums"><a href="#1354-Construct-Target-Array-With-Multiple-Sums" class="headerlink" title="1354. Construct Target Array With Multiple Sums"></a>1354. Construct Target Array With Multiple Sums</h2><p>题面</p><blockquote><p>Given an array of integers target. From a starting array, A consisting of all 1’s, you may perform the following procedure :</p><ul><li>let x be the sum of all elements currently in your array.</li><li>choose index i, such that 0 &lt;= i &lt; target.size and set the value of A at index i to x.</li><li>You may repeat this procedure as many times as needed.<br>Return True if it is possible to construct the target array from A otherwise return False.</li></ul></blockquote><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: target = [9,3,5]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Start with [1, 1, 1] </span><br><span class="line">[1, 1, 1], sum = 3 choose index 1</span><br><span class="line">[1, 3, 1], sum = 5 choose index 2</span><br><span class="line">[1, 3, 5], sum = 9 choose index 0</span><br><span class="line">[9, 3, 5] Done</span><br></pre></td></tr></table></figure><p>这题算是一个数学题吧，我们首先知道数组中所有的元素的和一定大于数组中每个元素（这不是废话），然后我们假定有这样一个数组 [1,1,9,17,63] ，我们可以往回迭代上一个数组结构是 [1,1,9.17,33] ，然后我们还可以向前迭代一次 [1,1,9,17,5]  然后当前的数字已经不再是数组中最大的数字，于是我们开始寻找下一个数组中最大的数字进行迭代</p><p>这里我们也可以发现，数组中最大数字的最原始版本的值是当前数字对其余数字的和的模，于是我们就这样一直迭代就 OK 了</p><p>好了，上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPossible</span>(<span class="params">self, target: List[<span class="built_in">int</span>]</span>) -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> target:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        total = <span class="built_in">sum</span>(target)</span><br><span class="line">        target = <span class="built_in">sorted</span>([-x <span class="keyword">for</span> x <span class="keyword">in</span> target])</span><br><span class="line">        heapq.heapify(target)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            a = -heapq.heappop(target)</span><br><span class="line">            total -= a</span><br><span class="line">            <span class="keyword">if</span> a == <span class="number">1</span> <span class="keyword">or</span> total == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> a &lt; total <span class="keyword">or</span> total == <span class="number">0</span> <span class="keyword">or</span> a % total == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            a %= total</span><br><span class="line">            total += a</span><br><span class="line">            heapq.heappush(target, -a)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次的题还是周赛的常规水平，然而我刷题实在是太少了QAQ</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;emmmm，我的拖延症没救了，顺便加上这周沉迷 Kotlin ，这篇本应该周一就写完的题解拖到现在，= =然而这周双周赛，，我又得写两篇题解了。。。&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="leetcode" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/leetcode/"/>
    
    <category term="刷题" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/leetcode/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Python" scheme="http://manjusaka.itscoder.com/tags/Python/"/>
    
    <category term="leetcode" scheme="http://manjusaka.itscoder.com/tags/leetcode/"/>
    
    <category term="刷题" scheme="http://manjusaka.itscoder.com/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode BiWeekly Contest 19 题解</title>
    <link href="http://manjusaka.itscoder.com/posts/2020/02/11/leetcode-biweekly-contest-19/"/>
    <id>http://manjusaka.itscoder.com/posts/2020/02/11/leetcode-biweekly-contest-19/</id>
    <published>2020-02-11T01:00:00.000Z</published>
    <updated>2020-12-31T13:40:30.529Z</updated>
    
    <content type="html"><![CDATA[<p>例行 Leetcode 周赛，这周双周赛，两场赛打下来，有点酸爽，先写个 BiWeekly 19 Contest 的题解吧</p><a id="more"></a><h2 id="1342-Number-of-Steps-to-Reduce-a-Number-to-Zer"><a href="#1342-Number-of-Steps-to-Reduce-a-Number-to-Zer" class="headerlink" title="1342. Number of Steps to Reduce a Number to Zer"></a>1342. Number of Steps to Reduce a Number to Zer</h2><p>题面：</p><blockquote><p>Given a non-negative integer num, return the number of steps to reduce it to zero. If the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it.</p></blockquote><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input: num = 14</span><br><span class="line">Output: 6</span><br><span class="line">Explanation:</span><br><span class="line">    Step 1) 14 is even; divide by 2 and obtain 7. </span><br><span class="line">    Step 2) 7 is odd; subtract 1 and obtain 6.</span><br><span class="line">    Step 3) 6 is even; divide by 2 and obtain 3. </span><br><span class="line">    Step 4) 3 is odd; subtract 1 and obtain 2. </span><br><span class="line">    Step 5) 2 is even; divide by 2 and obtain 1. </span><br><span class="line">    Step 6) 1 is odd; subtract 1 and obtain 0.</span><br></pre></td></tr></table></figure><p>这个题题面很简单，一个非负整数，偶数除2，奇数减1，求需要多少步到0</p><p>暴力写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numberOfSteps</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> count</span><br><span class="line">        result = num</span><br><span class="line">        <span class="keyword">while</span> result &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> result % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                result = <span class="built_in">int</span>(result / <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result -= <span class="number">1</span></span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count + <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="Number-of-Sub-arrays-of-Size-K-and-Average-Greater-than-or-Equal-to-Threshold"><a href="#Number-of-Sub-arrays-of-Size-K-and-Average-Greater-than-or-Equal-to-Threshold" class="headerlink" title="Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold"></a>Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold</h2><p>题面：</p><blockquote><p>Given an array of integers arr and two integers k and threshold.<br>Return the number of sub-arrays of size k and average greater than or equal to threshold.</p></blockquote><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold)</span><br></pre></td></tr></table></figure><p>给定一个数组和一个长度 k，和一个阈值 threshold ，求这个数组中的所有长度为 K 且平均数大于等于阈值的子数组的个数。这个题，暴力写很简单，一个简单的数组的拆分，<code>sum(arr[i:i+k])/k &gt;= threshold</code> 即可，但是这里有个问题，如果实时求和，那么时间复杂度为 O(M*K) M 为数组的长度，这个时候暴力会 T </p><p>因此需要做个小技巧的优化。可以考虑这样这样一个做法，假设当前 i 及其后 k 个数的和为 sum[i]，那么有这样一个公式，sum[i]=sum[i-1]-arr[i]+arr[i+k-1]，这样每次计算和都是 O(1) 的复杂度，那么整体就是一个 O(N) 的做法</p><p>好了，暴力开写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numOfSubarrays</span>(<span class="params">self, arr: List[<span class="built_in">int</span>], k: <span class="built_in">int</span>, threshold: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> arr:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        length = <span class="built_in">len</span>(arr)</span><br><span class="line">        sum_threshold = [<span class="number">0.0</span>] * length</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        last_index = length</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length - k, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> i == length - k:</span><br><span class="line">                total_sum = <span class="built_in">sum</span>(arr[i:i + k])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                total_sum = sum_threshold[i + <span class="number">1</span>] - arr[last_index] + arr[i]</span><br><span class="line">            sum_threshold[i] = total_sum</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> total_sum / k &gt;= threshold:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            last_index -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><h3 id="1344-Angle-Between-Hands-of-a-Clock"><a href="#1344-Angle-Between-Hands-of-a-Clock" class="headerlink" title="1344. Angle Between Hands of a Clock"></a>1344. Angle Between Hands of a Clock</h3><p>题面：</p><blockquote><p>Given two numbers, hour and minutes. Return the smaller angle (in sexagesimal units) formed between the hour and the minute hand.</p></blockquote><p>示例：</p><p><img src="https://user-images.githubusercontent.com/7054676/74172911-0b6b9400-4c6c-11ea-8c8b-07e22630428b.png" alt="image"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: hour = 12, minutes = 30</span><br><span class="line">Output: 165</span><br></pre></td></tr></table></figure><p>求某个时刻，时针与分针的夹角，，，啊，，我的上帝呀，一度梦回小升初。。。一个数学题，首先科普如下知识</p><ol><li><p>普通钟表相当于圆，其时针或分针走一圈均相当于走过360°角；</p></li><li><p>钟表上的每一个大格（时针的一小时或分针的5分钟）对应的角度是：360°/12=30°；</p></li><li><p>时针每走过1分钟对应的角度应为：360°/(12*60)=0.5°；</p></li><li><p>分针每走过1分钟对应的角度应为：360°/60=6°。</p></li></ol><p>好了，那么就暴力做吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">angleClock</span>(<span class="params">self, hour: <span class="built_in">int</span>, minutes: <span class="built_in">int</span></span>) -&gt; float:</span></span><br><span class="line">        hour %= <span class="number">12</span></span><br><span class="line">        result = <span class="built_in">abs</span>((minutes * <span class="number">6</span>) - (hour * <span class="number">30</span> + minutes * <span class="number">0.5</span>))</span><br><span class="line">        <span class="keyword">return</span> result <span class="keyword">if</span> result &lt; <span class="number">360</span> <span class="keyword">else</span> <span class="number">360</span> - result</span><br></pre></td></tr></table></figure><h2 id="1345-Jump-Game-IV"><a href="#1345-Jump-Game-IV" class="headerlink" title="1345. Jump Game IV"></a>1345. Jump Game IV</h2><p>题面：</p><blockquote><p>Given an array of integers arr, you are initially positioned at the first index of the array.<br>In one step you can jump from index i to index:</p><ol><li>i + 1 where: i + 1 &lt; arr.length.</li><li>i - 1 where: i - 1 &gt;= 0.</li><li>j where: arr[i] == arr[j] and i != j.<br>Return the minimum number of steps to reach the last index of the array.<br>Notice that you can not jump outside of the array at any time.</li></ol></blockquote><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: arr = [100,-23,-23,404,100,23,23,23,3,404]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: You need three jumps from index 0 --&gt; 4 --&gt; 3 --&gt; 9. Note that index 9 is the last index of the array.</span><br></pre></td></tr></table></figure><p>还是跳格子，给定一个数组，里面会有一些具体的值，现在从 index = 0 的地方起跳，跳跃规则如下：</p><ol><li><p>在 i+1 或 i-1 都在数组的范围内</p></li><li><p>如果存在 index=j 且 arr[i]==arr[j] 且 i!=j 的时候，可以直接从 i 跳到 j</p></li></ol><p>求从 index=0 跳到 index=arr.length-1 最小的次数</p><p>这题我还是没 A，后面琢磨了下，一个搜索的题目</p><ol><li><p>构建一个字典，值为key，index 为 value（相同的值之间可以直接跳）</p></li><li><p>利用一个 set 来保存跳过的点</p></li><li><p>从 index = 0 开始进行 BFS ，求每个点在一步之内可以跳到哪个点，然后不断的 BFS  直到到达终点</p></li><li><p>更新被访问过的点</p></li></ol><p>emmmm，好吧 BFS ，开写吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List, Set</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minJumps</span>(<span class="params">self, arr: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        length = <span class="built_in">len</span>(arr)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> arr <span class="keyword">or</span> length == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        value_index = collections.defaultdict(<span class="built_in">list</span>)</span><br><span class="line">        <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(arr):</span><br><span class="line">            value_index[value].append(index)</span><br><span class="line">        visited: Set[<span class="built_in">int</span>] = <span class="built_in">set</span>()</span><br><span class="line">        traversal_queue = collections.deque([(<span class="number">0</span>, <span class="number">0</span>)])</span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> traversal_queue:</span><br><span class="line">            next_step_queue = collections.deque()</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(traversal_queue)):</span><br><span class="line">                cur_index, cur_step = traversal_queue.popleft()</span><br><span class="line">                cur_value = arr[cur_index]</span><br><span class="line">                visited.add(cur_index)</span><br><span class="line">                <span class="keyword">for</span> next_index <span class="keyword">in</span> [cur_index + <span class="number">1</span>, cur_index - <span class="number">1</span>] + value_index[</span><br><span class="line">                    cur_value</span><br><span class="line">                ]:</span><br><span class="line">                    <span class="keyword">if</span> (length &gt; next_index &gt;= <span class="number">0</span>) <span class="keyword">and</span> (next_index <span class="keyword">not</span> <span class="keyword">in</span> visited):</span><br><span class="line">                        <span class="keyword">if</span> next_index == length - <span class="number">2</span>:</span><br><span class="line">                            <span class="keyword">return</span> cur_step + <span class="number">2</span></span><br><span class="line">                        <span class="keyword">if</span> next_index == length - <span class="number">1</span>:</span><br><span class="line">                            <span class="keyword">return</span> cur_step + <span class="number">1</span></span><br><span class="line">                        next_step_queue.append((next_index, cur_step + <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">del</span> value_index[cur_value]</span><br><span class="line">            traversal_queue = next_step_queue</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这周的题，还是不难，但是需要小心，比如第二题我太大意直接暴力吃了一发T，然后第三题没仔细读题（求最小的度数）吃了一发 WA，不过和第二天周赛比起来，真的是幸福，175 第三题的题面直接让心态崩了，，明天写题解。</p><p>好了，滚去睡觉</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;例行 Leetcode 周赛，这周双周赛，两场赛打下来，有点酸爽，先写个 BiWeekly 19 Contest 的题解吧&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="leetcode" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/leetcode/"/>
    
    <category term="刷题" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/leetcode/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Python" scheme="http://manjusaka.itscoder.com/tags/Python/"/>
    
    <category term="leetcode" scheme="http://manjusaka.itscoder.com/tags/leetcode/"/>
    
    <category term="刷题" scheme="http://manjusaka.itscoder.com/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Dynamic Query for Spring Data JPA</title>
    <link href="http://manjusaka.itscoder.com/posts/2020/02/03/dynamic-query-for-spring-jpa/"/>
    <id>http://manjusaka.itscoder.com/posts/2020/02/03/dynamic-query-for-spring-jpa/</id>
    <published>2020-02-03T02:00:00.000Z</published>
    <updated>2020-12-31T13:40:30.529Z</updated>
    
    <content type="html"><![CDATA[<p>今天正好遇到一个 Spring Data Jpa 中很有趣的问题，干脆睡前写个博客来记录一下</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>假设我们有这样一张表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> `<span class="keyword">user</span>`</span><br><span class="line">(</span><br><span class="line">    `id`         <span class="type">bigint</span>(<span class="number">20</span>)   <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">    `name`       <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    `age`        <span class="type">int</span>          <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    `updateTime` <span class="type">timestamp</span>    <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    `createTime` <span class="type">timestamp</span>    <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    <span class="keyword">primary</span> <span class="keyword">key</span> (`id`)</span><br><span class="line">) engine <span class="operator">=</span> InnoDB</span><br><span class="line">  charset <span class="operator">=</span> <span class="string">&#x27;utf8mb4&#x27;</span>;</span><br></pre></td></tr></table></figure><p>现在有这样一个场景：根据字段拼接查询，当 name 的值不为空的时候，需要依据当前 name 进查询，如果 age 不为空则同理，如果两者都不为空，则需要依据所有条件进行查询</p><p>在 MyBatis 中，可以利用其提供给的语法进行 SQL 的动态拼接</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天正好遇到一个 Spring Data Jpa 中很有趣的问题，干脆睡前写个博客来记录一下&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="leetcode" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/leetcode/"/>
    
    <category term="刷题" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/leetcode/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Python" scheme="http://manjusaka.itscoder.com/tags/Python/"/>
    
    <category term="leetcode" scheme="http://manjusaka.itscoder.com/tags/leetcode/"/>
    
    <category term="刷题" scheme="http://manjusaka.itscoder.com/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Weekly Contest 174 题解</title>
    <link href="http://manjusaka.itscoder.com/posts/2020/02/02/leetcode-weekly-contest-174/"/>
    <id>http://manjusaka.itscoder.com/posts/2020/02/02/leetcode-weekly-contest-174/</id>
    <published>2020-02-02T15:00:00.000Z</published>
    <updated>2020-12-31T13:40:30.529Z</updated>
    
    <content type="html"><![CDATA[<p>最近因为生病好久没刷题，今早开始打了一场 Leetcode 的周赛，来写个题解，今早状态还行，，BTW 以后每周都会打周赛，争取写题解</p><a id="more"></a><h2 id="Leetcode-1341-The-K-Weakest-Rows-in-a-Matrix"><a href="#Leetcode-1341-The-K-Weakest-Rows-in-a-Matrix" class="headerlink" title="Leetcode 1341. The K Weakest Rows in a Matrix"></a>Leetcode 1341. The K Weakest Rows in a Matrix</h2><p>描述：</p><blockquote><p>Given a m * n matrix mat of ones (representing soldiers) and zeros (representing civilians), return the indexes of the k weakest rows in the matrix ordered from the weakest to the strongest.<br>A row i is weaker than row j, if the number of soldiers in row i is less than the number of soldiers in row j, or they have the same number of soldiers but i is less than j. Soldiers are always stand in the frontier of a row, that is, always ones may appear first and then zeros.</p></blockquote><p>Example 1:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Input: mat = </span><br><span class="line">[[1,1,0,0,0],</span><br><span class="line"> [1,1,1,1,0],</span><br><span class="line"> [1,0,0,0,0],</span><br><span class="line"> [1,1,0,0,0],</span><br><span class="line"> [1,1,1,1,1]], </span><br><span class="line">k = 3</span><br><span class="line">Output: [2,0,3]</span><br><span class="line">Explanation: </span><br><span class="line">The number of soldiers for each row is: </span><br><span class="line">row 0 -&gt; 2 </span><br><span class="line">row 1 -&gt; 4 </span><br><span class="line">row 2 -&gt; 1 </span><br><span class="line">row 3 -&gt; 2 </span><br><span class="line">row 4 -&gt; 5 </span><br><span class="line">Rows ordered from the weakest to the strongest are [2,0,3,1,4]</span><br></pre></td></tr></table></figure><p>题面很简单，其实这道题就是二进制的处理，Python 里面就暴力出奇迹了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kWeakestRows</span>(<span class="params">self, mat: List[List[<span class="built_in">int</span>]], k: <span class="built_in">int</span></span>) -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> mat:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        number = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mat)):</span><br><span class="line">            number.append((<span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join([<span class="built_in">str</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> mat[i]]), <span class="number">2</span>), i))</span><br><span class="line">        number.sort()</span><br><span class="line">        <span class="keyword">return</span> [x <span class="keyword">for</span> _, x <span class="keyword">in</span> number[<span class="number">0</span>:k]]</span><br></pre></td></tr></table></figure><h2 id="1342-Reduce-Array-Size-to-The-Half"><a href="#1342-Reduce-Array-Size-to-The-Half" class="headerlink" title="1342. Reduce Array Size to The Half"></a>1342. Reduce Array Size to The Half</h2><p>描述：</p><blockquote><p>Given an array arr.  You can choose a set of integers and remove all the occurrences of these integers in the array.<br>Return the minimum size of the set so that at least half of the integers of the array are removed.</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: arr = [3,3,3,3,5,5,5,2,2,7]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: Choosing &#123;3,7&#125; will make the new array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the old array).</span><br><span class="line">Possible sets of size 2 are &#123;3,5&#125;,&#123;3,2&#125;,&#123;5,2&#125;.</span><br><span class="line">Choosing set &#123;2,7&#125; is not possible as it will make the new array [3,3,3,3,5,5,5] which has size greater than half of the size of the old array.</span><br></pre></td></tr></table></figure><p>这个题题面也很简单，给定一个数组，选择一组数字移除，被移除后的数组数量小于等于之前的一半，求最少选择多少数字能达到要求</p><p>哈希表，O(N) 的做法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minSetSize</span>(<span class="params">self, arr: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> arr:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        counter = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">            counter[i] = counter.setdefault(i, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        counter = &#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">sorted</span>(counter.items(), key=<span class="keyword">lambda</span> item: item[<span class="number">1</span>], reverse=<span class="literal">True</span>)&#125;</span><br><span class="line">        total_count = <span class="number">0</span></span><br><span class="line">        result_count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, count <span class="keyword">in</span> counter.items():</span><br><span class="line">            total_count += count</span><br><span class="line">            result_count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> total_count &gt;= <span class="built_in">len</span>(arr) / <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> result_count</span><br></pre></td></tr></table></figure><h3 id="1343-Maximum-Product-of-Splitted-Binary-Tree"><a href="#1343-Maximum-Product-of-Splitted-Binary-Tree" class="headerlink" title="1343. Maximum Product of Splitted Binary Tree"></a>1343. Maximum Product of Splitted Binary Tree</h3><p>描述：</p><blockquote><p>Given a binary tree root. Split the binary tree into two subtrees by removing 1 edge such that the product of the sums of the subtrees are maximized.<br>Since the answer may be too large, return it modulo 10^9 + 7.</p></blockquote><p>Example 1:</p><p><img src="https://assets.leetcode.com/uploads/2020/01/21/sample_1_1699.png"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [1,2,3,4,5,6]</span><br><span class="line">Output: 110</span><br><span class="line">Explanation: Remove the red edge and get 2 binary trees with sum 11 and 10. Their product is 110 (11*10)</span><br></pre></td></tr></table></figure><p>这个题的题面也很简单，给定一个带值的二叉树，移除某个二叉树的边，使之分割成为两个新的二叉树，求两个二叉树和的乘积最大</p><p>最开始很多人会被这道题唬到，但是实际上这道题就是一个二叉树的遍历，无论前中后序遍历，先遍历一次二叉树，求出二叉树节点值的总和，以及每个节点的左子树的和 left_sum 以及右子树的总和 <code>right_sum</code> </p><p>然后再次遍历，<code>result=max((total_sum-left_sum)*left_sum),(total_sum-right_sum)*right_sum),result)</code> 暴力求解即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProduct</span>(<span class="params">self, root: TreeNode</span>) -&gt; int:</span></span><br><span class="line">        total_sum = self.sum_node(root)</span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        stack = []</span><br><span class="line">        node = root</span><br><span class="line">        <span class="keyword">while</span> node <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="keyword">while</span> node:</span><br><span class="line">                stack.append(node)</span><br><span class="line">                result = <span class="built_in">max</span>(result, ((total_sum - node.left_sum) * node.left_sum))</span><br><span class="line">                result = <span class="built_in">max</span>(result, ((total_sum - node.right_sum) * node.right_sum))</span><br><span class="line">                node = node.left</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            node = node.right</span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                result = <span class="built_in">max</span>(result, ((total_sum - node.right_sum) * node.right_sum))</span><br><span class="line">                result = <span class="built_in">max</span>(result, ((total_sum - node.left_sum) * node.left_sum))</span><br><span class="line">        <span class="keyword">return</span> result % (<span class="number">10</span> ** <span class="number">9</span> + <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum_node</span>(<span class="params">self, root: TreeNode</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left_sum = self.sum_node(root.left)</span><br><span class="line">        right_sum = self.sum_node(root.right)</span><br><span class="line">        root.left_sum = left_sum</span><br><span class="line">        root.right_sum = right_sum</span><br><span class="line">        <span class="keyword">return</span> left_sum + right_sum + root.val</span><br></pre></td></tr></table></figure><p>BTW 这段代码的 type hint 使用其实有点问题，我后面比赛完了改了一版</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Optional, Tuple, List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    val: <span class="built_in">int</span></span><br><span class="line">    left: Optional[<span class="string">&quot;TreeNode&quot;</span>]</span><br><span class="line">    right: Optional[<span class="string">&quot;TreeNode&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNodeWithSum</span>:</span></span><br><span class="line">    val: <span class="built_in">int</span></span><br><span class="line">    left: Optional[<span class="string">&quot;TreeNodeWithSum&quot;</span>]</span><br><span class="line">    right: Optional[<span class="string">&quot;TreeNodeWithSum&quot;</span>]</span><br><span class="line">    left_sum: <span class="built_in">int</span></span><br><span class="line">    right_sum: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        self,</span></span></span><br><span class="line"><span class="function"><span class="params">        x: <span class="built_in">int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        left: Optional[<span class="string">&quot;TreeNodeWithSum&quot;</span>],</span></span></span><br><span class="line"><span class="function"><span class="params">        right: Optional[<span class="string">&quot;TreeNodeWithSum&quot;</span>],</span></span></span><br><span class="line"><span class="function"><span class="params">        left_sum: <span class="built_in">int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        right_sum: <span class="built_in">int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>):</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line">        self.left_sum = left_sum</span><br><span class="line">        self.right_sum = right_sum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProduct</span>(<span class="params">self, root: TreeNode</span>) -&gt; int:</span></span><br><span class="line">        total_sum,new_root = self.sum_node(root)</span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        stack:List[TreeNodeWithSum] = []</span><br><span class="line">        node = new_root</span><br><span class="line">        <span class="keyword">while</span> node <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="keyword">while</span> node:</span><br><span class="line">                stack.append(node)</span><br><span class="line">                result = <span class="built_in">max</span>(result, ((total_sum - node.left_sum) * node.left_sum))</span><br><span class="line">                result = <span class="built_in">max</span>(result, ((total_sum - node.right_sum) * node.right_sum))</span><br><span class="line">                node = node.left</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            node = node.right</span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                result = <span class="built_in">max</span>(result, ((total_sum - node.right_sum) * node.right_sum))</span><br><span class="line">                result = <span class="built_in">max</span>(result, ((total_sum - node.left_sum) * node.left_sum))</span><br><span class="line">        <span class="keyword">return</span> result % (<span class="number">10</span> ** <span class="number">9</span> + <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum_node</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        self, root: Optional[TreeNode]</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>) -&gt; Tuple[int, Optional[TreeNodeWithSum]]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>, <span class="literal">None</span></span><br><span class="line">        left_sum, new_left_node = self.sum_node(root.left)</span><br><span class="line">        right_sum, new_right_node = self.sum_node(root.right)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            left_sum + right_sum + root.val,</span><br><span class="line">            TreeNodeWithSum(</span><br><span class="line">                root.val, new_left_node, new_right_node, left_sum, right_sum</span><br><span class="line">            ),</span><br><span class="line">        )</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BTW，这道题因为数据太大，需要对 10^9+7 取模，我智障的忘了取模，WA 了两次，罚时罚哭。。。我真的太菜了。。</p><h2 id="1344-Jump-Game-V"><a href="#1344-Jump-Game-V" class="headerlink" title="1344. Jump Game V"></a>1344. Jump Game V</h2><p>描述：</p><blockquote><p>Given an array of integers arr and an integer d. In one step you can jump from index i to index:<br>i + x where: i + x &lt; arr.length and 0 &lt; x &lt;= d.<br>i - x where: i - x &gt;= 0 and 0 &lt; x &lt;= d.<br>In addition, you can only jump from index i to index j if arr[i] &gt; arr[j] and arr[i] &gt; arr[k] for all indices k between i and j (More formally min(i, j) &lt; k &lt; max(i, j)).<br>You can choose any index of the array and start jumping. Return the maximum number of indices you can visit.<br>Notice that you can not jump outside of the array at any time.</p></blockquote><p><img src="https://assets.leetcode.com/uploads/2020/01/23/meta-chart.jpeg"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: You can start at index 10. You can jump 10 --&gt; 8 --&gt; 6 --&gt; 7 as shown.</span><br><span class="line">Note that if you start at index 6 you can only jump to index 7. You cannot jump to index 5 because 13 &gt; 9. You cannot jump to index 4 because index 5 is between index 4 and 6 and 13 &gt; 9.</span><br><span class="line">Similarly You cannot jump from index 3 to index 2 or index 1.</span><br></pre></td></tr></table></figure><p>这题的题面是这样，一个数组，里面有若干值，你可以从任意一个位置开始跳跃，一次只能跳一个，跳的时候需要满足规则，假定你从数组 i 位置起跳，每次可跳的范围是 x，那么你需要满足</p><ol><li><p>i+x &lt; arr.length 和 0&lt;x&lt;=d</p></li><li><p>i-x &gt;=0 和 0&lt;x&lt;=d</p></li></ol><p>同时假设你从 i 跳往 j，那么你需要保证 arr[i]&gt;arr[j] 且 i 到 j 中的每个元素都满足 arr[j]&lt;x&lt;arr[i]，求最多能跳多少个元素</p><p>最开始觉得这题是一个双头 DP 的题，嫌写起来恶心就懒得写，，但是后面比赛完了发现其实这个题其实单 DP 就能解决的，因为我们只能从高往低跳，于是我们可以先将元素排序后依次遍历，可以得出公式为 <code>dp[i]=max(dp[i]+dp[j]+1)</code> 其中 j 是从 i 起可以到达的索引值，DP 部分的复杂度为 O(DN) 但是因为需要提前排序，因此整体的时间复杂度为 O(logN+DN)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxJumps</span>(<span class="params">self, arr: List[<span class="built_in">int</span>], d: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        length = <span class="built_in">len</span>(arr)</span><br><span class="line">        dp = [<span class="number">1</span>] * length</span><br><span class="line">        <span class="keyword">for</span> a, i <span class="keyword">in</span> <span class="built_in">sorted</span>([a, i] <span class="keyword">for</span> i, a <span class="keyword">in</span> <span class="built_in">enumerate</span>(arr)):</span><br><span class="line">            <span class="keyword">for</span> di <span class="keyword">in</span> [-<span class="number">1</span>, <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + di, i + d * di + di, di):</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt;= j &lt; length <span class="keyword">and</span> arr[j] &lt; arr[i]):</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(dp)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>很久没刷题了，手还是有点生，在前面几个签到题上花了时间，，而且犯了低级错误，，所以以后一定要坚持刷题了。。BTW 这次的周赛题感觉都很简单，感觉像是被泄题后找的 Backup，好了就先这样吧，我继续卧床养病了。。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近因为生病好久没刷题，今早开始打了一场 Leetcode 的周赛，来写个题解，今早状态还行，，BTW 以后每周都会打周赛，争取写题解&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="leetcode" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/leetcode/"/>
    
    <category term="刷题" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/leetcode/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Python" scheme="http://manjusaka.itscoder.com/tags/Python/"/>
    
    <category term="leetcode" scheme="http://manjusaka.itscoder.com/tags/leetcode/"/>
    
    <category term="刷题" scheme="http://manjusaka.itscoder.com/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>简单安利 Rime 输入法</title>
    <link href="http://manjusaka.itscoder.com/posts/2020/01/28/simple-config-for-rime-input/"/>
    <id>http://manjusaka.itscoder.com/posts/2020/01/28/simple-config-for-rime-input/</id>
    <published>2020-01-28T12:00:00.000Z</published>
    <updated>2020-12-31T13:40:30.529Z</updated>
    
    <content type="html"><![CDATA[<p>唉，最近因为气胸大过年的住院，春节颓废了好久，今天开始回北京，干脆来安利一个输入法– Rime</p><a id="more"></a><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>如同大多数人一样，我之前也是使用搜狗输入法作为自己的主力输入法，但是搜狗输入法的一些缺陷让我放弃了使用搜狗输入法</p><ol><li><p>作为传统艺能，搜狗输入法隐私保护成迷，在 MacOS 上某几个版本的搜狗在寻求获取我的通讯录和日历读取权限</p></li><li><p>作为传统艺能，搜狗输入法的广告推送实在是一言难尽，特别是在 Windows 上，已经禁了一些组件，但是还是防不胜防</p></li><li><p>因为和港澳台和国外社区朋友的交流需要，我需要输入法能够比较好的支持繁体，而搜狗输入法的繁体支持也是一言难尽</p></li><li><p>搜狗输入法的定制能力也着实不满足我的需求。。</p></li></ol><p>因此我在18年开始在寻求一种开源，可控，可定制，对简/繁输入都比较友好的输入法。经过寻找之后，Rime 输入法进入了我的视线，经过一年多的使用，我觉得这个真的是一款非常棒的输入法</p><h2 id="Rime-是什么？"><a href="#Rime-是什么？" class="headerlink" title="Rime 是什么？"></a>Rime 是什么？</h2><p><code>Rime</code> （又名 <code>中州韻</code>）是一款开源的跨平台的输入法引擎，完全开源，完全可定制，你甚至可以基于 <a href="https://github.com/rime">Rime</a> 的源码，来封装一套自己的输入法引擎。同时因为 <code>Rime</code> 极其高的定制性，你可以基于 <code>Rime</code> 制作自己的输入法。</p><p><code>Rime</code> 的优势主要在于通过配置文件的方式，对扩展提供了极好的支持，而且繁体支持非常棒</p><p>举个例子</p><p><img src="https://user-images.githubusercontent.com/7054676/73233134-98204780-41c0-11ea-92a0-1476e13a3513.png" alt="非常好的繁体支持"></p><p>在这里，「才」「纔」不一樣。还有很多的例子，大家可以自行体验。</p><p>但是 <code>Rime</code> 成也极高的定制性，败也极高的定制性，对于使用者而言，纯 YAML 配置文件的定制方式，准入门槛太高</p><h2 id="让你的-Rime-更好用"><a href="#让你的-Rime-更好用" class="headerlink" title="让你的 Rime 更好用"></a>让你的 Rime 更好用</h2><p>首先上一下我的 Rime 配置的效果</p><p><img src="https://user-images.githubusercontent.com/7054676/73233509-b8043b00-41c1-11ea-9ed4-84fd3defb3cc.png"></p><p><img src="https://user-images.githubusercontent.com/7054676/73233538-cf432880-41c1-11ea-9365-f94d5d4942cf.png"></p><p><img src="https://user-images.githubusercontent.com/7054676/73233565-e124cb80-41c1-11ea-840e-4298cf21c5b2.png"></p><p><img src="https://user-images.githubusercontent.com/7054676/73233572-e84bd980-41c1-11ea-96e6-9eeff08f167c.png"></p><p><img src="https://user-images.githubusercontent.com/7054676/73233587-f0a41480-41c1-11ea-94e0-a1c8807ed470.png"></p><p><img src="https://user-images.githubusercontent.com/7054676/73233626-07e30200-41c2-11ea-8993-74daed08c45d.png"></p><p>好了，我们开始来聊聊怎么安装配置 <code>Rime</code></p><h3 id="Rime-基础安装"><a href="#Rime-基础安装" class="headerlink" title="Rime 基础安装"></a>Rime 基础安装</h3><p>没啥好说的，从<a href="https://rime.im/download/">官网</a> 下载对应平台的安装包安装即可，在 MacOS 下，<code>Rime</code> 的配置在 <code>~/Library/Rime</code> 下，大家可以用 VSCode 之类的文本编辑器打开对应的目录，进行编辑</p><p>官方并不建议直接修改原始的配置文件，因为输入法更新时会重新覆盖默认配置，可能导致某些自定义配置丢失；推荐作法是创建一系列的 patch 配置，通过类似打补丁替换这种方式来实现无感的增加自定义配置；</p><h3 id="Rime-配色"><a href="#Rime-配色" class="headerlink" title="Rime 配色"></a>Rime 配色</h3><p><code>Rime</code> 的配色管理文件是 <code>squirrel.custom.yaml</code>，我自己使用了网友贡献的<a href="https://github.com/ryekee/rime-color-scheme">即刻黄</a>配色</p><p>想要切换皮肤配色只需要修改 style/color_scheme 为相应的皮肤配色名称既可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">patch:</span></span><br><span class="line">  <span class="attr">app_options:</span></span><br><span class="line">    <span class="attr">&quot;com.runningwithcrayons.Alfred-3&quot;:</span></span><br><span class="line">      <span class="attr">ascii_mode:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">com.google.android.studio:</span></span><br><span class="line">      <span class="attr">ascii_mode:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">com.jetbrains.intellij:</span></span><br><span class="line">      <span class="attr">ascii_mode:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">show_notifications_when:</span> <span class="string">appropriate</span> <span class="comment"># 状态通知，适当(appropriate)，开（always）关（never）</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">style:</span></span><br><span class="line">    <span class="attr">color_scheme:</span> <span class="string">jike</span></span><br><span class="line">  <span class="attr">preset_color_schemes:</span></span><br><span class="line">    <span class="attr">apathy:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">&quot;冷漠 / Apathy&quot;</span></span><br><span class="line">      <span class="attr">author:</span> <span class="string">&quot;LIANG Hai &quot;</span></span><br><span class="line">      <span class="attr">horizontal:</span> <span class="literal">true</span> <span class="comment"># 水平排列</span></span><br><span class="line">      <span class="attr">inline_preedit:</span> <span class="literal">true</span> <span class="comment">#单行显示，false双行显示</span></span><br><span class="line">      <span class="attr">candidate_format:</span> <span class="string">&quot;%c\u2005%@\u2005&quot;</span> <span class="comment"># 编号 %c 和候选词 %@ 前后的空间</span></span><br><span class="line">      <span class="attr">corner_radius:</span> <span class="number">5</span> <span class="comment">#候选条圆角</span></span><br><span class="line">      <span class="attr">border_height:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">border_width:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">back_color:</span> <span class="number">0xFFFFFF</span> <span class="comment">#候选条背景色</span></span><br><span class="line">      <span class="attr">font_face:</span> <span class="string">&quot;PingFangSC-Regular,HanaMinB&quot;</span> <span class="comment">#候选词字体</span></span><br><span class="line">      <span class="attr">font_point:</span> <span class="number">16</span> <span class="comment">#候选字词大小</span></span><br><span class="line">      <span class="attr">text_color:</span> <span class="number">0x424242</span> <span class="comment">#高亮选中词颜色</span></span><br><span class="line">      <span class="attr">label_font_face:</span> <span class="string">&quot;STHeitiSC-Light&quot;</span> <span class="comment">#候选词编号字体</span></span><br><span class="line">      <span class="attr">label_font_point:</span> <span class="number">12</span> <span class="comment">#候选编号大小</span></span><br><span class="line">      <span class="attr">hilited_candidate_text_color:</span> <span class="number">0xEE6E00</span> <span class="comment">#候选文字颜色</span></span><br><span class="line">      <span class="attr">hilited_candidate_back_color:</span> <span class="number">0xFFF0E4</span> <span class="comment">#候选文字背景色</span></span><br><span class="line">      <span class="attr">comment_text_color:</span> <span class="number">0x999999</span> <span class="comment">#拼音等提示文字颜色</span></span><br><span class="line">    <span class="attr">jike:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">即刻黄</span></span><br><span class="line">      <span class="attr">author:</span> <span class="string">Ryekee</span></span><br><span class="line">      <span class="attr">back_color:</span> <span class="number">0x11E4FF</span></span><br><span class="line">      <span class="attr">corner_radius:</span> <span class="number">5</span> <span class="comment">#候选条圆角</span></span><br><span class="line">      <span class="attr">border_height:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">border_width:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">candidate_format:</span> <span class="string">&quot;%c\u2005%@\u2005&quot;</span></span><br><span class="line">      <span class="attr">candidate_text_color:</span> <span class="number">0x362915</span></span><br><span class="line">      <span class="attr">comment_text_color:</span> <span class="number">0x000000</span></span><br><span class="line">      <span class="attr">font_face:</span> <span class="string">&quot;PingFangSC-Regular,HanaMinB&quot;</span></span><br><span class="line">      <span class="attr">font_point:</span> <span class="number">16</span> <span class="comment">#候选字词大小</span></span><br><span class="line">      <span class="attr">hilited_candidate_back_color:</span> <span class="number">0xF4B95F</span></span><br><span class="line">      <span class="attr">hilited_candidate_text_color:</span> <span class="number">0xFFFFFF</span></span><br><span class="line">      <span class="attr">horizontal:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">inline_preedit:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">label_font_face:</span> <span class="string">&quot;STHeitiSC-Light&quot;</span></span><br><span class="line">      <span class="attr">label_font_point:</span> <span class="number">12</span></span><br><span class="line">      <span class="attr">text_color:</span> <span class="number">0xFFFFFF</span></span><br></pre></td></tr></table></figure><h3 id="Rime-快捷键字符"><a href="#Rime-快捷键字符" class="headerlink" title="Rime 快捷键字符"></a>Rime 快捷键字符</h3><p>在 <code>Rime</code> 中，可以设置一些快捷键帮助输入一些特殊字符和表情。默认自带了很多，</p><p>比如输入 <code>/bg</code> 会给出八卦图案的列表</p><p><img src="https://user-images.githubusercontent.com/7054676/73234311-6e691f80-41c4-11ea-9855-2c3c11768027.png" alt="八卦"></p><p>比如输入 <code>/xl</code> 会给出希腊字符的列表</p><p><img src="https://user-images.githubusercontent.com/7054676/73234337-8f317500-41c4-11ea-80c2-91cec9c2480b.png" alt="希腊字符"></p><p>更多的快捷输入可以参看 <code>symbols.yaml</code> 下的列表，其中一些比较好玩的给大家看看</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#月份、日期、曜日等</span></span><br><span class="line">    <span class="string">&#x27;/yf&#x27;</span><span class="string">:</span> [ <span class="string">㋀</span>, <span class="string">㋁</span>, <span class="string">㋂</span>, <span class="string">㋃</span>, <span class="string">㋄</span>, <span class="string">㋅</span>, <span class="string">㋆</span>, <span class="string">㋇</span>, <span class="string">㋈</span>, <span class="string">㋉</span>, <span class="string">㋊</span>, <span class="string">㋋</span> ]</span><br><span class="line">    <span class="string">&#x27;/rq&#x27;</span><span class="string">:</span> [ <span class="string">㏠</span>, <span class="string">㏡</span>, <span class="string">㏢</span>, <span class="string">㏣</span>, <span class="string">㏤</span>, <span class="string">㏥</span>, <span class="string">㏦</span>, <span class="string">㏧</span>, <span class="string">㏨</span>, <span class="string">㏩</span>, <span class="string">㏪</span>, <span class="string">㏫</span>, <span class="string">㏬</span>, <span class="string">㏭</span>, <span class="string">㏮</span>, <span class="string">㏯</span>, <span class="string">㏰</span>, <span class="string">㏱</span>, <span class="string">㏲</span>, <span class="string">㏳</span>, <span class="string">㏴</span>, <span class="string">㏵</span>, <span class="string">㏶</span>, <span class="string">㏷</span>, <span class="string">㏸</span>, <span class="string">㏹</span>, <span class="string">㏺</span>, <span class="string">㏻</span>, <span class="string">㏼</span>, <span class="string">㏽</span>, <span class="string">㏾</span> ]</span><br><span class="line">    <span class="string">&#x27;/yr&#x27;</span><span class="string">:</span> [ <span class="string">月</span>, <span class="string">火</span>, <span class="string">水</span>, <span class="string">木</span>, <span class="string">金</span>, <span class="string">土</span>, <span class="string">日</span>, <span class="string">㊊</span>, <span class="string">㊋</span>, <span class="string">㊌</span>, <span class="string">㊍</span>, <span class="string">㊎</span>, <span class="string">㊏</span>, <span class="string">㊐</span>, <span class="string">㊗</span>, <span class="string">㊡</span>, <span class="string">㈪</span>, <span class="string">㈫</span>, <span class="string">㈬</span>, <span class="string">㈭</span>, <span class="string">㈮</span>, <span class="string">㈯</span>, <span class="string">㈰</span>, <span class="string">㈷</span>, <span class="string">㉁</span>, <span class="string">㉀</span> ]</span><br><span class="line"><span class="comment">#時間</span></span><br><span class="line">    <span class="string">&#x27;/sj&#x27;</span><span class="string">:</span> [ <span class="string">㍘</span>, <span class="string">㍙</span>, <span class="string">㍚</span>, <span class="string">㍛</span>, <span class="string">㍜</span>, <span class="string">㍝</span>, <span class="string">㍞</span>, <span class="string">㍟</span>, <span class="string">㍠</span>, <span class="string">㍡</span>, <span class="string">㍢</span>, <span class="string">㍣</span>, <span class="string">㍤</span>, <span class="string">㍥</span>, <span class="string">㍦</span>, <span class="string">㍧</span>, <span class="string">㍨</span>, <span class="string">㍩</span>, <span class="string">㍪</span>, <span class="string">㍫</span>, <span class="string">㍬</span>, <span class="string">㍭</span>, <span class="string">㍮</span>, <span class="string">㍯</span>, <span class="string">㍰</span> ]</span><br><span class="line"><span class="comment">#天干、地支、干支</span></span><br><span class="line">    <span class="string">&#x27;/tg&#x27;</span><span class="string">:</span> [ <span class="string">甲</span>, <span class="string">乙</span>, <span class="string">丙</span>, <span class="string">丁</span>, <span class="string">戊</span>, <span class="string">己</span>, <span class="string">庚</span>, <span class="string">辛</span>, <span class="string">壬</span>, <span class="string">癸</span> ]</span><br><span class="line">    <span class="string">&#x27;/dz&#x27;</span><span class="string">:</span> [ <span class="string">子</span>, <span class="string">丑</span>, <span class="string">寅</span>, <span class="string">卯</span>, <span class="string">辰</span>, <span class="string">巳</span>, <span class="string">午</span>, <span class="string">未</span>, <span class="string">申</span>, <span class="string">酉</span>, <span class="string">戌</span>, <span class="string">亥</span> ]</span><br><span class="line">    <span class="string">&#x27;/gz&#x27;</span><span class="string">:</span> [ <span class="string">甲子</span>, <span class="string">乙丑</span>, <span class="string">丙寅</span>, <span class="string">丁卯</span>, <span class="string">戊辰</span>, <span class="string">己巳</span>, <span class="string">庚午</span>, <span class="string">辛未</span>, <span class="string">壬申</span>, <span class="string">癸酉</span>, <span class="string">甲戌</span>, <span class="string">乙亥</span>, <span class="string">丙子</span>, <span class="string">丁丑</span>, <span class="string">戊寅</span>, <span class="string">己卯</span>, <span class="string">庚辰</span>, <span class="string">辛巳</span>, <span class="string">壬午</span>, <span class="string">癸未</span>, <span class="string">甲申</span>, <span class="string">乙酉</span>, <span class="string">丙戌</span>, <span class="string">丁亥</span>, <span class="string">戊子</span>, <span class="string">己丑</span>, <span class="string">庚寅</span>, <span class="string">辛卯</span>, <span class="string">壬辰</span>, <span class="string">癸巳</span>, <span class="string">甲午</span>, <span class="string">乙未</span>, <span class="string">丙申</span>, <span class="string">丁酉</span>, <span class="string">戊戌</span>, <span class="string">己亥</span>, <span class="string">庚子</span>, <span class="string">辛丑</span>, <span class="string">壬寅</span>, <span class="string">癸卯</span>, <span class="string">甲辰</span>, <span class="string">乙巳</span>, <span class="string">丙午</span>, <span class="string">丁未</span>, <span class="string">戊申</span>, <span class="string">己酉</span>, <span class="string">庚戌</span>, <span class="string">辛亥</span>, <span class="string">壬子</span>, <span class="string">癸丑</span>, <span class="string">甲寅</span>, <span class="string">乙卯</span>, <span class="string">丙辰</span>, <span class="string">丁巳</span>, <span class="string">戊午</span>, <span class="string">己未</span>, <span class="string">庚申</span>, <span class="string">辛酉</span>, <span class="string">壬戌</span>, <span class="string">癸亥</span> ]</span><br><span class="line"><span class="comment">#節氣</span></span><br><span class="line">    <span class="string">&#x27;/jq&#x27;</span><span class="string">:</span> [ <span class="string">立春</span>, <span class="string">雨水</span>, <span class="string">驚蟄</span>, <span class="string">春分</span>, <span class="string">清明</span>, <span class="string">穀雨</span>, <span class="string">立夏</span>, <span class="string">小滿</span>, <span class="string">芒種</span>, <span class="string">夏至</span>, <span class="string">小暑</span>, <span class="string">大暑</span>, <span class="string">立秋</span>, <span class="string">處暑</span>, <span class="string">白露</span>, <span class="string">秋分</span>, <span class="string">寒露</span>, <span class="string">霜降</span>, <span class="string">立冬</span>, <span class="string">小雪</span>, <span class="string">大雪</span>, <span class="string">冬至</span>, <span class="string">小寒</span>, <span class="string">大寒</span> ]</span><br><span class="line"><span class="comment">#單位</span></span><br><span class="line">    <span class="string">&#x27;/dw&#x27;</span><span class="string">:</span> [ <span class="string">Å</span>, <span class="string">℃</span>, <span class="string">％</span>, <span class="string">‰</span>, <span class="string">‱</span>, <span class="string">°</span>, <span class="string">℉</span>, <span class="string">㏃</span>, <span class="string">㏆</span>, <span class="string">㎈</span>, <span class="string">㏄</span>, <span class="string">㏅</span>, <span class="string">㎝</span>, <span class="string">㎠</span>, <span class="string">㎤</span>, <span class="string">㏈</span>, <span class="string">㎗</span>, <span class="string">㎙</span>, <span class="string">㎓</span>, <span class="string">㎬</span>, <span class="string">㏉</span>, <span class="string">㏊</span>, <span class="string">㏋</span>, <span class="string">㎐</span>, <span class="string">㏌</span>, <span class="string">㎄</span>, <span class="string">㎅</span>, <span class="string">㎉</span>, <span class="string">㎏</span>, <span class="string">㎑</span>, <span class="string">㏍</span>, <span class="string">㎘</span>, <span class="string">㎞</span>, <span class="string">㏎</span>, <span class="string">㎢</span>, <span class="string">㎦</span>, <span class="string">㎪</span>, <span class="string">㏏</span>, <span class="string">㎸</span>, <span class="string">㎾</span>, <span class="string">㏀</span>, <span class="string">㏐</span>, <span class="string">㏓</span>, <span class="string">㎧</span>, <span class="string">㎨</span>, <span class="string">㎡</span>, <span class="string">㎥</span>, <span class="string">㎃</span>, <span class="string">㏔</span>, <span class="string">㎆</span>, <span class="string">㎎</span>, <span class="string">㎒</span>, <span class="string">㏕</span>, <span class="string">㎖</span>, <span class="string">㎜</span>, <span class="string">㎟</span>, <span class="string">㎣</span>, <span class="string">㏖</span>, <span class="string">㎫</span>, <span class="string">㎳</span>, <span class="string">㎷</span>, <span class="string">㎹</span>, <span class="string">㎽</span>, <span class="string">㎿</span>, <span class="string">㏁</span>, <span class="string">㎁</span>, <span class="string">㎋</span>, <span class="string">㎚</span>, <span class="string">㎱</span>, <span class="string">㎵</span>, <span class="string">㎻</span>, <span class="string">㏘</span>, <span class="string">㎩</span>, <span class="string">㎀</span>, <span class="string">㎊</span>, <span class="string">㏗</span>, <span class="string">㏙</span>, <span class="string">㏚</span>, <span class="string">㎰</span>, <span class="string">㎴</span>, <span class="string">㎺</span>, <span class="string">㎭</span>, <span class="string">㎮</span>, <span class="string">㎯</span>, <span class="string">㏛</span>, <span class="string">㏜</span>, <span class="string">㎔</span>, <span class="string">㏝</span>, <span class="string">㎂</span>, <span class="string">㎌</span>, <span class="string">㎍</span>, <span class="string">㎕</span>, <span class="string">㎛</span>, <span class="string">㎲</span>, <span class="string">㎶</span>, <span class="string">㎼</span> ]</span><br><span class="line"><span class="comment">#貨幣</span></span><br><span class="line">    <span class="string">&#x27;/hb&#x27;</span><span class="string">:</span> [ <span class="string">￥</span>, <span class="string">¥</span>, <span class="string">¤</span>, <span class="string">￠</span>, <span class="string">＄</span>, <span class="string">$</span>, <span class="string">￡</span>, <span class="string">£</span>, <span class="string">৳</span>, <span class="string">฿</span>, <span class="string">₠</span>, <span class="string">₡</span>, <span class="string">₢</span>, <span class="string">₣</span>, <span class="string">₤</span>, <span class="string">₥</span>, <span class="string">₦</span>, <span class="string">₧</span>, <span class="string">₩</span>, <span class="string">₪</span>, <span class="string">₫</span>, <span class="string">€</span>, <span class="string">₭</span>, <span class="string">₮</span>, <span class="string">₯</span>, <span class="string">₰</span>, <span class="string">₱</span>, <span class="string">₲</span>, <span class="string">₳</span>, <span class="string">₴</span>, <span class="string">₵</span>, <span class="string">₶</span>, <span class="string">₷</span>, <span class="string">₸</span>, <span class="string">₹</span>, <span class="string">₺</span>, <span class="string">₨</span>, <span class="string">﷼</span> ]</span><br></pre></td></tr></table></figure><p>而我参考<a href="https://mritd.me/2019/03/23/oh-my-rime/">漠然</a>的配置，在 <code>luna_pinyin_simp.custom.yaml</code> 中添加了一些配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">punctuator:</span></span><br><span class="line">  <span class="attr">import_preset:</span> <span class="string">symbols</span></span><br><span class="line">  <span class="attr">symbols:</span></span><br><span class="line">    <span class="string">&quot;/fs&quot;</span><span class="string">:</span> [<span class="string">½</span>,<span class="string">‰</span>,<span class="string">¼</span>,<span class="string">⅓</span>,<span class="string">⅔</span>,<span class="string">¾</span>,<span class="string">⅒</span>]</span><br><span class="line">    <span class="string">&quot;/dq&quot;</span><span class="string">:</span> [<span class="string">🌍</span>,<span class="string">🌎</span>,<span class="string">🌏</span>,<span class="string">🌐</span>,<span class="string">🌑</span>,<span class="string">🌒</span>,<span class="string">🌓</span>,<span class="string">🌔</span>,<span class="string">🌕</span>,<span class="string">🌖</span>,<span class="string">🌗</span>,<span class="string">🌘</span>,<span class="string">🌙</span>,<span class="string">🌚</span>,<span class="string">🌛</span>,<span class="string">🌜</span>,<span class="string">🌝</span>,<span class="string">🌞</span>,<span class="string">⭐</span>,<span class="string">🌟</span>,<span class="string">🌠</span>,<span class="string">⛅</span>,<span class="string">⚡</span>,<span class="string">❄</span>,<span class="string">🔥</span>,<span class="string">💧</span>,<span class="string">🌊</span>]</span><br><span class="line">    <span class="string">&quot;/jt&quot;</span><span class="string">:</span> [<span class="string">⬆</span>,<span class="string">↗</span>,<span class="string">➡</span>,<span class="string">↘</span>,<span class="string">⬇</span>,<span class="string">↙</span>,<span class="string">⬅</span>,<span class="string">↖</span>,<span class="string">↕</span>,<span class="string">↔</span>,<span class="string">↩</span>,<span class="string">↪</span>,<span class="string">⤴</span>,<span class="string">⤵</span>,<span class="string">🔃</span>,<span class="string">🔄</span>,<span class="string">🔙</span>,<span class="string">🔚</span>,<span class="string">🔛</span>,<span class="string">🔜</span>,<span class="string">🔝</span>]</span><br><span class="line">    <span class="string">&quot;/sg&quot;</span><span class="string">:</span> [<span class="string">🍇</span>,<span class="string">🍈</span>,<span class="string">🍉</span>,<span class="string">🍊</span>,<span class="string">🍋</span>,<span class="string">🍌</span>,<span class="string">🍍</span>,<span class="string">🍎</span>,<span class="string">🍏</span>,<span class="string">🍐</span>,<span class="string">🍑</span>,<span class="string">🍒</span>,<span class="string">🍓</span>,<span class="string">🍅</span>,<span class="string">🍆</span>,<span class="string">🌽</span>,<span class="string">🍄</span>,<span class="string">🌰</span>,<span class="string">🍞</span>,<span class="string">🍖</span>,<span class="string">🍗</span>,<span class="string">🍔</span>,<span class="string">🍟</span>,<span class="string">🍕</span>,<span class="string">🍳</span>,<span class="string">🍲</span>,<span class="string">🍱</span>,<span class="string">🍘</span>,<span class="string">🍙</span>,<span class="string">🍚</span>,<span class="string">🍛</span>,<span class="string">🍜</span>,<span class="string">🍝</span>,<span class="string">🍠</span>,<span class="string">🍢</span>,<span class="string">🍣</span>,<span class="string">🍤</span>,<span class="string">🍥</span>,<span class="string">🍡</span>,<span class="string">🍦</span>,<span class="string">🍧</span>,<span class="string">🍨</span>,<span class="string">🍩</span>,<span class="string">🍪</span>,<span class="string">🎂</span>,<span class="string">🍰</span>,<span class="string">🍫</span>,<span class="string">🍬</span>,<span class="string">🍭</span>,<span class="string">🍮</span>,<span class="string">🍯</span>,<span class="string">🍼</span>,<span class="string">🍵</span>,<span class="string">🍶</span>,<span class="string">🍷</span>,<span class="string">🍸</span>,<span class="string">🍹</span>,<span class="string">🍺</span>,<span class="string">🍻</span>,<span class="string">🍴</span>]</span><br><span class="line">    <span class="string">&quot;/dw&quot;</span><span class="string">:</span> [<span class="string">🙈</span>,<span class="string">🙉</span>,<span class="string">🙊</span>,<span class="string">🐵</span>,<span class="string">🐒</span>,<span class="string">🐶</span>,<span class="string">🐕</span>,<span class="string">🐩</span>,<span class="string">🐺</span>,<span class="string">🐱</span>,<span class="string">😺</span>,<span class="string">😸</span>,<span class="string">😹</span>,<span class="string">😻</span>,<span class="string">😼</span>,<span class="string">😽</span>,<span class="string">🙀</span>,<span class="string">😿</span>,<span class="string">😾</span>,<span class="string">🐈</span>,<span class="string">🐯</span>,<span class="string">🐅</span>,<span class="string">🐆</span>,<span class="string">🐴</span>,<span class="string">🐎</span>,<span class="string">🐮</span>,<span class="string">🐂</span>,<span class="string">🐃</span>,<span class="string">🐄</span>,<span class="string">🐷</span>,<span class="string">🐖</span>,<span class="string">🐗</span>,<span class="string">🐽</span>,<span class="string">🐏</span>,<span class="string">🐑</span>,<span class="string">🐐</span>,<span class="string">🐪</span>,<span class="string">🐫</span>,<span class="string">🐘</span>,<span class="string">🐭</span>,<span class="string">🐁</span>,<span class="string">🐀</span>,<span class="string">🐹</span>,<span class="string">🐰</span>,<span class="string">🐇</span>,<span class="string">🐻</span>,<span class="string">🐨</span>,<span class="string">🐼</span>,<span class="string">🐾</span>,<span class="string">🐔</span>,<span class="string">🐓</span>,<span class="string">🐣</span>,<span class="string">🐤</span>,<span class="string">🐥</span>,<span class="string">🐦</span>,<span class="string">🐧</span>,<span class="string">🐸</span>,<span class="string">🐊</span>,<span class="string">🐢</span>,<span class="string">🐍</span>,<span class="string">🐲</span>,<span class="string">🐉</span>,<span class="string">🐳</span>,<span class="string">🐋</span>,<span class="string">🐬</span>,<span class="string">🐟</span>,<span class="string">🐠</span>,<span class="string">🐡</span>,<span class="string">🐙</span>,<span class="string">🐚</span>,<span class="string">🐌</span>,<span class="string">🐛</span>,<span class="string">🐜</span>,<span class="string">🐝</span>,<span class="string">🐞</span>,<span class="string">🦋</span>]</span><br><span class="line">    <span class="string">&quot;/bq&quot;</span><span class="string">:</span> [<span class="string">😀</span>,<span class="string">😁</span>,<span class="string">😂</span>,<span class="string">😃</span>,<span class="string">😄</span>,<span class="string">😅</span>,<span class="string">😆</span>,<span class="string">😉</span>,<span class="string">😊</span>,<span class="string">😋</span>,<span class="string">😎</span>,<span class="string">😍</span>,<span class="string">😘</span>,<span class="string">😗</span>,<span class="string">😙</span>,<span class="string">😚</span>,<span class="string">😇</span>,<span class="string">😐</span>,<span class="string">😑</span>,<span class="string">😶</span>,<span class="string">😏</span>,<span class="string">😣</span>,<span class="string">😥</span>,<span class="string">😮</span>,<span class="string">😯</span>,<span class="string">😪</span>,<span class="string">😫</span>,<span class="string">😴</span>,<span class="string">😌</span>,<span class="string">😛</span>,<span class="string">😜</span>,<span class="string">😝</span>,<span class="string">😒</span>,<span class="string">😓</span>,<span class="string">😔</span>,<span class="string">😕</span>,<span class="string">😲</span>,<span class="string">😷</span>,<span class="string">😖</span>,<span class="string">😞</span>,<span class="string">😟</span>,<span class="string">😤</span>,<span class="string">😢</span>,<span class="string">😭</span>,<span class="string">😦</span>,<span class="string">😧</span>,<span class="string">😨</span>,<span class="string">😬</span>,<span class="string">😰</span>,<span class="string">😱</span>,<span class="string">😳</span>,<span class="string">😵</span>,<span class="string">😡</span>,<span class="string">😠</span>]</span><br><span class="line">    <span class="string">&quot;/ss&quot;</span><span class="string">:</span> [<span class="string">💪</span>,<span class="string">👈</span>,<span class="string">👉</span>,<span class="string">👆</span>,<span class="string">👇</span>,<span class="string">✋</span>,<span class="string">👌</span>,<span class="string">👍</span>,<span class="string">👎</span>,<span class="string">✊</span>,<span class="string">👊</span>,<span class="string">👋</span>,<span class="string">👏</span>,<span class="string">👐</span>]</span><br><span class="line">    <span class="string">&quot;/dn&quot;</span><span class="string">:</span> [<span class="string">⌘</span>, <span class="string">⌥</span>, <span class="string">⇧</span>, <span class="string">⌃</span>, <span class="string">⎋</span>, <span class="string">⇪</span>, <span class="string"></span>, <span class="string">⌫</span>, <span class="string">⌦</span>, <span class="string">↩︎</span>, <span class="string">⏎</span>, <span class="string">↑</span>, <span class="string">↓</span>, <span class="string">←</span>, <span class="string">→</span>, <span class="string">↖</span>, <span class="string">↘</span>, <span class="string">⇟</span>, <span class="string">⇞</span>]</span><br><span class="line">    <span class="string">&quot;/fh&quot;</span><span class="string">:</span> [<span class="string">©</span>,<span class="string">®</span>,<span class="string">℗</span>,<span class="string">ⓘ</span>,<span class="string">℠</span>,<span class="string">™</span>,<span class="string">℡</span>,<span class="string">␡</span>,<span class="string">♂</span>,<span class="string">♀</span>,<span class="string">☉</span>,<span class="string">☊</span>,<span class="string">☋</span>,<span class="string">☌</span>,<span class="string">☍</span>,<span class="string">☑︎</span>,<span class="string">☒</span>,<span class="string">☜</span>,<span class="string">☝</span>,<span class="string">☞</span>,<span class="string">☟</span>,<span class="string">✎</span>,<span class="string">✄</span>,<span class="string">♻</span>,<span class="string">⚐</span>,<span class="string">⚑</span>,<span class="string">⚠</span>]</span><br><span class="line">    <span class="string">&quot;/xh&quot;</span><span class="string">:</span> [<span class="string">＊</span>,<span class="string">×</span>,<span class="string">✱</span>,<span class="string">★</span>,<span class="string">☆</span>,<span class="string">✩</span>,<span class="string">✧</span>,<span class="string">❋</span>,<span class="string">❊</span>,<span class="string">❉</span>,<span class="string">❈</span>,<span class="string">❅</span>,<span class="string">✿</span>,<span class="string">✲</span>]</span><br></pre></td></tr></table></figure><h3 id="设置输入法"><a href="#设置输入法" class="headerlink" title="设置输入法"></a>设置输入法</h3><p>大家可以在 <code>default.custom.yaml</code> 中设置自己喜欢的输入法，我目前使用的是明月拼音，默认切换输入法的快捷键是 <code>Ctrl+~</code> 但是因为这个快捷键和 VSCode 快捷键冲突，所以我将其改为 <code>Ctrl+Shift+F12</code> </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">patch:</span></span><br><span class="line">  <span class="attr">menu:</span></span><br><span class="line">    <span class="attr">page_size:</span> <span class="number">8</span></span><br><span class="line">  <span class="attr">schema_list:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">schema:</span> <span class="string">luna_pinyin_simp</span>      <span class="comment"># 朙月拼音 简化字</span></span><br><span class="line">  <span class="attr">&quot;switcher/hotkeys&quot;:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;Control+Shift+F12&quot;</span></span><br></pre></td></tr></table></figure><h3 id="调教词库"><a href="#调教词库" class="headerlink" title="调教词库"></a>调教词库</h3><p>这里引用<a href="https://mritd.me/2019/03/23/oh-my-rime/">漠然</a>的讲解：</p><blockquote><p>Rime 默认的词库稍为有点弱，我们可以下载一些搜狗词库来进行扩展；不过搜狗词库格式默认是无法解析的，好在有人开发了工具可以方便的将搜狗细胞词库转化为 Rime 的格式(工具点击这里下载)；目前该工具只支持 Windows(也有些别人写的 py 脚本啥的，但是我没用)，所以词库转换这种操作还得需要一个 Windows 虚拟机；<br>转换过程很简单，先从搜狗词库下载一系列的 scel 文件，然后批量选中，接着调整一下输入和输出格式点击转换，最后保存成一个 txt 文本<br>光有这个文本还不够，我们要将它塞到词库的 yaml 配置里，所以新建一个词库配置文件 luna_pinyin.sougou.dict.yaml，然后写上头部说明(注意最后三个点后面加一个换行)</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Rime dictionary</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="comment"># 搜狗词库 目前包含如下:</span></span><br><span class="line"><span class="comment"># IT计算机 实用IT词汇 亲戚称呼 化学品名 数字时间 数学词汇 淘宝词库 编程语言 软件专业 颜色名称 程序猿词库 开发专用词库 搜狗标准词库</span></span><br><span class="line"><span class="comment"># 摄影专业名词 计算机专业词库 计算机词汇大全 保险词汇 最详细的全国地名大全 饮食大全 常见花卉名称 房地产词汇大全 中国传统节日大全 财经金融词汇大全</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">luna_pinyin.sougou</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;1.0&quot;</span></span><br><span class="line"><span class="attr">sort:</span> <span class="string">by_weight</span></span><br><span class="line"><span class="attr">use_preset_vocabulary:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><blockquote><p>接着只需要把生成好的词库 txt 文件内容粘贴到三个点下面既可；但是词库太多的话你会发现这个文本有好几十 M，一般编辑器打开都会卡死，解决这种情况只需要用命令行 cat 一下就行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat sougou.txt &gt;&gt; luna_pinyin.sougou.dict.yaml</span><br></pre></td></tr></table></figure><blockquote><p>最后修改 luna_pinyin.extended.dict.yaml 中的 import_tables 字段，加入刚刚新建的词库既可</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">luna_pinyin.extended</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;2016.06.26&quot;</span></span><br><span class="line"><span class="attr">sort:</span> <span class="string">by_weight</span>  <span class="comment">#字典初始排序，可選original或by_weight</span></span><br><span class="line"><span class="attr">use_preset_vocabulary:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#此處爲明月拼音擴充詞庫（基本）默認鏈接載入的詞庫，有朙月拼音官方詞庫、明月拼音擴充詞庫（漢語大詞典）、明月拼音擴充詞庫（詩詞）、明月拼音擴充詞庫（含西文的詞彙）。如果不需要加載某个詞庫請將其用「#」註釋掉。</span></span><br><span class="line"><span class="comment">#雙拼不支持 luna_pinyin.cn_en 詞庫，請用戶手動禁用。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">import_tables:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">luna_pinyin</span></span><br><span class="line">  <span class="comment"># 加入搜狗词库</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">luna_pinyin.sougou</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">luna_pinyin.poetry</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">luna_pinyin.cn_en</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">luna_pinyin.kaomoji</span></span><br></pre></td></tr></table></figure><p>在我的配置中，我加入了来自搜狗的医学，古诗词，军事等词库（逃</p><h3 id="快捷键设置"><a href="#快捷键设置" class="headerlink" title="快捷键设置"></a>快捷键设置</h3><p>这里参考了 <code>Rime</code> 作者的一个 <a href="https://gist.github.com/lotem/2981316">Gist</a> 对快捷键做了一些配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ascii_composer/good_old_caps_lock:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">ascii_composer/switch_key:</span></span><br><span class="line">  <span class="attr">Caps_Lock:</span> <span class="string">commit_code</span></span><br><span class="line">  <span class="attr">Control_L:</span> <span class="string">noop</span></span><br><span class="line">  <span class="attr">Control_R:</span> <span class="string">noop</span></span><br><span class="line">  <span class="comment"># 按下左 shift 英文字符直接上屏，不需要再次回车，输入法保持英文状态</span></span><br><span class="line">  <span class="attr">Shift_L:</span> <span class="string">commit_code</span></span><br><span class="line">  <span class="attr">Shift_R:</span> <span class="string">noop</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过这一系列折腾下来，我们 <code>Rime</code> 应该就能满足我们日常的使用了，文中的配置都可以直接用我放在 GitHub 上的配置实现开箱即用 <a href="https://github.com/Zheaoli/RimeConfig">RimeConfig</a></p><p>可能有人想问，为什么对于一个输入法都需要这么多的时间进行调教？是这样，我觉得对于一些关系我们日常使用的基础工具，花一定量的时间去寻找合适自己，并且将其按照的自己的需求进行调教，是一件非常有意义的事。在后续的工作生活学习中，这也将极大的提升我们的幸福感与效率</p><p>嗯差不多这样吧，新年第一篇文章，祝大家新年快乐！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;唉，最近因为气胸大过年的住院，春节颓废了好久，今天开始回北京，干脆来安利一个输入法– Rime&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="http://manjusaka.itscoder.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="输入法" scheme="http://manjusaka.itscoder.com/categories/%E5%B7%A5%E5%85%B7/%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    
    <category term="Rime" scheme="http://manjusaka.itscoder.com/categories/%E5%B7%A5%E5%85%B7/%E8%BE%93%E5%85%A5%E6%B3%95/Rime/"/>
    
    
    <category term="工具" scheme="http://manjusaka.itscoder.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="输入法" scheme="http://manjusaka.itscoder.com/tags/%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>简单聊聊 SQL 中的 Prepared Statements</title>
    <link href="http://manjusaka.itscoder.com/posts/2020/01/05/simple-introdution-about-sql-prepared/"/>
    <id>http://manjusaka.itscoder.com/posts/2020/01/05/simple-introdution-about-sql-prepared/</id>
    <published>2020-01-05T20:00:00.000Z</published>
    <updated>2020-12-31T13:40:30.533Z</updated>
    
    <content type="html"><![CDATA[<p>好久没写文章了，新年还是得写点技术水文来保证下状态，正好最近遇到一个比较有意思的问题，就来简单聊聊一下关于 MySQL 中 Prepared Statements 吧</p><a id="more"></a><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p><a href="https://github.com/jinzhu/gorm">gorm</a> 是大家在使用 Go 开发时的比较常用的 ORM 了，最近在使用 gORM 的时候遇到一个很有意思的问题。首先我大概描述一下这个问题</p><p>在使用 gORM 的 <code>Raw</code> 方法进行 SQL 查询时，构造了如下类似的 SQL </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo <span class="keyword">where</span> <span class="keyword">match</span>(name) AGAINST(<span class="string">&#x27;+?&#x27;</span> <span class="keyword">IN</span> <span class="type">BOOLEAN</span> MODE)</span><br></pre></td></tr></table></figure><p>在随后传入参数的时候，返回 <code>Error</code> : <strong>sql: expected 0 arguments, got 1</strong>。而其余的诸如如下的查询就正常执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo <span class="keyword">where</span> name <span class="operator">=</span> ?</span><br></pre></td></tr></table></figure><p>最开始我以为这是 <code>gORM</code> 中拼接 SQL 模块的问题，但是看了下代码后发现一个很有趣的逻辑。<strong>gORM</strong> 中并没有拼接 <code>Raw SQL</code> 的相关逻辑，它会直接调用 Golang 中的标准库 <code>database/sql</code> 来进行 SQL 的处理，而 <code>database/sql</code> 将会直接调用对应数据库驱动的实现，我们先来看看在 <code>databse/sql</code> 中关于 Query 的逻辑。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span> <span class="title">queryDC</span><span class="params">(ctx, txctx context.Context, dc *driverConn, releaseConn <span class="keyword">func</span>(error)</span>, <span class="title">query</span> <span class="title">string</span>, <span class="title">args</span> []<span class="title">interface</span></span>&#123;&#125;) (*Rows, error) &#123;</span><br><span class="line">queryerCtx, ok := dc.ci.(driver.QueryerContext)</span><br><span class="line"><span class="keyword">var</span> queryer driver.Queryer</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">queryer, ok = dc.ci.(driver.Queryer)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line"><span class="keyword">var</span> nvdargs []driver.NamedValue</span><br><span class="line"><span class="keyword">var</span> rowsi driver.Rows</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">withLock(dc, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">nvdargs, err = driverArgsConnLocked(dc.ci, <span class="literal">nil</span>, args)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">rowsi, err = ctxDriverQuery(ctx, queryerCtx, queryer, query, nvdargs)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != driver.ErrSkip &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">releaseConn(err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Note: ownership of dc passes to the *Rows, to be freed</span></span><br><span class="line"><span class="comment">// with releaseConn.</span></span><br><span class="line">rows := &amp;Rows&#123;</span><br><span class="line">dc:          dc,</span><br><span class="line">releaseConn: releaseConn,</span><br><span class="line">rowsi:       rowsi,</span><br><span class="line">&#125;</span><br><span class="line">rows.initContextClose(ctx, txctx)</span><br><span class="line"><span class="keyword">return</span> rows, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> si driver.Stmt</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">withLock(dc, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 比较有意思的地方</span></span><br><span class="line">si, err = ctxDriverPrepare(ctx, dc.ci, query)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">releaseConn(err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ds := &amp;driverStmt&#123;Locker: dc, si: si&#125;</span><br><span class="line">rowsi, err := rowsiFromStatement(ctx, dc.ci, ds, args...)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">ds.Close()</span><br><span class="line">releaseConn(err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Note: ownership of ci passes to the *Rows, to be freed</span></span><br><span class="line"><span class="comment">// with releaseConn.</span></span><br><span class="line">rows := &amp;Rows&#123;</span><br><span class="line">dc:          dc,</span><br><span class="line">releaseConn: releaseConn,</span><br><span class="line">rowsi:       rowsi,</span><br><span class="line">closeStmt:   ds,</span><br><span class="line">&#125;</span><br><span class="line">rows.initContextClose(ctx, txctx)</span><br><span class="line"><span class="keyword">return</span> rows, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>database/sql</code> 执行 <strong>QueryDC</strong> 逻辑时，会调用 <code>ctxDriverPrepare</code> 方法来进行 SQL Query 的预处理，我们来看看这段逻辑 </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ctxDriverPrepare</span><span class="params">(ctx context.Context, ci driver.Conn, query <span class="keyword">string</span>)</span> <span class="params">(driver.Stmt, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> ciCtx, is := ci.(driver.ConnPrepareContext); is &#123;</span><br><span class="line"><span class="keyword">return</span> ciCtx.PrepareContext(ctx, query)</span><br><span class="line">&#125;</span><br><span class="line">si, err := ci.Prepare(query)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">si.Close()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ctx.Err()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> si, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在其中，<code>ctxDriverPrepare</code> 会调用 <code>ci.Prepare(query)</code> 来执行对应 SQL Driver 实现的 <code>Prepare</code> 或者 <code>PrepareContext</code> 方法来对 SQL 预处理，在 <a href="https://github.com/go-sql-driver/mysql/blob/v1.4.1/connection_go18.go#L92">go-mysql-driver</a> 中，对应的实现是这样</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mc *mysqlConn)</span> <span class="title">PrepareContext</span><span class="params">(ctx context.Context, query <span class="keyword">string</span>)</span> <span class="params">(driver.Stmt, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := mc.watchCancel(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stmt, err := mc.Prepare(query)</span><br><span class="line">mc.finish()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">stmt.Close()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ctx.Err()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> stmt, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一段的逻辑是 <code>go-mysql-driver</code> 会向 MySQL 发起 <code>prepared statement</code> 请求，获取到对应的 <code>Stmt</code> 后将其返回</p><p>在 <code>stmt</code> 中包含了对应的参数数量，<code>stmt name</code> 等信息。在这里，SQL 会将 ? 等参数占位符进行解析，并告知客户端需要传入的参数数量</p><p>问题也出在这里，我们重新看一下之前的 SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo <span class="keyword">where</span> <span class="keyword">match</span>(name) AGAINST(<span class="string">&#x27;+?&#x27;</span> <span class="keyword">IN</span> <span class="type">BOOLEAN</span> MODE)</span><br></pre></td></tr></table></figure><p>在这里，我使用了 MySQL 5.7 后支持的 Full Text Match ，在这里，我们待匹配的字符串 <code>+?</code> 会被 MySQL 解析成为一个待查询的字符串，而不会作为占位符进行解析，那么返回 <code>stmt</code> 中，需要传入的参数数量为0，而 <code>database/sql</code> 会在后续的逻辑中对我们传入的参数和需要传入的参数数量进行匹配，如果不一致则会抛出 <code>Error</code> 。</p><p>好了，问题找到了，那么 <code>Prepared Statement</code> 究竟是什么东西，而我们为什么又需要这个？</p><h2 id="Prepared-Statement"><a href="#Prepared-Statement" class="headerlink" title="Prepared Statement"></a>Prepared Statement</h2><h3 id="什么是-Prepared-Statement？"><a href="#什么是-Prepared-Statement？" class="headerlink" title="什么是 Prepared Statement？"></a>什么是 Prepared Statement？</h3><p>其实大致的内容前面已经聊的比较清楚了，我们来重新复习下：<code>Prepared Statement</code> 是一种 MySQL（其余的诸如 PGSQL 也有类似的东西）的机制，用于预处理 SQL，将 SQL 和查询数据分离，以期保证程序的健壮性。</p><p>在 MySQL 官方的介绍中，Prepared Statement 有如下的好处</p><blockquote><ol><li>Less overhead for parsing the statement each time it is executed. Typically, database applications process large volumes of almost-identical statements, with only changes to literal or variable values in clauses such as <code>WHERE</code> for queries and deletes, <code>SET</code> for updates, and <code>VALUES</code> for inserts.</li><li>Protection against SQL injection attacks. The parameter values can contain unescaped SQL quote and delimiter characters.</li></ol></blockquote><p>简而言之是：</p><ol><li>提升性能，避免重复解析 SQL 带来的开销</li><li>避免  SQL 注入</li></ol><p>MySQL 的 <code>Prepared Statement</code> 有两种使用方式，一种是使用二进制的 <code>Prepared Protocol</code>（这个不在今天的文章的范围内，改天再写篇文章来聊聊 MySQL 中的一些二进制协议） ，一种是使用 SQL 进行处理</p><p>在 <code>Prepared Statement</code> 中有着三种命令</p><ol><li><a href="https://dev.mysql.com/doc/refman/8.0/en/prepare.html"><code>PREPARE</code></a> 用于创建一个 <code>Prepared Statement</code></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/execute.html"><code>EXECUTE</code></a> 用于执行一个 <code>Prepared Statement</code></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/deallocate-prepare.html"><code>DEALLOCATE PREPARE</code></a> 用于销毁一个 <code>Prepared Statement</code> </li></ol><p>这里需要注意一点的是，<code>Prepared Statement</code> 存在 Session 限制，一般情况下一个 <code>Prepared Statement</code> 仅存活于它被创建的 <code>Session</code> 。当连接断开，者在其余情况下 Session 失效的时候，<code>Prepared Statement</code> 会自动被销毁。</p><p>接下来，我们来动手实验下</p><h3 id="怎么使用-Prepared-Statement"><a href="#怎么使用-Prepared-Statement" class="headerlink" title="怎么使用 Prepared Statement"></a>怎么使用 Prepared Statement</h3><p>首先我们先创建一个 测试表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> `<span class="keyword">user</span>`</span><br><span class="line">(</span><br><span class="line">    `id`   <span class="type">bigint</span>(<span class="number">20</span>)   <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">    `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    <span class="keyword">primary</span> <span class="keyword">key</span> (`id`)</span><br><span class="line">) engine <span class="operator">=</span> InnoDB</span><br><span class="line">  charset <span class="operator">=</span> <span class="string">&#x27;utf8mb4&#x27;</span>;</span><br></pre></td></tr></table></figure><p>然后插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (`name`) <span class="keyword">values</span> (<span class="string">&#x27;abc&#x27;</span>);</span><br></pre></td></tr></table></figure><p>好了，我们先按照传统的方式进行查询下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;abc&#x27;</span>;</span><br></pre></td></tr></table></figure><p>好了，我们现在来使用 <code>Prepared Statement</code> </p><p>首先使用 <code>Prepared</code> 关键字创建一个 <code>statement</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="variable">@s</span> <span class="operator">=</span> <span class="string">&#x27;select * from user where name=?&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">PREPARE</span> demo1 <span class="keyword">from</span> <span class="variable">@s</span>;</span><br></pre></td></tr></table></figure><p>然后使用 <code>Execute</code> 关键字来执行 <code>Statement</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="variable">@a</span> <span class="operator">=</span> <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXECUTE</span> demo1 <span class="keyword">using</span> <span class="variable">@a</span>;</span><br></pre></td></tr></table></figure><p>嗯，还是很简单的对吧</p><h3 id="为什么要使用-Prepared-Statement？"><a href="#为什么要使用-Prepared-Statement？" class="headerlink" title="为什么要使用 Prepared Statement？"></a>为什么要使用 Prepared Statement？</h3><p>其中一个很重要的理由是可以避免 <code>SQL Injection Attack</code> （SQL 注入）的情况出现，而问题在于，为什么 <code>Prepared Statement</code> 能够避免 SQL 注入？</p><p>其实很简单，我们将 <code>Query</code> 和 <code>Data</code> 进行了分离</p><p>还是以之前的表作为例子</p><p>在没有手动处理 SQL 和 参数的情况下，我们往往使用字符串拼接，那么这样会利用 SQL 语法来构造一些非法 SQL，以 Python 为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="string">&quot;&#x27;abc&#x27;;drop table user&quot;</span></span><br><span class="line">a = <span class="string">f&quot;select * from user where name=<span class="subst">&#123;b&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><p>那么这样一段代码将会生成这样的 SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;abc&#x27;</span>;<span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">user</span></span><br></pre></td></tr></table></figure><p>嗯，，，，数据库从入门到删表跑路.pdf</p><p>那么，我们来使用 <code>Prepared Statement</code> 来看看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="variable">@a</span> <span class="operator">=</span> <span class="string">&#x27;\&#x27;</span>abc\<span class="string">&#x27;;drop table user&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXECUTE</span> demo1 <span class="keyword">using</span> <span class="variable">@a</span>;</span><br></pre></td></tr></table></figure><p>然后我们最后执行的语句是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;\&#x27;</span>abc\<span class="string">&#x27;;drop table user&#x27;</span></span><br></pre></td></tr></table></figure><p>因为我们将 Query 与 Query Params 在结构上进行了区分，这个时候我们无论输入什么，都会将其作为 Query Params 的一部分进行处理，从而避免了注入的风险</p><h3 id="Prepared-Statement-的优劣"><a href="#Prepared-Statement-的优劣" class="headerlink" title="Prepared Statement 的优劣"></a>Prepared Statement 的优劣</h3><p>好处显而易见</p><ol><li>因为数据库会对 <code>Prepared Statement </code> 进行缓存，从而免去了客户端重复处理 SQL 带来的开销</li><li>避免 <code>SQL Injection Attack</code> </li><li>语义清楚</li></ol><p>缺点也有不少</p><ol><li><code>Prepared Statement</code> 的二进制协议存在客户端兼容的问题，有些语言的客户端不一定会对 <code>Prepared Statement</code> 提供二进制的协议支持</li><li>因为存在两次与数据库的通信，在密集进行 SQL 查询的情况下，可能会出现 I/O 瓶颈</li></ol><p>所以具体还是要根据场景来做 Trade-off 了</p><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>飞机上写下这篇文章算是作为新年的一个新开始吧，争取多写文章，规范作息，好好照顾女朋友。对了，通过这段时间的一些折腾（比如解析 Binlog 之类的），突然发现 MySQL 是个宝库，后面会写几篇文章来聊聊踩坑 MySQL 中的 <code>Binlog</code> 和 <code>Protocol</code> 中的一些坑和好玩的地方（嗯 Flag ++，千万别催稿（逃</p><p>好了，今晚就先这样，飞机要落地了，我先关电脑了（逃</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;好久没写文章了，新年还是得写点技术水文来保证下状态，正好最近遇到一个比较有意思的问题，就来简单聊聊一下关于 MySQL 中 Prepared Statements 吧&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Python" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/Python/"/>
    
    <category term="MySQL" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/Python/MySQL/"/>
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Python" scheme="http://manjusaka.itscoder.com/tags/Python/"/>
    
    <category term="MySQL" scheme="http://manjusaka.itscoder.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>年轻人第一台 Mac，来自一个开发者的 Macbook Pro 2019 16寸简评</title>
    <link href="http://manjusaka.itscoder.com/posts/2019/11/25/simple-test-about-new-macbook-pro/"/>
    <id>http://manjusaka.itscoder.com/posts/2019/11/25/simple-test-about-new-macbook-pro/</id>
    <published>2019-11-25T22:37:43.000Z</published>
    <updated>2020-12-31T13:40:30.533Z</updated>
    
    <content type="html"><![CDATA[<p>从工作开始，一直就想买个 Mac，但是一直没有买成，虽说有公司配发的 Mac（这也让我从 Macbook Pro 2015 13寸到 Macbook Pro 2017 15寸，到 Macbook Pro 2017 15寸，到 Macbook Pro 2018 13寸，到 Macbook Pro 2018 15寸用了个遍，23333），但是没有自己的 Mac<br>始终是一个比较遗憾的事，所以这次新款 Mac 出来后，就瞬时公司员工优惠（官网95折）+12期免息分期入手了，现在我来从一个开发者的角度来给一个简单的评测吧</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="为什么会考虑-Mac"><a href="#为什么会考虑-Mac" class="headerlink" title="为什么会考虑 Mac"></a>为什么会考虑 Mac</h3><p>写这个文章之前，我需要介绍下我买 Mac 的背景。目前我的主力机是来自蓝天的准系统，P775TM，配置是 i7 8700+32G+512G SSD+1070。工作系统是 Manjaro（一个 Linux 发型版）。在目前开发的时候觉得非常舒服，但是我也遇到了几个问题</p><ol><li><p>太重了，有些时候临时有事需要出门带着并不方便</p></li><li><p>Linux 下日常软件的缺少还是会给开发带来一些不便</p></li></ol><p>所以在11月之后，我就在慎重考虑需要换一台电脑，而我自己是偏基础设施的后端开发者，所以对 Unix/类 Unix 比较好的支持是必须的。同时因为有些时候会参与一些大型的开源项目，我也需要电脑有足够的性能来支撑多虚拟机以提供多平台的调试能力。<br>因此当时摆在我面前的有两个选择</p><ol><li><p>买一个硬件友好的机器，装黑苹果和 Linux 双系统</p></li><li><p>买一个 Macbook Pro</p></li></ol><p>由于我算是有点版权洁癖，黑苹果严格意义上来讲是违规的。因此 Macbook Pro 是我最好的选择了，恰逢新款的 16 寸的 Macbook Pro 上市，我就决定入手</p><p>我最后选择的配置是 i9 2.3 Ghz + 64G RAM + 1T SSD + 5500M 4G。选择这样的配置的逻辑是这样的，因为根据目前的评测，这一款 Mac 散热表现不错。因为我日常会在本地编译调试东西，所以果断选择了 i9，1T SSD 则是默认标配。而我不是视频工作者，同时<br>我也不会在 Mac 上玩游戏， 所以显存 4G 版显卡对我来说完全够用。唯一的纠结点在于 RAM，16G 肯定不够用，到底是 32G 还是 64G 这是个问题。考虑了下，咬咬牙上了 64G （后面也说明这是一个正确的决策）</p><p>定了之后果断分期下单，18号下单，23号拿到机器（这里要感谢女朋友大力支持，要不是她，我估计最后也舍不得买）。</p><p>好了，开始进入开箱，评测环节</p><h3 id="开箱"><a href="#开箱" class="headerlink" title="开箱"></a>开箱</h3><p>23号一早跑去公司拿了快递，然后回家开箱</p><p>献祭一只猫后，打开快递箱</p><p><img src="https://user-images.githubusercontent.com/7054676/69540790-894fc580-0fc2-11ea-9390-8f6afdc2e13a.jpg" alt="据说献祭一只猫能让电脑用的更久"></p><p>苹果的包装一如既往的简洁</p><p><img src="https://user-images.githubusercontent.com/7054676/69541163-7e496500-0fc3-11ea-8c9b-bbeb7b678185.jpg" alt="包装盒"></p><p>下面几张图，是真机原貌</p><p><img src="https://user-images.githubusercontent.com/7054676/69541369-f021ae80-0fc3-11ea-9ce6-c9610ad241d0.jpg" alt="IMG_20191123_122230"></p><p><img src="https://user-images.githubusercontent.com/7054676/69541370-f021ae80-0fc3-11ea-8ac2-eb8051a9d28d.jpg" alt="IMG_20191123_122251"></p><p><img src="https://user-images.githubusercontent.com/7054676/69541371-f021ae80-0fc3-11ea-9151-c775737f2e84.jpg" alt="IMG_20191123_122411"></p><p><img src="https://user-images.githubusercontent.com/7054676/69541372-f0ba4500-0fc3-11ea-891a-5fe6fb67463e.jpg" alt="IMG_20191123_123116"></p><p>机器到手默认是 MacOS 10.15.1 即 MacOS Catalina 。不得不说，这一代 MacOS 与 iOS 都是 Bug 奇多，堪称 BugOS = =，让人怀疑果家的项目管理是不是彻底失效了</p><p>至于机器外观，我选择的是银色版，不得不说，颜值是真高，但是也容易脏qaq，可能也有朋友关系 Macbook Pro 16 寸有多大，下面做了一个图大家可以感受一下</p><p><img src="https://user-images.githubusercontent.com/7054676/69541606-7dfd9980-0fc4-11ea-974d-18c9b47a01b5.jpg" alt="IMG_20191123_195649"></p><p>从上往下分别是：</p><ol><li><p>女朋友的 Macbook Air</p></li><li><p>公司配发的 Macbook Pro 2018 15 寸（后面还会有他的细分）</p></li><li><p>Macbook Pro 16 寸</p></li><li><p>蓝天 P775TM</p></li></ol><p>从这样一个角度大家能看出来，其实新款的 Macbook Pro 16 寸比 Macbook Pro 15 寸只大出一点点，而在新款出来后，官网也下架了 Macbook Pro 15 寸，所以看起来以后 Macbook Pro 16 寸就是 15 寸的替代品</p><h3 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h3><p>其实到手时间还相对较短，比较深的体验暂时没有2333，这一部分可能就相对较短了</p><ol><li><p>屏幕是保持了苹果一如既往的水准，很舒服，不过这一代默认显示分辨率是 1792x1120，  较 15 寸的 1680x1050 更大，很多人可能会觉得字体比较小，需要额外调整（此处推荐 RDM</p></li><li><p>键盘终于舒服了，蝶式键盘对于我来说有点敲钢板的感觉（不过各有所爱啦）</p></li><li><p>ESC 键的恢复对于 VIM 党来说是重大利好（逃（然而我不是（逃x2，2333333</p></li></ol><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><p>首先，我们来看下新款 Mac 的 CPU 测试成绩</p><p><img src="https://user-images.githubusercontent.com/7054676/69557120-01c57f00-0fe1-11ea-8100-be3575ac761d.png" alt="image"></p><p>不过，说实话，我觉得利用日常的一些场景来做测试可能更有价值，所以我选取了两个项目来做编译测试，一个是 Dubbo （基于 <a href="https://github.com/apache/dubbo/tree/dubbo-2.7.4.1">Dubbo 2.7.4.1</a> 进行编译, Maven 3.6.2, JDK 8),另外一个是基于 <a href="https://github.com/python/cpython">CPython</a> Master 最新代码进行编译，下面是编译命令</p><ol><li><p>Dubbo: <code>mvn clean package -U -Dmaven.test.skip=true</code>  (两台机器都已经搞定依赖)</p></li><li><p>CPython: <code>./configure --with-pydebug --with-openssl=/usr/local/opt/openssl &amp;&amp; make -j</code></p></li></ol><p>两台机器分别为</p><p><img src="https://user-images.githubusercontent.com/7054676/69559174-69c99480-0fe4-11ea-9b55-d80631d8afb1.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/7054676/69559204-777f1a00-0fe4-11ea-98dd-018d522c421d.png" alt="image"></p><p>最后的测试结果如下图所示（单位都为秒）</p><p><img src="https://user-images.githubusercontent.com/7054676/69559265-91b8f800-0fe4-11ea-9181-f3b3af1df7b2.png" alt="image"></p><p>看起来性能提升还是很明显，不过因为编译涉及到频繁的小文件读写，所以导致差距没有理论上的那么大，但是随着代码规模的扩大，i9 的优势会更为明显。后续有时间我会找几个科学计算的例子来进行场景补充</p><p>说道编译，大家可能也关心新款的 Mac 的散热怎么样，我大概测试了一下，</p><p><img src="https://user-images.githubusercontent.com/7054676/69559388-d2b10c80-0fe4-11ea-98b3-b186733db92d.png" alt="image"></p><p>结论为，降频无法避免，但是满负载的时候，能在81度左右的温度，将 CPU 频率稳定在 3.5 Ghz。虽然这个结果还是没有其余的高性能本那么显眼，但是对于一个轻薄高性能本来说，我觉得还算不错，毕竟凡事总得做一个 trade-off 对吧</p><p>最后，测一下硬盘速度</p><p><img src="https://user-images.githubusercontent.com/7054676/69559599-33404980-0fe5-11ea-908b-c50492568bfb.png" alt="image"></p><p>嗯，还是一如既往的暴力。。。</p><p>啊对了，其实有朋友可能会关心，64G 的内存是否浪费，嗯，我看了下，其实对我而言，不算浪费</p><p><img src="https://user-images.githubusercontent.com/7054676/69617885-e35c9380-1073-11ea-91ec-05b2b0ab424f.png" alt="image"></p><p>这是我写这篇文章时候的内存使用率，机器上开了三个 IDEA 项目，两个 Goland 项目，一个 PyCharm 项目，浏览器窗口若干，VSCode 窗口若干，用 Docker 跑了三个 ElasticSearch 节点做 HA 测试，一个 Kibana 节点，如果后续在开<br>几个虚拟机，可能 64G 对我来说就是非常适合的了。不过每个人的场景不一样，这里我也就不对大家的选机做一个建议了（不然选错了可能就要被打QAQ）</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实 Macbook Pro 是个水桶机，整体配置相对均衡，适合大多数场景（需要 Office 的除外），而且今年的官方也提供了更为灵活的配置选项让大家来进行组合。所以我建议如果对于大尺寸 Mac 有需求的朋友，其实真的可以考虑入手</p><p>千言万语汇成一句话：</p><p><img src="https://user-images.githubusercontent.com/7054676/69560169-4bfd2f00-0fe6-11ea-8cd3-088025809cef.gif" alt="74cea299b2f87d690d12a6ff38c2441e"></p><p>最后再次感谢女朋友对我的支持！mua！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;从工作开始，一直就想买个 Mac，但是一直没有买成，虽说有公司配发的 Mac（这也让我从 Macbook Pro 2015 13寸到 Macbook Pro 2017 15寸，到 Macbook Pro 2017 15寸，到 Macbook Pro 2018 13寸，到 Macbook Pro 2018 15寸用了个遍，23333），但是没有自己的 Mac&lt;br&gt;始终是一个比较遗憾的事，所以这次新款 Mac 出来后，就瞬时公司员工优惠（官网95折）+12期免息分期入手了，现在我来从一个开发者的角度来给一个简单的评测吧&lt;/p&gt;</summary>
    
    
    
    <category term="生活" scheme="http://manjusaka.itscoder.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="电子产品" scheme="http://manjusaka.itscoder.com/categories/%E7%94%9F%E6%B4%BB/%E7%94%B5%E5%AD%90%E4%BA%A7%E5%93%81/"/>
    
    
    <category term="电子产品" scheme="http://manjusaka.itscoder.com/tags/%E7%94%B5%E5%AD%90%E4%BA%A7%E5%93%81/"/>
    
    <category term="Apple" scheme="http://manjusaka.itscoder.com/tags/Apple/"/>
    
    <category term="评测" scheme="http://manjusaka.itscoder.com/tags/%E8%AF%84%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>写在一周年</title>
    <link href="http://manjusaka.itscoder.com/posts/2019/11/04/for-one-year-anniversary/"/>
    <id>http://manjusaka.itscoder.com/posts/2019/11/04/for-one-year-anniversary/</id>
    <published>2019-11-04T22:27:15.000Z</published>
    <updated>2020-12-31T13:40:30.529Z</updated>
    
    <content type="html"><![CDATA[<p>说实话，突然体会到了老祖宗说的『光阴似箭，日月如梭』的感觉了，感觉告白还在昨天，但是转眼就一年了。所以来写篇文章纪念这短短却有很丰富的一年吧</p><a id="more"></a><h2 id="起初"><a href="#起初" class="headerlink" title="起初"></a>起初</h2><p>说实话，我现在都没搞清楚是她撩的我，还是我撩的她，估计暂时也不会搞清楚了？</p><p>在去年的11月7号凌晨，当时聊着双十一，然后她突然说，“要是双十一能脱单就好了”，然后我直接没过大脑的来了一句 ”我保佑你啊“，然后你能以肉眼可见的速度感觉到屏幕对面的人不开心了</p><p>然后我就纳闷了，这女生咋这么难以琢磨呢？咋这就生气了呢？我说错啥了我？等等，她不会是喜欢我吧？我这么一个沙雕程序员咋会被她看上呢？喵？然后在我反复逼问下她承认了，然后就顺其自然的在一起了</p><p>后续她吐槽我：</p><ol><li><p>你咋能拷问一个女孩子喜不喜欢你呢？</p></li><li><p>当时你说”我保佑你啊“，我第一反应，这男的白撩了</p></li></ol><h2 id="相处"><a href="#相处" class="headerlink" title="相处"></a>相处</h2><p>她是一个很棒的钢琴专业的学生，非常棒，而且堪称学霸（偶然间知道她当年高考的时候即便缺席了半年文化课，高考成绩也超一本线50多分，当时就给跪了），而我是一个屌丝学渣程序员，按道理说我们两个人是毫无交集的，所以可能很多人想问，你们两是怎么相处的？</p><p>嘛，首先，我日常被嫌弃这是必然的，然后她有时会傻傻的，然后我也会吐槽她</p><p>讲两个故事</p><ol><li><p>某天我给她讲，亲爱的你知道么？我们金牛座超屌的，她惊了：哟，你还信星座的啊？然后我兴致勃勃的给她说，你知道么，人类历史上最早有记录的超新星爆发之一就在金牛座（SN 1054，公元1054年），她无语了十分钟</p></li><li><p>某天晚上，我哄她去睡觉，我说，亲爱的，快睡了，现在快十二点了，她当时直接来了句”现在日本才11点“，我当时愣了十分钟（喵？？</p></li></ol><p>好了，其实开个玩笑啦。虽然看起来是两个世界的人，但是我们彼此都还是有不少共同点，同时我们日常也会刻意的去靠近对方的习惯。比如我们会一起去看音乐剧（音乐剧看多了的结果就是钱包抗不住），然后一起吐槽比如法扎那场演员不咋样，比如堂吉诃德的演员有啥瑕疵，当然我也会日常给她普及某些电子产品有多好用，然后给她安利哪些软件比较好用（当然她日常吐槽我：你这个之前就给我说过啦白痴！）（然后我成功把她带入了 RSS 订阅的坑）</p><p>当然，要问她为什么能看上我，唯一的理由：她眼瞎（逃</p><h2 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h2><p>其实作为普通人的我们，日常其实也还是如同大部分普通人一样，一部分是温暖与惊喜，一部分是嫌弃与包容吧？</p><p>我自己来说，作为一个程序员，特别是在这两年经历了很多重大的改变，也经历不少的关键时候，同时因为我自己职业的关系，虽不至于996，但是每天清早出门，晚上回家，一天下来精疲力竭也是常态，而且说实话我自己的身体一直欠佳，去年到今年，大大小小的毛病也一堆，在这样一个时候，有一个人陪在你的身边，我觉得这对于我来说意义重大</p><p>我之前给她说过，她给我带来最直接改变就是让我对于这个城市有了归属感，每天早晨出门的时候有一个抱抱，晚上回家的时候也有一个抱抱，这样一个颇具有仪式感的行为让我对北京这个城市有了难得归属感。让我曾经在不同的城市之间飘荡的数字游民式的想法彻底消失。</p><p>而且她也是一个擅长个给我小惊喜和有着生活情趣的人，无论是在入职之前给我准备的一束花，还是有些时候在家里养的小花，满天星，茉莉，让你觉得家里有了生机，而有时你觉得很你难过的时候，她也会duang的一下跳出来，带着你最爱吃得东西来犒劳你，让你继续安心前行</p><p><img src="https://user-images.githubusercontent.com/7054676/68135636-f55c8200-ff5e-11e9-90ed-3520f89072ea.png" alt="最近的小惊喜"></p><p>当然一段感情中，除了温暖与惊喜，就是不断的嫌弃与包容吧</p><p>比如我因为工作繁忙+自己实在是懒，日常会把家里搞的很乱，然后她一遍嘟囔着我要和你分手，一遍收拾家里。然后之前她调雪球酒，然后我贪杯多喝了几杯在床上装死狗的时候，她一边嫌弃的骂我是傻狗，一遍隔一会儿来确认下我是否有事</p><p>嘛，所以日子，等等，我突然忘了说了，其实我们两人的日常还有一个很重要的组成部分！那就是虐狗！</p><p>啊，每当我在技术群里有意/无意的虐狗后，她总是很担(xin)心(xi)的问，你这样会不会被打啊！我说会，然后她说噢，那我就放心了</p><p>233333！</p><h2 id="宠物"><a href="#宠物" class="headerlink" title="宠物"></a>宠物</h2><p>嘛，宠物是我们日常中很重要的一部分，所以我就开个单节来聊聊</p><p>首先来介绍下家里四只猫</p><p><img src="https://user-images.githubusercontent.com/7054676/68136813-d8c14980-ff60-11e9-81fc-318acbf457f1.png" alt="image"></p><p>小舅子大雄，现居于山东，喜欢唱、抓、rap、捞鱼，目前在背《沁园春.雪》</p><p><img src="https://user-images.githubusercontent.com/7054676/68136952-0efec900-ff61-11e9-8a37-971d68d996e9.png" alt="image"></p><p>懂事的大闺女，肚兜，前流浪猫，极为懂事，在她/我身体不舒服的时候，会过去看着，也导致她经常吐槽：”你还没肚兜爱我！“</p><p><img src="https://user-images.githubusercontent.com/7054676/68137070-4cfbed00-ff61-11e9-945c-6290f84659ba.png" alt="image"></p><p>叛逆期的外孙女，秋千，颜值波动极大，有时喜欢捣乱</p><p>我们当时因为这三只猫结实，我记得我们俩最开始的话题是如何给大雄做绝育，借着给大雄做绝育的契机，我们俩加深了感情，加深了对于彼此的认识，啊，伟大的大雄同志，万岁！</p><p>然后突然想起关于秋千还有一个故事，去年10月，当时做保洁。秋千因为害怕躲在了家里一个未知的角落，回家的我一度以为秋千丢了，哭着满小区找秋千，亲爱的一直在安慰，别哭，别哭，我来陪你找</p><p>嗯，这三只猫，某种意义上是我们俩的媒人。嗯，纪念日开罐头</p><p>最后一只小猫，对我们来讲，是第一只一起救下来的小猫，嗯在儿童节那天，亲爱的说，这是我收到的最好的儿童节礼物</p><p><img src="https://user-images.githubusercontent.com/7054676/68137661-50dc3f00-ff62-11e9-9723-b9b00310fd3b.png" alt="image"></p><p>曾经的点点</p><p><img src="https://user-images.githubusercontent.com/7054676/68137739-710bfe00-ff62-11e9-8ca8-8ac6b5a218f0.png" alt="image"></p><p>现在的点点</p><p><img src="https://user-images.githubusercontent.com/7054676/68137823-8f71f980-ff62-11e9-8a5a-da6c6cf9c1df.png" alt="image"></p><p>睡死了的点点</p><p>嘛，这四只猫，分别出现在不同的时候，对于我们有着不一样的意义，当然家里养猫的日常是，当猫偷吃/打碎化妆品后，亲爱的总会对着我抱怨：”看你养的好猫！你赔我”，欲哭无泪.jpg</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>在过去这一年里，很幸运的是虽然大大小小的争端不断，没有吵架。一起养猫，一起看书，一起做陶艺，然后一起走到纪念日。在这一年里面，我们也一起立下了很多的 Flag 和对未来的希望，比如一起去加拿大读书，一起工作赚钱买 Dream House，一起去日本京都 Gap Year，等等。</p><p>虽然这句话说过很多次，但是我是还想再说一次：“亲爱的，我感激并享受着你的爱”</p><p>爱你亲爱的，一周年快乐！</p><p>啊对了，很多人都会问，你文中的她是谁呀，再次介绍下，她叫荆澈（也是我的花名），山东人，这里两位荆澈一起，在这里向大家问好啦！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;说实话，突然体会到了老祖宗说的『光阴似箭，日月如梭』的感觉了，感觉告白还在昨天，但是转眼就一年了。所以来写篇文章纪念这短短却有很丰富的一年吧&lt;/p&gt;</summary>
    
    
    
    <category term="人生" scheme="http://manjusaka.itscoder.com/categories/%E4%BA%BA%E7%94%9F/"/>
    
    <category term="杂记" scheme="http://manjusaka.itscoder.com/categories/%E4%BA%BA%E7%94%9F/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="人生" scheme="http://manjusaka.itscoder.com/tags/%E4%BA%BA%E7%94%9F/"/>
    
    <category term="杂记" scheme="http://manjusaka.itscoder.com/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>我与 PyCon China 这两年</title>
    <link href="http://manjusaka.itscoder.com/posts/2019/11/03/somethng-between-me-pycon-china/"/>
    <id>http://manjusaka.itscoder.com/posts/2019/11/03/somethng-between-me-pycon-china/</id>
    <published>2019-11-03T22:27:15.000Z</published>
    <updated>2020-12-31T13:40:30.533Z</updated>
    
    <content type="html"><![CDATA[<p>其实这篇文章最开始动笔是写于9月份，PyCon China 2019 上海场的工作结束后。后续因为还有北京，成都场的工作，所以拖到了现在。正好我自己的三年计划刚刚落下帷幕。下一个三年计划正在开展。我也来聊聊在这三年里面，<br>让我花费精力最多，也是最为重要的部分组成之一吧。 PyCon China，嗯这三年的时间里，我有两年都在与这个熟悉而陌生的名字关联在了一起</p><a id="more"></a><h2 id="我与-PyCon-China-的结识"><a href="#我与-PyCon-China-的结识" class="headerlink" title="我与 PyCon China 的结识"></a>我与 PyCon China 的结识</h2><p>说实话，之前 Laike9M 的一句话让我产生了共鸣</p><blockquote><p>Kenneth Reitz 曾经说，他的一年是按 PyCon 计算的。尽管围绕他有很多争议，这句话依然让我有了奇妙的共鸣。对他来说，”PyCon”自然是指 PyCon US，而对我来说，则是 PyCon China</p></blockquote><p>而我18/19年这两年的时间里，有很大一部分时间都在围绕着 PyCon China</p><p>要说最早结识 PyCon，应该能追溯到的 2016 年，当时初学 Python 的我，看到 David Beazley 在 PyCon US 2009 上分享的一个名为 <a href="http://dabeaz.com/coroutines/">A Curious Course on Coroutines and Concurrency</a> 的分享，简直惊为天人</p><p>也让我当时立下来几个 Flag</p><ol><li><p>在 PyCon China 做一次分享</p></li><li><p>组织一次 PyCon China</p></li><li><p>提一个被接受的 PEP 提案</p></li><li><p>晋升成为大陆第一位 Python Core Developer（不过在16年11月，来自华为的 <a href="https://github.com/zhangyangyu">angwer</a> 晋升成为大陆第一位 Core 后，这个 Flag 就有所修改了23333)</p></li></ol><p>嗯，后续我也在持续关注 PyCon China 的进展，却发现，历年 PyCon China 口碑在不断的下滑，也感觉十分的痛心</p><p>在17年，PyCon China 口碑进入谷底，当时年少轻狂的我，跑去邮件组喷了一圈后，又在考虑，我自己的能力是不是足够支撑一场大型会务筹办，可能需要先试试水。所以决定和小伙伴以『Python 北京开发者社区』的名义，组织了一场<a href="http://www.huodongxing.com/event/1408930902000">『Python 北京开发者活动第一期』</a>。借用 Thoughtworks 的场地在北京自行发起了一场活动。从事后的反馈来看，这个活动还是相对成功的，因此我也坚定了参与进 PyCon China 的意向。BTW，这次活动也收获了很多很棒的朋友，比如18年北京场的志愿者负责人姚前，19年组织者刘玉龙等人，都结识于此。</p><p>18年3月，我正式通过邮件的形式向大妈提出参与进 PyCon China 中来，7月，和 PyCon China 幕后的负责人辛庆老师见面后，我正式参与进18年 PyCon China 的筹办中来。然后入坑之后没法逃脱，，我也全程参与了19年的筹备工作</p><h2 id="聊聊-PyCon-China-这两年"><a href="#聊聊-PyCon-China-这两年" class="headerlink" title="聊聊 PyCon China 这两年"></a>聊聊 PyCon China 这两年</h2><p>说实话，我不止一次向辛老师吐槽过</p><blockquote><p>我觉得只有傻逼才会来参与办这个会</p></blockquote><p>辛老师说：</p><blockquote><p>不用你说，我们所有人都觉得自己是傻逼</p></blockquote><p>办会真的太苦了。。。。我是18年北京场负责人、成都场负责人/讲师，19年北京/上海/成都负责人，成都场讲师。说实话，这两年结束之后，我基本都有半个月缓不过劲来。嗯，就是那种基本要虚脱的感觉</p><p>很多人要问，办会真的这么惨么？</p><p>是的，很惨。我大概说一下目前 PyCon China 的运作模式吧</p><p>PyCon China 目前由一群志愿者在承担幕后的会务工作，大概从每年3到4月开始，进入今年的 PyCon China 的筹备状态</p><p>我们的工作包括不仅限于下面这样一些部分</p><ol><li><p>场地的选取</p></li><li><p>讲师的征集</p></li><li><p>今年周边的设计</p></li><li><p>主题的审核以及讲师预讲服务</p></li><li><p>赞助</p></li><li><p>国内外社区沟通</p></li><li><p>媒体稿的准备</p></li><li><p>会务现场</p></li></ol><p>基本进入每年的8月开始，到10月结束，基本每个人都处于高度紧张模式，基本每天大家都需要折腾到凌晨1/2点才能完成当天的准备工作（因为大家都是志愿准备工作）</p><p>而一旦各个城市开始进入会时，各位组织者也将迎来更大的挑战，无论是体能上还是具体的事务中，举个例子，我上海场/北京场都是两天睡了4个小时不到，而成都场更惨，因为日本讲师因为台风将缺席上午的分享，我需要临时做 PPT 进行补位，因此72小时也就睡了6个小时。</p><p>所以说，做会，无论是对于体能，还是自己各方面的能力，都会提出很高的要求。</p><h2 id="为什么？"><a href="#为什么？" class="headerlink" title="为什么？"></a>为什么？</h2><p>其实我也不知道为什么，可能真的是傻逼吧？</p><p>说实话，这两年 PyCon China 在我人生最重要的职业初期的两年中扮演了非常非常重要的角色，在这里一直被大家溺爱，包容着，也教会了我许许多多。所以吧，我感恩，痛苦，然后快乐着</p><p>有朋友说：<strong>以我片面的视角来看，Manjusaka 正是让 PyCon China 涅槃重生的关键人物。</strong> 其实我非常感谢大家的认可，但是不得不说，我只是这两年中微不足道的一环，在幕后，有太多让人感动并产生对这个群体的归属感的事情发生。比如18年垫付了20多万亏损的辛庆老师，做设计做到哭，但是边哭边做还是把设计成功的交出来的错姐，在背后一直默默支持的志愿者大管家倩姨，财务大管家大猫，因为台风取消航班但是依旧选择来到中国的日本小姐姐藤井美娜等等等。正是因为这样一群人的存在，PyCon China 才能不断的进步与成长</p><p>所以吧，很荣幸能在人生最重要的几年时间里有这样的一段难以忘怀的经历。嗯，一下也不知道怎么说了</p><h2 id="关于未来"><a href="#关于未来" class="headerlink" title="关于未来"></a>关于未来</h2><p>关于未来的话，职业方面的话，目前刚调动到阿里云做中间件相关的开发，应该还是会继续在技术这条路上走很长的一段时间吧。然后对于 PyCon China 2020，目前的筹备工作已经开展，不过因为我自己的身体原因，还不确定是否会参与，不过不出以外的话，虽然可能没法像18/19年这样支撑多城市（因为我们各城市的志愿者也成长起来啦！），但是大家也会见到我的身影</p><p>最后两张图镇楼</p><p><img src="https://user-images.githubusercontent.com/7054676/68086989-6c751600-fe8c-11e9-9d8e-8cc8f33f8019.jpeg" alt="EIcHI0SX0AEQtlu"></p><p><img src="https://user-images.githubusercontent.com/7054676/68086992-7f87e600-fe8c-11e9-9a60-f0ebfd399c03.jpeg" alt="EH-fxAJUwAEoZaZ"></p><p>最后 PyCon China 2020 已经开始筹备工作，欢迎大家加入！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;其实这篇文章最开始动笔是写于9月份，PyCon China 2019 上海场的工作结束后。后续因为还有北京，成都场的工作，所以拖到了现在。正好我自己的三年计划刚刚落下帷幕。下一个三年计划正在开展。我也来聊聊在这三年里面，&lt;br&gt;让我花费精力最多，也是最为重要的部分组成之一吧。 PyCon China，嗯这三年的时间里，我有两年都在与这个熟悉而陌生的名字关联在了一起&lt;/p&gt;</summary>
    
    
    
    <category term="人生" scheme="http://manjusaka.itscoder.com/categories/%E4%BA%BA%E7%94%9F/"/>
    
    <category term="杂记" scheme="http://manjusaka.itscoder.com/categories/%E4%BA%BA%E7%94%9F/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="人生" scheme="http://manjusaka.itscoder.com/tags/%E4%BA%BA%E7%94%9F/"/>
    
    <category term="杂记" scheme="http://manjusaka.itscoder.com/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Linux 上关于 inotify 的小笔记</title>
    <link href="http://manjusaka.itscoder.com/posts/2019/07/02/something-about-file-system-watch/"/>
    <id>http://manjusaka.itscoder.com/posts/2019/07/02/something-about-file-system-watch/</id>
    <published>2019-07-02T21:35:00.000Z</published>
    <updated>2020-12-31T13:40:30.533Z</updated>
    
    <content type="html"><![CDATA[<p>最近还是无心写啥文章，说好的写几篇关于 Raft 的论文也因为一些事 delay 了。但是想了想还是准备写点什么，于是写个小的水文来记录下关于今天碰到的一个 Linux 内核参数的问题， 顺便做个笔记</p><a id="more"></a><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>我是一个不太喜欢 Mac 的人，所以我自己在家使用的开发环境是 Manjaro（这里打个广告，非常棒的发行版，堪称开箱即用，广告五毛一条）。然后代码工具就是 Jetbrains 的全家桶和 VSCode 搭配使用。</p><p>今天打开 Goland 的时候，发现 IDE 给了这样一个 Warning ，<code>External file changes sync may be slow: The current inotify(7) watch limit is too low.</code></p><p>于是大家知道，我是个看着这些 warning 有强迫症的人，于是我就去查了查</p><h2 id="简单聊聊"><a href="#简单聊聊" class="headerlink" title="简单聊聊"></a>简单聊聊</h2><p>我们平常经常会有需求，去监控一个文件或者一个目录下的变化，比如创建文件，删除文件等。我们常规的做法可能是一个直接暴力轮询的方式来做</p><p>但是这样的性能会极差。那么我们有没有什么手段来处理一下这个事么？</p><p>有的！ Linux 提供了对应的 API 来处理这事，这就是我们今天要聊到的 <code>inotify</code></p><p>按照官方的说法，<code>inotify</code> 其实很简单，</p><blockquote><p>The inotify API provides a mechanism for monitoring file system events. Inotify can be used to monitor individual files, or to monitor directories. When a directory is monitored, inotify will return events for the directory itself, and for files inside the directory.</p></blockquote><p>大意就是说 <code>inotify</code> 是用来监控文件系统事件的。可以使用在单个文件或者目录上。被监听的文件目录本身的变化或者内部文件的变化都在监听范围内。</p><p>在监听了对应的文件后，<code>inotify</code> 将返回如下事件 </p><ol><li><p>IN_ACCESS 文件可读</p></li><li><p>IN_ATTRIB 元数据变化</p></li><li><p>IN_CLOSE_WRITE File opened for writing was closed</p></li><li><p>IN_CLOSE_NOWRITE File not opened for writing was closed</p></li><li><p>IN_CREATE 被监听的目录下有文件/目录被创建</p></li><li><p>IN_DELETE 被监听的目录下有文件/目录被删除</p></li><li><p>IN_DELETE_SELF 被监听的文件/目录被删除</p></li><li><p>IN_MODIFY 文件被修改</p></li><li><p>IN_MOVE_SELF 被监听的文件/目录被移动</p></li><li><p>IN_MOVED_FROM 有文件/目录从被监听的目录中被移出</p></li><li><p>IN_MOVED_TO 有文件/目录移动至被监听的目录中</p></li><li><p>IN_OPEN 文件被打开</p></li></ol><p>总共12类事件，已经能涵盖住我们常见的需求。但是 <code>inotify</code> 也有其自己的弊端。</p><ol><li><p>不支持递归监听。举个例子，我监听 A 目录，我可以捕获到在 A 目录下创建 B 目录这个事件。但是我们没法监听到 B 目录下事件，除非将 B 目录也添加到监听队列中</p></li><li><p>Python 可用的 inotify 很少</p></li></ol><p>对于第一个缺陷。常见的解决手段，是我们自行实现递归监听。当主目录下存在创建文件/目录事件的时候，我们将对应的文件/目录也添加到监听队列中。</p><p>但是这样就带来一个新的问题。如果一个非常大的项目，我们按照这样的方式去做，那么最后对应的内存损耗是很吓人的。所以在 <code>inotify</code> 设计之初，就通过一些内核参数做了一些限制</p><p>我们常见的有两个</p><ol><li><p>/proc/sys/fs/inotify/max_queued_events  限制事件队列长度，一旦出现事件堆积，那么新的事件将被废弃</p></li><li><p>/proc/sys/fs/inotify/max_user_watches 限制每个 User ID 能够创建的 watcher 数，以免监听过多导致内存爆炸</p></li></ol><p>在默认情况下 <code>max_user_watches</code> 的值取决于不同的 Linux 发行版，对于大多数发行版而言，其值相对较小。也就是说一旦达到限制，那么将没法添加新的 watcher。这也是 IDE 为什么会提示<br><code>External file changes sync may be slow: The current inotify(7) watch limit is too low.</code> 的原因</p><p>可以通过修改 <code>/etc/sysctl.conf</code> 来修改对应的参数，最后解决这个问题</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>Linux 果然是个宝库。感觉隔三差五就会遇到自己没涉及到的东西。所以还是记录下来，当作一篇水文，顺便供自己参阅</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近还是无心写啥文章，说好的写几篇关于 Raft 的论文也因为一些事 delay 了。但是想了想还是准备写点什么，于是写个小的水文来记录下关于今天碰到的一个 Linux 内核参数的问题， 顺便做个笔记&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/Linux/"/>
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="随笔" scheme="http://manjusaka.itscoder.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="Linux" scheme="http://manjusaka.itscoder.com/tags/Linux/"/>
    
    <category term="总结" scheme="http://manjusaka.itscoder.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>随便聊聊 PEP570</title>
    <link href="http://manjusaka.itscoder.com/posts/2019/04/27/something-about-pep-570/"/>
    <id>http://manjusaka.itscoder.com/posts/2019/04/27/something-about-pep-570/</id>
    <published>2019-04-27T18:48:30.000Z</published>
    <updated>2020-12-31T13:40:30.533Z</updated>
    
    <content type="html"><![CDATA[<p>最近沉迷与 MIT 6.824 这门分布式系统的课，无心写文章。不过看到 <a href="https://www.python.org/dev/peps/pep-0570">PEP570</a> 被接受了，决定还是写篇水文随便聊聊 PEP 570</p><a id="more"></a><h2 id="Python-的-argument"><a href="#Python-的-argument" class="headerlink" title="Python 的 argument"></a>Python 的 argument</h2><p>在聊 PEP570 之前，我们先要来看看 Python 的 argument 变迁</p><p>早在 Python 1.0 或更早，Python 的 argument 系统就已经支持我们现在主要使用的两种参数形式了，一种是 positional 一种是 keyword，举几个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abc</span>(<span class="params">a, b, c</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">abc(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">abc(<span class="number">1</span>, <span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line">abc(<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line">abc(*(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">abc(**&#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>, <span class="string">&quot;b&quot;</span>: <span class="number">2</span>, <span class="string">&quot;c&quot;</span>: <span class="number">3</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是不是我们常见的集中使用方式？</p><p>在发展了很长一段时间后，虽然期间有一些提案对 Python 的 argument 系统做优化和增强，但是一直都被 Reject，直到 <a href="https://www.python.org/dev/peps/pep-3102/">PEP3102</a> 的出现</p><p>3102 主要引入了一个概念叫做 Keyword-Only Arguments，给个例子</p><p>有这样一个函数定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abc</span>(<span class="params">a, *, b, c</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>那么这个函数只支持这样几种方式调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abc</span>(<span class="params">a, *, b, c</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">abc(**&#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>, <span class="string">&quot;b&quot;</span>: <span class="number">2</span>, <span class="string">&quot;c&quot;</span>: <span class="number">3</span>&#125;)</span><br><span class="line">abc(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line">abc(<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>OK，大概聊完 Argument 一个迭代的过程，我们来聊聊 570 这个提案</p><h2 id="随便聊聊-PEP-570"><a href="#随便聊聊-PEP-570" class="headerlink" title="随便聊聊 PEP 570"></a>随便聊聊 PEP 570</h2><p>570 做的事情其和 3102 类似，3102 是引入语法糖，让函数支持 keyword-only 的使用方式，那么 570 就是让函数支持 positional-only 的使用方式</p><p>假定有这样一个函数定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abc</span>(<span class="params">a, b, /, c</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>那么 570 使得函数只支持这样的调用方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abc</span>(<span class="params">a, b, /, c</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">abc(<span class="number">1</span>, <span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line">abc(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>如果不这样做会怎么样呢？我们可以来试试，目前 PEP570 有一个实现，参见 <a href="https://github.com/python/cpython/pull/12701">bpo-36540: PEP 570 – Implementation</a>，我们来编译测试一下，效果如下</p><p><img src="https://user-images.githubusercontent.com/7054676/56848232-032eac00-6919-11e9-9312-d2d73b641f12.png" alt="image"></p><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>很多人其实没想清楚关于 570 的存在意义，PEP 570 上也提到了很多 Motivation 。不过我自己觉得，它和 3102 一样都是在践行一个理念，则</p><blockquote><p>explicit is better than implicit</p></blockquote><p>换句话说，如果要尽可能的保证代码风格的一致性，我们需要一定程度上语法特性的支持。而 570 和 3102 就是解决这样的问题。</p><p>所以从我自己的角度来说，我觉得 570 是个蛮重要的提案，也是很有意义的提案（都是 PEP57x ，为啥大家待遇能差这么多呢？（笑</p><p>对了，讲个段子， Python 的 Core 之一 Serhiy Storchaka 非常喜欢这个 PEP，然后在 PEP570 的实现没合并到主分支之前，就已经先把内置的一些库给改良了一下，大家可以去围观一下 PR <a href="https://github.com/python/cpython/pull/12620">[WIP] Use PEP 570 syntax for positional-only parameters</a></p><p>好了，今天的水文就到此结束了。。我写文章真的是越来越水了。。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近沉迷与 MIT 6.824 这门分布式系统的课，无心写文章。不过看到 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0570&quot;&gt;PEP570&lt;/a&gt; 被接受了，决定还是写篇水文随便聊聊 PEP 570&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Python" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/Python/"/>
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Python" scheme="http://manjusaka.itscoder.com/tags/Python/"/>
    
    <category term="编程技巧" scheme="http://manjusaka.itscoder.com/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
    <category term="PEP" scheme="http://manjusaka.itscoder.com/tags/PEP/"/>
    
  </entry>
  
  <entry>
    <title>聊聊网络事件中的惊群效应</title>
    <link href="http://manjusaka.itscoder.com/posts/2019/03/28/somthing-about-thundering-herd/"/>
    <id>http://manjusaka.itscoder.com/posts/2019/03/28/somthing-about-thundering-herd/</id>
    <published>2019-03-28T22:00:00.000Z</published>
    <updated>2020-12-31T13:40:30.533Z</updated>
    
    <content type="html"><![CDATA[<p>关于惊群问题，其实我是在去年开始去关注的。然后向 CPython 提了一个关于解决 <code>selector</code> 的惊群问题的补丁 <a href="https://bugs.python.org/issue35517">BPO-35517</a>。现在大概来聊聊关于惊群问题那点事吧</p><a id="more"></a><h2 id="惊群问题的过去"><a href="#惊群问题的过去" class="headerlink" title="惊群问题的过去"></a>惊群问题的过去</h2><h3 id="惊群问题是什么？"><a href="#惊群问题是什么？" class="headerlink" title="惊群问题是什么？"></a>惊群问题是什么？</h3><p>惊群问题又名惊群效应。简单来说就是多个进程或者线程在等待同一个事件，当事件发生时，所有线程和进程都会被内核唤醒。唤醒后通常只有一个进程获得了该事件并进行处理，其他进程发现获取事件失败后又继续进入了等待状态，在一定程度上降低了系统性能。</p><p>可能很多人想问，惊群效应为什么会占用系统资源？降低系统性能？</p><ol><li>多进程/线程的唤醒，涉及到的一个问题是上下文切换问题。频繁的上下文切换带来的一个问题是数据将频繁的在寄存器与运行队列中流转。极端情况下，时间更多的消耗在进程/线程的调度上，而不是执行</li></ol><p>接下来我们来聊聊我们网络编程中常见的惊群问题。</p><h3 id="常见的惊群问题"><a href="#常见的惊群问题" class="headerlink" title="常见的惊群问题"></a>常见的惊群问题</h3><p>在 Linux 下，我们常见的惊群效应发生于我们使用 <code>accept</code> 以及我们 <code>select</code> 、<code>poll</code> 或 <code>epoll</code> 等系统提供的 API 来处理我们的网络链接。</p><h4 id="accept-惊群"><a href="#accept-惊群" class="headerlink" title="accept 惊群"></a>accept 惊群</h4><p>首先我们用一个流程图来复习下我们传统的 <code>accept</code> 使用方式</p><p><img src="https://user-images.githubusercontent.com/7054676/55270168-e467d600-52d6-11e9-9779-8ba62b0b42e1.png" alt="image"></p><p>那么在这里存在一种情况，即当一个请求到达时，所有进程/线程都开始 accept ，但是最终只有一个获取成功，我们来写段代码看看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_ADDRESS <span class="meta-string">&quot;0.0.0.0&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_PORT 10086</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WORKER_COUNT 4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">worker_process</span><span class="params">(<span class="keyword">int</span> listenfd, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I am work %d, my pid is %d, begin to accept connections \n&quot;</span>, i,</span><br><span class="line">           getpid());</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_info</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span> client_info_len = <span class="keyword">sizeof</span>(client_info);</span><br><span class="line">    <span class="keyword">int</span> connection =</span><br><span class="line">        accept(listenfd, (struct sockaddr *)&amp;client_info, &amp;client_info_len);</span><br><span class="line">    <span class="keyword">if</span> (connection != <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;worker %d accept success\n&quot;</span>, i);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;ip :%s\t&quot;</span>, inet_ntoa(client_info.sin_addr));</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;port: %d \n&quot;</span>, client_info.sin_port);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;worker %d accept failed&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    close(connection);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line">  bzero(&amp;address, <span class="keyword">sizeof</span>(address));</span><br><span class="line">  address.sin_family = AF_INET;</span><br><span class="line">  inet_pton(AF_INET, SERVER_ADDRESS, &amp;address.sin_addr);</span><br><span class="line">  address.sin_port = htons(SERVER_PORT);</span><br><span class="line">  <span class="keyword">int</span> listenfd = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">int</span> ret = bind(listenfd, (struct sockaddr *)&amp;address, <span class="keyword">sizeof</span>(address));</span><br><span class="line">  ret = listen(listenfd, <span class="number">5</span>);</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; WORKER_COUNT; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Create worker %d\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">pid_t</span> pid = fork();</span><br><span class="line">    <span class="comment">/*child  process */</span></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">      worker_process(listenfd, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;fork error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*wait child process*/</span></span><br><span class="line">  <span class="keyword">int</span> status;</span><br><span class="line">  wait(&amp;status);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们来看看运行的结果</p><p><img src="https://user-images.githubusercontent.com/7054676/55270562-2135cc00-52db-11e9-8ad8-71efe6e7962a.png" alt="image"></p><p>诶？怎么回事？为什么这里没有出现我们想要的现象（一个进程 accept 成功，三个进程 accept 失败）？原因在于在 Linux 2.6 之后，Accept 的惊群问题从内核上被处理了</p><p>好，我们接着往下看</p><h4 id="select-poll-epoll-惊群"><a href="#select-poll-epoll-惊群" class="headerlink" title="select/poll/epoll 惊群"></a>select/poll/epoll 惊群</h4><p>我们以 <code>epoll</code> 为例，我们来看看传统的工作模式</p><p><img src="https://user-images.githubusercontent.com/7054676/55270670-a1a8fc80-52dc-11e9-96c2-49be1aa78e7f.png" alt="image"></p><p>好了，我们来看段代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_ADDRESS <span class="meta-string">&quot;0.0.0.0&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_PORT 10087</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WORKER_COUNT 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXEVENTS 64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">create_and_bind_socket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> fd = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_address</span>;</span></span><br><span class="line">  server_address.sin_family = AF_INET;</span><br><span class="line">  inet_pton(AF_INET, SERVER_ADDRESS, &amp;server_address.sin_addr);</span><br><span class="line">  server_address.sin_port = htons(SERVER_PORT);</span><br><span class="line">  bind(fd, (struct sockaddr *)&amp;server_address, <span class="keyword">sizeof</span>(server_address));</span><br><span class="line">  <span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">make_non_blocking_socket</span><span class="params">(<span class="keyword">int</span> sfd)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> flags, s;</span><br><span class="line">  flags = fcntl(sfd, F_GETFL, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (flags == <span class="number">-1</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;fcntl error&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  flags |= O_NONBLOCK;</span><br><span class="line">  s = fcntl(sfd, F_SETFL, flags);</span><br><span class="line">  <span class="keyword">if</span> (s == <span class="number">-1</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;fcntl set error&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">worker_process</span><span class="params">(<span class="keyword">int</span> listenfd, <span class="keyword">int</span> epoll_fd, struct epoll_event *events,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    n = epoll_wait(epoll_fd, events, MAXEVENTS, <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Worker %d pid is %d get value from epoll_wait\n&quot;</span>, k, getpid());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((events[i].events &amp; EPOLLERR) || (events[i].events &amp; EPOLLHUP) ||</span><br><span class="line">          (!(events[i].events &amp; EPOLLIN))) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;epoll err\n&quot;</span>);</span><br><span class="line">        close(events[i].data.fd);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (listenfd == events[i].data.fd) &#123;</span><br><span class="line">        struct sockaddr in_addr;</span><br><span class="line">        <span class="keyword">socklen_t</span> in_len;</span><br><span class="line">        <span class="keyword">int</span> in_fd;</span><br><span class="line">        in_len = <span class="keyword">sizeof</span>(in_addr);</span><br><span class="line">        in_fd = accept(listenfd, &amp;in_addr, &amp;in_len);</span><br><span class="line">        <span class="keyword">if</span> (in_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;worker %d accept failed\n&quot;</span>, k);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;worker %d accept success\n&quot;</span>, k);</span><br><span class="line">        close(in_fd);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> listen_fd, s;</span><br><span class="line">  <span class="keyword">int</span> epoll_fd;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">event</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> *<span class="title">events</span>;</span></span><br><span class="line">  listen_fd = create_and_bind_socket();</span><br><span class="line">  <span class="keyword">if</span> (listen_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">abort</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  s = make_non_blocking_socket(listen_fd);</span><br><span class="line">  <span class="keyword">if</span> (s == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">abort</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  s = listen(listen_fd, SOMAXCONN);</span><br><span class="line">  <span class="keyword">if</span> (s == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">abort</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  epoll_fd = epoll_create(MAXEVENTS);</span><br><span class="line">  <span class="keyword">if</span> (epoll_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">abort</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  event.data.fd = listen_fd;</span><br><span class="line">  event.events = EPOLLIN;</span><br><span class="line">  s = epoll_ctl(epoll_fd, EPOLL_CTL_ADD, listen_fd, &amp;event);</span><br><span class="line">  <span class="keyword">if</span> (s == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">abort</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  events = <span class="built_in">calloc</span>(MAXEVENTS, <span class="keyword">sizeof</span>(event));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; WORKER_COUNT; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;create worker %d\n&quot;</span>, i);</span><br><span class="line">    <span class="keyword">int</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">      worker_process(listen_fd, epoll_fd, events, i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> status;</span><br><span class="line">  wait(&amp;status);</span><br><span class="line">  <span class="built_in">free</span>(events);</span><br><span class="line">  close(listen_fd);</span><br><span class="line">  <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们用 <code>telnet</code> 发送一下 TCP 请求，看看效果，，我们能得到这样的结果</p><p><img src="https://user-images.githubusercontent.com/7054676/55273414-f4e37500-5305-11e9-8782-a31912228867.png" alt="image"></p><p>恩，我们能看到当一个请求到达时，我们四个进程都被唤醒了。现在为了更直观的看到这一个过程，我们用 <code>strace</code> 来 profile 一下</p><p><img src="https://user-images.githubusercontent.com/7054676/55273457-966ac680-5306-11e9-8666-2ce6ef90dd35.png" alt="image"></p><p>我们还是能看到，四个进程都被唤醒，但是只有 Worker 3 成功 <code>accept</code> ，而其余的进程在 <code>accept</code> 的时候，都获取到了 <code>EAGAIN</code> 错误，</p><p>而 <a href="http://man7.org/linux/man-pages/man2/accept.2.html">Linux 文档</a> 对于 <code>EAGAIN</code> 的描述是</p><blockquote><p>The socket is marked nonblocking and no connections are present to be accepted.  POSIX.1-2001 and POSIX.1-2008 allow<br>either error to be returned for this case, and do not require these constants to have the same value, so a portable<br>application should check for both possibilities.</p></blockquote><p>现在我们对于 EPOLL 的惊群问题是不是有了直观的了解？那么怎么样去解决惊群问题呢？</p><h2 id="惊群问题的现在"><a href="#惊群问题的现在" class="headerlink" title="惊群问题的现在"></a>惊群问题的现在</h2><h3 id="从内核解决惊群问题"><a href="#从内核解决惊群问题" class="headerlink" title="从内核解决惊群问题"></a>从内核解决惊群问题</h3><p>首先如前面所说，Accept 的惊群问题在 Linux Kernel 2.6 之后就被从内核的层面上解决了。但是 EPOLL 怎么办？在 2016 年一月，Linux 之父 Linus 向内核提交了一个补丁</p><p>参见 <a href="https://github.com/torvalds/linux/commit/df0108c5da561c66c333bb46bfe3c1fc65905898">epoll: add EPOLLEXCLUSIVE flag</a></p><p>其中的关键代码是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (epi-&gt;event.events &amp; EPOLLEXCLUSIVE)</span><br><span class="line">add_wait_queue_exclusive(whead, &amp;pwq-&gt;wait);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">add_wait_queue(whead, &amp;pwq-&gt;wait);</span><br></pre></td></tr></table></figure><p>简而言之，通过增加一个 <code>EPOLLEXCLUSIVE</code> 标志位作为辅助。如果用户开启了 <code>EPOLLEXCLUSIVE</code> ，那么在加入内核等待队列时，使用 <code>add_wait_queue_exclusive</code> 否则则使用 <code>add_wait_queue</code></p><p>至于这两个函数的用法，可以参考这篇文章<a href="https://www.halolinux.us/kernel-reference/handling-wait-queues.html">Handing wait queues</a></p><p>其中有这样一段描述</p><blockquote><p>The add_wait_queue( ) function inserts a nonexclusive process in the first position of a wait queue list. The add_wait_queue_exclusive( ) function inserts an exclusive process in the last position of a wait queue list. </p></blockquote><p>好了，我们现在来改一下我们的代码（内核版本要在 Linux Kernel 4.5）之后</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_ADDRESS <span class="meta-string">&quot;0.0.0.0&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_PORT 10086</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WORKER_COUNT 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXEVENTS 64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">create_and_bind_socket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> fd = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_address</span>;</span></span><br><span class="line">  server_address.sin_family = AF_INET;</span><br><span class="line">  inet_pton(AF_INET, SERVER_ADDRESS, &amp;server_address.sin_addr);</span><br><span class="line">  server_address.sin_port = htons(SERVER_PORT);</span><br><span class="line">  bind(fd, (struct sockaddr *)&amp;server_address, <span class="keyword">sizeof</span>(server_address));</span><br><span class="line">  <span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">make_non_blocking_socket</span><span class="params">(<span class="keyword">int</span> sfd)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> flags, s;</span><br><span class="line">  flags = fcntl(sfd, F_GETFL, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (flags == <span class="number">-1</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;fcntl error&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  flags |= O_NONBLOCK;</span><br><span class="line">  s = fcntl(sfd, F_SETFL, flags);</span><br><span class="line">  <span class="keyword">if</span> (s == <span class="number">-1</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;fcntl set error&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">worker_process</span><span class="params">(<span class="keyword">int</span> listenfd, <span class="keyword">int</span> epoll_fd, struct epoll_event *events,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    n = epoll_wait(epoll_fd, events, MAXEVENTS, <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Worker %d pid is %d get value from epoll_wait\n&quot;</span>, k, getpid());</span><br><span class="line">    sleep(<span class="number">0.2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((events[i].events &amp; EPOLLERR) || (events[i].events &amp; EPOLLHUP) ||</span><br><span class="line">          (!(events[i].events &amp; EPOLLIN))) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;epoll err\n&quot;</span>);</span><br><span class="line">        close(events[i].data.fd);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (listenfd == events[i].data.fd) &#123;</span><br><span class="line">        struct sockaddr in_addr;</span><br><span class="line">        <span class="keyword">socklen_t</span> in_len;</span><br><span class="line">        <span class="keyword">int</span> in_fd;</span><br><span class="line">        in_len = <span class="keyword">sizeof</span>(in_addr);</span><br><span class="line">        in_fd = accept(listenfd, &amp;in_addr, &amp;in_len);</span><br><span class="line">        <span class="keyword">if</span> (in_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;worker %d accept failed\n&quot;</span>, k);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;worker %d accept success\n&quot;</span>, k);</span><br><span class="line">        close(in_fd);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> listen_fd, s;</span><br><span class="line">  <span class="keyword">int</span> epoll_fd;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">event</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> *<span class="title">events</span>;</span></span><br><span class="line">  listen_fd = create_and_bind_socket();</span><br><span class="line">  <span class="keyword">if</span> (listen_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">abort</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  s = make_non_blocking_socket(listen_fd);</span><br><span class="line">  <span class="keyword">if</span> (s == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">abort</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  s = listen(listen_fd, SOMAXCONN);</span><br><span class="line">  <span class="keyword">if</span> (s == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">abort</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  epoll_fd = epoll_create(MAXEVENTS);</span><br><span class="line">  <span class="keyword">if</span> (epoll_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">abort</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  event.data.fd = listen_fd;</span><br><span class="line">  <span class="comment">// add EPOLLEXCLUSIVE support</span></span><br><span class="line">  event.events = EPOLLIN | EPOLLEXCLUSIVE;</span><br><span class="line">  s = epoll_ctl(epoll_fd, EPOLL_CTL_ADD, listen_fd, &amp;event);</span><br><span class="line">  <span class="keyword">if</span> (s == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">abort</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  events = <span class="built_in">calloc</span>(MAXEVENTS, <span class="keyword">sizeof</span>(event));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; WORKER_COUNT; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;create worker %d\n&quot;</span>, i);</span><br><span class="line">    <span class="keyword">int</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">      worker_process(listen_fd, epoll_fd, events, i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> status;</span><br><span class="line">  wait(&amp;status);</span><br><span class="line">  <span class="built_in">free</span>(events);</span><br><span class="line">  close(listen_fd);</span><br><span class="line">  <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们来看看效果</p><p><img src="https://user-images.githubusercontent.com/7054676/55273709-c2d41200-5309-11e9-959e-927c1bfbd410.png" alt="image"></p><p>诶？为什么还是有两个进程被唤醒了？原因在于 <code>EPOLLEXCLUSIVE</code> 只保证唤醒的进程数小于等于我们开启的进程数，而不是直接唤醒所有进程，也不是只保证唤醒一个进程</p><p>我们来看看官方的<a href="http://man7.org/linux/man-pages/man2/epoll_ctl.2.html">描述</a></p><blockquote><p>Sets an exclusive wakeup mode for the epoll file descriptor<br>  that is being attached to the target file descriptor, fd.<br>  When a wakeup event occurs and multiple epoll file descriptors<br>  are attached to the same target file using EPOLLEXCLUSIVE, one<br>  or more of the epoll file descriptors will receive an event<br>  with epoll_wait(2).  The default in this scenario (when<br>  EPOLLEXCLUSIVE is not set) is for all epoll file descriptors<br>  to receive an event.  EPOLLEXCLUSIVE is thus useful for avoid‐<br>  ing thundering herd problems in certain scenarios.</p></blockquote><p>恩，换句话说，就目前而言，系统并不能严格保证惊群问题的解决。很多时候我们还是要依靠应用层自身的设计来解决</p><h3 id="应用层解决"><a href="#应用层解决" class="headerlink" title="应用层解决"></a>应用层解决</h3><p>目前而言，应用解决惊群有两种策略</p><ol><li><p>这是可以接受的代价，那么我们暂时不管。这是我们大多数的时候的策略</p></li><li><p>通过加锁或其余的手段来解决这个问题，最典型的例子是 Nginx</p></li></ol><p>我们来看看 Nginx 怎么解决这样的问题的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">ngx_process_events_and_timers(<span class="keyword">ngx_cycle_t</span> *cycle)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>  flags;</span><br><span class="line">    <span class="keyword">ngx_msec_t</span>  timer, delta;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_timer_resolution) &#123;</span><br><span class="line">        timer = NGX_TIMER_INFINITE;</span><br><span class="line">        flags = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        timer = ngx_event_find_timer();</span><br><span class="line">        flags = NGX_UPDATE_TIME;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_use_accept_mutex) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ngx_accept_disabled &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ngx_accept_disabled--;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ngx_trylock_accept_mutex(cycle) == NGX_ERROR) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ngx_accept_mutex_held) &#123;</span><br><span class="line">                flags |= NGX_POST_EVENTS;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (timer == NGX_TIMER_INFINITE</span><br><span class="line">                    || timer &gt; ngx_accept_mutex_delay)</span><br><span class="line">                &#123;</span><br><span class="line">                    timer = ngx_accept_mutex_delay;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    delta = ngx_current_msec;</span><br><span class="line"></span><br><span class="line">    (<span class="keyword">void</span>) ngx_process_events(cycle, timer, flags);</span><br><span class="line"></span><br><span class="line">    delta = ngx_current_msec - delta;</span><br><span class="line"></span><br><span class="line">    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, cycle-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                   <span class="string">&quot;timer delta: %M&quot;</span>, delta);</span><br><span class="line"></span><br><span class="line">    ngx_event_process_posted(cycle, &amp;ngx_posted_accept_events);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngx_accept_mutex_held) &#123;</span><br><span class="line">        ngx_shmtx_unlock(&amp;ngx_accept_mutex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (delta) &#123;</span><br><span class="line">        ngx_event_expire_timers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngx_event_process_posted(cycle, &amp;ngx_posted_events);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们这里能看到，Nginx 主体的思想是通过锁的形式来处理这样问题。我们每个进程在监听 FD 事件之前，我们先要通过 <code>ngx_trylock_accept_mutex</code> 去获取一个全局的锁。如果拿锁成功，那么则开始通过<br><code>ngx_process_events</code> 尝试去处理事件。如果拿锁失败，则放弃本次操作。所以从某种意义上来讲，对于某一个 FD ，Nginx 同时只有一个 Worker 来处理 FD 上的事件。从而避免惊群。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章从去年到现在拖了很久了，惊群问题一直是我们日常工作中遇到的问题，我自己觉得，还是有必要写篇详细的笔记，记录下去年到现在的一些学习记录。差不多就这样吧，祝各位看的好。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;关于惊群问题，其实我是在去年开始去关注的。然后向 CPython 提了一个关于解决 &lt;code&gt;selector&lt;/code&gt; 的惊群问题的补丁 &lt;a href=&quot;https://bugs.python.org/issue35517&quot;&gt;BPO-35517&lt;/a&gt;。现在大概来聊聊关于惊群问题那点事吧&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="网络编程" scheme="http://manjusaka.itscoder.com/categories/%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="编程" scheme="http://manjusaka.itscoder.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Unix" scheme="http://manjusaka.itscoder.com/tags/Unix/"/>
    
    <category term="网络编程" scheme="http://manjusaka.itscoder.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
