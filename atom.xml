<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Manjusaka</title>
  
  <subtitle>写代码的香港记者</subtitle>
  <link href="https://www.manjusaka.blog/atom.xml" rel="self"/>
  
  <link href="https://www.manjusaka.blog/"/>
  <updated>2024-05-19T19:06:04.920Z</updated>
  <id>https://www.manjusaka.blog/</id>
  
  <author>
    <name>Manjusaka</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SRE 日志：我的包去哪了？</title>
    <link href="https://www.manjusaka.blog/posts/2024/05/11/where-are-my-package/"/>
    <id>https://www.manjusaka.blog/posts/2024/05/11/where-are-my-package/</id>
    <published>2024-05-11T17:00:00.000Z</published>
    <updated>2024-05-19T19:06:04.920Z</updated>
    
    <content type="html"><![CDATA[<p>这算是新开的一个系列，主要是记录一些 SRE 日常帮自己/帮人调试问题的经历。会完整的记录排查的过程。希望能帮上大家的忙</p><p>这篇是一个非常常见的问题，我的包去哪了？</p><span id="more"></span><h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>群里的的一个小伙伴提出了一个问题，他在用 dind （Docker in Docker）的时候，A 容器往 B 容器发送的 UDP 包，B 容器能收到，但是 A 容器收不到返回的值。</p><p>OK， 是个很经典的“我的包去哪了“的问题。</p><p>我们先来构建一下本地的环境看能不能复现</p><ol><li>本机的 IP 为 192.168.0.239</li><li>我们单独隔离出一个 network ，CIDR 为 172.18.0.0/16</li><li>我们先跑一个 dind 容器，name 为 dind1， IP 为 172.18.0.2, 暴露 UDP 4000 端口至 Host</li><li>我们再跑一个 dind 容器，name 为 dind2， IP 为 172.18.0.3</li><li>dind1 中启动一个容器运行一段简单的 UDP 服务，监听 4000 端口，IP 为 172.17.0.2，暴露 UDP 4000 端口至 dind1</li><li>dind2 中启动一个容器，IP 为 172.17.0.2, 执行 UDP 客户端，通过 192.168.0.239 的 4000 端口发送一个 UDP 报文</li></ol><p>UDP Server 和 UDP Client 的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">udp_echo_server</span>(<span class="params">host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">4000</span></span>):</span><br><span class="line">    <span class="keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_DGRAM) <span class="keyword">as</span> sock:</span><br><span class="line">        sock.bind((host, port))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Server started at <span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data, addr = sock.recvfrom(<span class="number">1024</span>)  </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Received from <span class="subst">&#123;addr&#125;</span>: <span class="subst">&#123;data.decode()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            sock.sendto(data, addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    udp_echo_server()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_message</span>(<span class="params">host=<span class="string">&#x27;192.168.0.239&#x27;</span>, port=<span class="number">4000</span>, message=<span class="string">&#x27;Hello, UDP!&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_DGRAM) <span class="keyword">as</span> sock:</span><br><span class="line">        sock.sendto(message.encode(), (host, port))</span><br><span class="line">        data, _ = sock.recvfrom(<span class="number">1024</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Received from server: <span class="subst">&#123;data.decode()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    send_message()</span><br></pre></td></tr></table></figure><p>我们来看下现象</p><p><img src="https://github.com/Zheaoli/zheaoli.github.io/assets/7054676/39cdb9a5-6c2d-4481-8e85-aba8399e5de4" alt="本地复现"></p><p>emmmm，能够正确复现</p><p>我们直接来抓一下包看看（直接抓虚拟网桥 br-xxxx 上的包）</p><p><img src="https://github.com/Zheaoli/zheaoli.github.io/assets/7054676/b9745dce-8b19-43b6-ba04-be8de6d1461d" alt="Wireshark 抓包结果"></p><p>唔，我们看到第三个 172.18.0.2 已经向来程回包了，那么为什么我们客户端没有收到呢？包去哪了？（实际上 wireshark 这一步已经能确定问题了）</p><p>这个时候我们祭出 pwru ，Cilium 做的工具，可以抓内核包（表现为 skb）在内核中的处理流程（感兴趣的话我可以写个实现解析），来看看</p><p>因为我们是回程的时候出的问题，所以我们需要抓 src port 为 4000 的 UDP 包，执行 <code>sudo pwru &#39;src port 4000&#39;</code></p><p>看下日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608] __netif_receive_skb_one_core</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608]                   ip_rcv</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608]              ip_rcv_core</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608]               sock_wfree</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608]             nf_hook_slow</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608]              nf_checksum</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608]           nf_ip_checksum</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608]       udp_v4_early_demux</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608]     ip_route_input_noref</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608]      ip_route_input_slow</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608]      fib_validate_source</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608]    __fib_validate_source</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608]         ip_local_deliver</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608]             nf_hook_slow</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608]  ip_local_deliver_finish</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608]  ip_protocol_deliver_rcu</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608]        raw_local_deliver</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608]                  udp_rcv</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608]           __udp4_lib_rcv</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608]              __icmp_send</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608]        __ip_options_echo</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608] security_skb_classify_flow</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608] bpf_lsm_xfrm_decode_session</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608]    __xfrm_decode_session</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608] security_xfrm_decode_session</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608] bpf_lsm_xfrm_decode_session</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608] kfree_skb_reason(SKB_DROP_REASON_NO_SOCKET)</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608]   skb_release_head_state</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608]         skb_release_data</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608]            skb_free_head</span><br><span class="line">0xffff9f7827643600     24 [/usr/bin/docker-proxy:53608]             kfree_skbmem</span><br></pre></td></tr></table></figure><p>我们看到了一个 <code>SKB_DROP_REASON_NO_SOCKET</code>，这个意思是因为没有对应的 socket 存在，所以直接丢弃了 skb</p><p>神奇，通常来说，我们 UDP 的包在 iptables 等路径上是由 conntrack 的存在的，意味着我们的包应该是有对应的 socket 的，为什么会没有呢？</p><p>我们来看下 dind2 conntrack 的状态，我们可以通过 <code>/proc/net/nf_conntrack</code> 获取到 conntrack 的信息</p><p>这里我们先看一下 dind2 的 conntrack 信息</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ipv4     2 udp      17 27 src=172.17.0.2 dst=192.168.0.239 sport=34320 dport=4000 [UNREPLIED] src=192.168.0.239 dst=172.18.0.3 sport=4000 dport=34320 mark=0 zone=0 use=2</span><br><span class="line">ipv4     2 udp      17 27 src=172.18.0.1 dst=172.18.0.3 sport=4000 dport=34320 [UNREPLIED] src=172.18.0.3 dst=172.18.0.1 sport=34320 dport=4000 mark=0 zone=0 use=2</span><br></pre></td></tr></table></figure><p>啊哈！问题在这里（其实很多时候 SKB_DROP_REASON_NO_SOCKET 的问题可以先去看下 conntrack 的状态），我们去程的包是</p><ul><li>src=172.17.0.2 dst=192.168.0.239 sport=34320 dport=4000</li></ul><p>回程的时候变成</p><ul><li>src=172.18.0.1 dst=172.18.0.3 sport=4000 dport=34320</li></ul><p>这完全不一样嘛，而我们的 dind2 没有打开 34320 端口，同时 conntrack 也没有对应的状态，所以直接丢弃了 skb</p><p>那么为什么会发生这样的改变呢？我们用 pwru 来看下 skb 的处理流程，日志文件太长，我将原始文件贴在这里，欢迎大家去分析 <a href="https://gist.github.com/Zheaoli/f0a485fc3c6e5f60af486c8198f895ab">https://gist.github.com/Zheaoli/f0a485fc3c6e5f60af486c8198f895ab</a></p><p>这里我们说一下日志的结论，截止到 <code>SKB_DROP_REASON_NO_SOCKET</code> 的时候，我们有这样一些关键变化</p><ol><li>172.17.0.2:34320 -&gt; 192.168.0.239:4000 </li><li>172.18.0.3:34320 -&gt; 192.168.0.239:4000</li><li>172.18.0.1:34320 -&gt; 172.18.0.2:4000</li><li>172.18.0.2:4000 -&gt; 172.18.0.1:34320</li><li>172.18.0.1:4000 -&gt; 172.18.0.3:34320</li></ol><p>我们来解释下，</p><ol><li>第一跳非常简单，原始的包</li><li>第二条是在包到达 dind2 的时候，iptables 做了一次 SNAT 的操作，将源地址改为 dind 的 IP 地址</li><li>然后包到达宿主机后，因为 docker proxy 监听了所有的端口，所以会捕获这个包，然后根据规则，转发向 172.18.0.2</li><li>然后 docker proxy 向 172.18.0.2 转发的包，因为路由的规则，ip 地址会变成 172.18.0.1 </li><li>剩下的就是正常的回程了，</li></ol><p>写到这里大家可能已经发现了问题，我们向 192.168.0.239 直接发送的包，没有离开机器，所以 IP 地址不会被 MASQUERADE 为本机的 IP，然后直接被 docker-proxy 接管后 src ip 依旧为 172.18.0.3，导致了 conntrack 的状态不匹配，所以最终在 172.18.0.3 上没有对应的 socket，导致了 skb 被丢弃</p><p>我们可以截取一部分日志来看</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0xffff9f7898af0200     10 [/usr/bin/python3.12:155497]     ipv4_pktinfo_prepare netns=4026531840 mark=0x0 iface=4(br-1534421c90dc) proto=0x0800 mtu=1500 len=11 172.18.0.3:40870-&gt;192.168.0.239:4000(udp)</span><br><span class="line">0xffff9f7898af0200     10 [/usr/bin/python3.12:155497] __udp_enqueue_schedule_skb netns=4026531840 mark=0x0 iface=4(br-1534421c90dc) proto=0x0800 mtu=1500 len=11 172.18.0.3:40870-&gt;192.168.0.239:4000(udp)</span><br><span class="line">0xffff9f7898af0200     19 [/usr/bin/docker-proxy:53608]          skb_consume_udp netns=0 mark=0x0 iface=0 proto=0x0800 mtu=0 len=11 172.18.0.3:40870-&gt;192.168.0.239:4000(udp)</span><br><span class="line">0xffff9f7898af0200     19 [/usr/bin/docker-proxy:53608]  __consume_stateless_skb netns=0 mark=0x0 iface=0 proto=0x0800 mtu=0 len=11 172.18.0.3:40870-&gt;192.168.0.239:4000(udp)</span><br><span class="line">0xffff9f7898af0200     19 [/usr/bin/docker-proxy:53608]         skb_release_data netns=0 mark=0x0 iface=0 proto=0x0800 mtu=0 len=11 172.18.0.3:40870-&gt;192.168.0.239:4000(udp)</span><br><span class="line">0xffff9f7898af0200     19 [/usr/bin/docker-proxy:53608]            skb_free_head netns=0 mark=0x0 iface=0 proto=0x0800 mtu=0 len=11 172.18.0.3:40870-&gt;192.168.0.239:4000(udp)</span><br><span class="line">0xffff9f7898af0200     19 [/usr/bin/docker-proxy:53608]             kfree_skbmem netns=0 mark=0x0 iface=0 proto=0x0800 mtu=0 len=11 172.18.0.3:40870-&gt;192.168.0.239:4000(udp)</span><br><span class="line">0xffff9f7935554700     19 [/usr/bin/docker-proxy:53608]              udp4_hwcsum netns=4026531840 mark=0x0 iface=0 proto=0x0000 mtu=0 len=39 172.18.0.1:36794-&gt;172.18.0.2:4000(udp)</span><br><span class="line">0xffff9f7935554700     19 [/usr/bin/docker-proxy:53608]              ip_send_skb netns=4026531840 mark=0x0 iface=0 proto=0x0000 mtu=0 len=39 172.18.0.1:36794-&gt;172.18.0.2:4000(udp)</span><br><span class="line">0xffff9f7935554700     19 [/usr/bin/docker-proxy:53608]           __ip_local_out netns=4026531840 mark=0x0 iface=0 proto=0x0000 mtu=0 len=39 172.18.0.1:36794-&gt;172.18.0.2:4000(udp)</span><br><span class="line">0xffff9f7935554700     19 [/usr/bin/docker-proxy:53608]             nf_hook_slow netns=4026531840 mark=0x0 iface=0 proto=0x0800 mtu=0 len=39 172.18.0.1:36794-&gt;172.18.0.2:4000(udp)</span><br><span class="line">0xffff9f7935554700     19 [/usr/bin/docker-proxy:53608]                ip_output netns=4026531840 mark=0x0 iface=0 proto=0x0800 mtu=0 len=39 172.18.0.1:36794-&gt;172.18.0.2:4000(udp)</span><br></pre></td></tr></table></figure><p>差不多问题就这样，实际上我们复盘整个问题排查流程，我们实际上可以在 wireshark 抓包的时候就能大致的确定问题的范围，有效利用 pwru 等新时代的工具，可以更快的定位问题。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>留两个课后作业</p><ol><li>为什么其余 Host 同级别机器的包能正常和 dind1 里的 udp server 通信？</li><li>TCP 存在同样问题吗？如果不，为什么</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;这算是新开的一个系列，主要是记录一些 SRE 日常帮自己/帮人调试问题的经历。会完整的记录排查的过程。希望能帮上大家的忙&lt;/p&gt;
&lt;p&gt;这篇是一个非常常见的问题，我的包去哪了？&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://www.manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://www.manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/Linux/"/>
    
    
    <category term="编程" scheme="https://www.manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://www.manjusaka.blog/tags/Linux/"/>
    
    <category term="笔记" scheme="https://www.manjusaka.blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="水文" scheme="https://www.manjusaka.blog/tags/%E6%B0%B4%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>简单聊聊奥特曼中很有趣的细节</title>
    <link href="https://www.manjusaka.blog/posts/2024/02/20/a-simple-discussion-about-the-ultraman/"/>
    <id>https://www.manjusaka.blog/posts/2024/02/20/a-simple-discussion-about-the-ultraman/</id>
    <published>2024-02-20T09:00:00.000Z</published>
    <updated>2024-05-19T19:06:04.916Z</updated>
    
    <content type="html"><![CDATA[<p>奥特曼其实一直以来被打上了子供向的标示，导致很多人在提起的时候总会有一种“多大年纪了，还看奥特曼”的感觉。但是实际上，奥特曼里面有很多很有趣的细节。监督和脚本们试图通过这一些细节来表达自己的很多想法。很多不乏超越时代</p><p>注：本文起始语“ヒーロが必要なんだよ，金城君。ヒーローが必要なんだ！”出自《迪迦.奥特曼》第49话，ウルトラの星/奥特之星（监督 原田昌树/満田かずほ， 脚本：上原正三）</p><p>注注：我本来想用“ウルトラマン、そんなに地球人が好きになったのか” 这句的（奥特曼，你就这么喜欢地球人吗?），出自《奥特曼》第39话さらばウルトラマン/再见奥特曼（监督：圆谷一，脚本：金城哲夫）。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>奥特曼系列的第一话是1966年7月17日的 ウルトラ作戦第一號/奥特曼作战第一号， 但是如果从《奥特Q》开始算的话，1966年1月2日的 打倒哥美斯!则是奥特系列的起点。在从1966年到现在的这半个多世纪的时间里，日本社会和整个人类社会也是可以说风云变幻。奥特曼系列不可避免的在这个过程中，受社会思潮的影响。不同的监督和脚本试图讲述不同的故事，这也造就了奥特曼系列独特的气质</p><p>本文大概会从三个方面去聊聊奥特曼中很有趣的细节</p><ol><li>现实映射</li><li>拍摄手法</li><li>宗教气质</li></ol><h3 id="现实映射"><a href="#现实映射" class="headerlink" title="现实映射"></a>现实映射</h3><p>对现实的映射其实一直是各种文艺作品经典的套路。奥特曼其实也不避免。这一点在奥特曼前期四部作品中，现实映射的气质格外明显（也就是昭和四老，初代，赛文，归曼，艾斯）。这四部作品算是奠定了奥特系列现实讨论的基调。如果说概括来分的话，大体可以分为这样几类</p><ol><li>讨论国际问题</li><li>讨论原住民问题</li><li>日本社会问题</li></ol><p>我会挨个挑一些很有趣的细节出来聊</p><h4 id="讨论国际问题"><a href="#讨论国际问题" class="headerlink" title="讨论国际问题"></a>讨论国际问题</h4><p>奥特曼里国际问题的讨论其实某种意义是对于美苏争霸这种时代大势的一种反馈，这里面代表作的两话分别是作为昭和问题三大作之一的 故郷は地球/故乡是地球 以及赛文奥特曼第26话 超兵器R1号/超兵器R1号</p><p>先聊聊 故郷は地球/故乡是地球 这一话。剧情是这样：</p><blockquote><p>在东京召开和平峰会之际，各国代表乘坐的飞机突然失事。科特队受命调查。发现了一艘隐形的飞船，以及飞船里的怪兽贾米拉。</p></blockquote><p>在第一轮击退怪兽后，来自巴黎总部的艾伦解释了这个怪兽的来历：“諸君、あれは怪獣なのではありません。あれは……いや、彼は我々と同じ人間なのです/各位，那不是怪物，实际上是……不，他和我们一样是人类”</p><blockquote><p>在美苏争霸期间，某个国家向太空发射了飞船，飞船失事后，迫降在了一个没有水和空气的星球上。在最恶劣的环境中，宇航员被迫”进化“成怪兽，在改造自己的飞船后，回到地球复仇</p></blockquote><p>在知道前因后果后，科特队员一度失去了战意，但是总部的命令却非常残酷”ジャミラの正体を明かすことなく、宇宙から来た一匹の怪獣として葬り去れ！/不要揭露贾米拉的真实身份，将他作为一只来自宇宙的怪兽埋葬！”</p><p>最后在科特队员的努力下，贾米拉被击败。在结尾，井手队员站在贾米拉的纪念碑前，看着上面的文字“A JAMILA 　(1960-1993) ICI DORT 　CE GUERRIER QUI S’EST SACRIFIE EN QUETE D’IDEAL 　POUR L’HUMANITE AINSI QUE POUR LE PROGRES 　SCIENTIFIQUE”（贾米拉（1960-1993）这里长眠着一个为了人类和科学进步而献身的战士）说出了传世经典：</p><blockquote><p>犠牲者はいつもこうだ。文句だけは美しいけれど/对被牺牲者都这样，挑一些场面上的赞美性的漂亮说辞罢了。</p></blockquote><p>这一话除去奥特曼的打斗情节，整个文戏流畅而令人隐形深刻。人性的丑陋，冷战时的残酷在监督的手下表现的凌厉而又真实。顺带一提这一话的监督实相寺昭雄和脚本佐佐木守也贡献了奥特赛文第十二话这一传世经典</p><p>而我觉得代表作的另外一话是赛文奥特曼第26话 超兵器R1号/超兵器R1号。剧情是这样，奥特警备队所属的地球防卫军创造了一种全新的武器 R1， 队员们正在讨论这种武器的正当性，团和古桥队员之间发生了传世经典的对话</p><blockquote><p>团：参謀にお願いしてきます、実験の中止を!/我去找参谋长，请求停止实验！<br>古桥：いや、忘れるなダン、地球は狙われているんだ。今の我々の力では守りきれないような強大な侵略者がきっと現れる。その時のために··/不，别忘了，丹，地球正被瞄准着。现在我们的力量是无法守住的，一定会出现我们无法抵挡的强大侵略者。为了那个时候···<br>团: 超兵器が必要なんですね/需要超兵器吗<br>古桥: 決まっているじゃないか!/这还用说吗！<br>团: 侵略者は、超兵器に対抗してもっと強烈な破壊兵器を作りますよ!/侵略者会制造更强大的破坏兵器来对抗超兵器！<br>古桥: 我々は、それよりも強力な兵器をまた作ればいいじゃないか!/我们也制造更强大的兵器不就行了吗！<br>团: それは、血を吐きながら続ける···、悲しいマラソンですよ/那就像是，一边吐血一边继续奔跑的，悲哀的马拉松。</p></blockquote><p>吐血马拉松其实是军备竞赛很直接的注解，很生动，也很形象。在这一话中，结局也非常的令人伤感，基耶龙星/ギエロン星 作为 R1 的实验地被人类摧毁，而基耶龙星兽作为整个星球最后的遗民飞往地球复仇，最后在赛文奥特曼的头镖下咽下了最后一口气。这一切到底是谁的错误？这也是脚本想留下来让人思考的问题吧</p><p>实际上流血马拉松也一直延续到了赛文90年代 OVA 三部曲中，面对何志参谋说出的</p><blockquote><p>フルハシ参謀…もう貴方に遠虑することはない。歴史が証明してくれます…私が正しかったことを。太陽系の各惑星に前線基地を置き…侵略の可能性のある星に先手を撃つ。それが地球の平和を守る手段です。/古桥参谋，我已不必再跟您客气了。历史将证明，我才是正确的。在太阳系的各个行星建设前线基地，遇到有侵略可能性的星球便先发制人。这才是保护地球和平的手段。<br>歴史をひもとけば分かるはずだ。二つの文明が遭遇した時、必ず高度な文明が、もう一つの文明を滅亡させる。地球だけではなく、この法則は宇宙にも当て嵌まるんだよ。/翻开历史便能明白，当两大文明遭遇时，一定是发达的文明灭绝另一个文明。这个法则不仅适用于地球，也适用于宇宙。</p></blockquote><p> 团也不由得再次感叹 “人類はまだ続けているのか……血を吐きながら続ける悲しいマラソンを……/人类还在继续着，一边吐血一边奔跑的可悲的马拉松。”</p><p>这种黑暗森林的思路是对，是错，从立场不同的人来看答案都是不一样的。但是从如今的视角来说，可能我觉得迪迦奥特曼开头的旁白更能适合这一章节的结束</p><blockquote><p>21世紀初頭、憎しみや争い事は減り、自然は美しさを取り戻そうとしていた。この星に生きるすべてのものの願い、平和がようやく叶えられようとしていた/21世纪初，仇恨和争斗减少，自然也开始恢复美丽。这个星球上生活的所有生物的愿望，和平终于要实现了。</p></blockquote><h4 id="讨论原住民问题"><a href="#讨论原住民问题" class="headerlink" title="讨论原住民问题"></a>讨论原住民问题</h4><p>实际上原住民问题的讨论一直是奥特历史中很浓墨众彩的一笔，所以我选择单独把这一章从日本国内问题中分离出来。</p><p>在继续讨论前我们需要了解一点日本的国内的特殊情况。日本主要的民族冲突为两点</p><ol><li>琉球群岛/冲绳群岛问题</li><li>北海道原住民问题</li></ol><p>这两点其实在其余日本文艺作品中也有所提现。举两个例子，在动画 《New Game》 中，程序部门的主管为 （阿波根 うみこ/阿波根海子）（姓氏假名写法为：あはごん），她很讨厌别人以姓称呼自己（以为耻）（这个姓氏非日本本土姓）。另外一个典型例子是《银之匙》中的女主御影 アキ/御影亚纪，她有无意间说本土方言的习惯，但是会在不小心说方言后表现出莫名的耻感（日本人特殊的耻感爆棚）</p><p>回到奥特曼本身，昭和问题三大作中有两作是在讨论原住民问题，分别是赛文奥特曼第42话 ノンマルトの使者/农马尔特的使者，以及归曼第33话怪獣使いと少年/怪兽使者与少年。实际上早在初代奥特曼第33话 禁じられた言葉/被禁止的语言 中，身为冲绳人的脚本金城哲夫（金城和前面所聊到的 阿松波一样便借着美菲拉斯星人之口问出了 “黙れ、ウルトラマン！貴様は宇宙人なのか？人間なのか？/闭嘴，奥特曼！你到底是宇宙人还是人类？”（这里实际上是暗问：“你是日本人，还是冲绳人”），而早田的回答“両方さ/两者都是”是否也是金城自己想说的一个答案。</p><p>实际上金城哲夫的思考并不仅限于此，在看到美军从自己家乡起飞轰炸越南的飞机后，在思考自己作为冲绳人在日本所处的尴尬地位，然后有了不朽的经典 ノンマルトの使者/农马尔特的使者。在本作中，脚本陛下设定了这样一个架空场景，人类其实并不是地球的原住民，而农马尔特人才是。在大约15000年前，农马尔特人被人类赶往了海底的世界。而在本作中，农马尔特人仅存的生存地再一次的被人类所侵犯。他们放出了自己的守护怪兽。但是在赛文奥特曼将怪兽击败后，农马尔特人仅存的生存地海底都市也被奥特警备队所摧毁</p><p>桐山队长在摧毁农马尔特人时所说的台词 “我々の勝利だ！海底も我々人間のものだ！/我们胜利了！海底也是我们人类的了！” 也让这一话的意味深长。奥特曼是否是正确的，而我们是否是正确的，这种疑问大概也是脚本和监督想留给大家思考的</p><p>如果说金城哲夫对于这个问题的映射还略显含蓄的话，那么作为奥特脚本里另外一位很有名的冲绳人上原正三，对于这个问题的讽刺就是无比的辛辣，归曼第33话怪獣使いと少年/怪兽使者与少年，我觉得可能是奥史上最为残酷的一次</p><p>一个来自北海道的失去双亲的孩子，在怪兽袭击之时，被梅茨星人救下。在梅茨星人身体被地球环境污染侵蚀的愈发严重之际，少年试图从地底挖出梅茨星人的飞船，想通梅茨星人一同离开地球。在这个过程中，少年因为旁人对于他一些能力的恐惧（实际上是梅茨星人为了保护少年而做出的一些行为）而被不断的欺凌，活埋，放狗咬等等。在最后，人类的恐惧最终还是杀害了对于地球毫无侵略想法的梅茨星人。但是也放出了梅茨星人之前为保护少年所封印的怪兽。这个时候，乡秀树也陷入了对于自己战斗意义的迷茫。虽说最后还是以奥特曼获胜告终，但是这剧情足以让人感到一种彻骨的寒冷</p><p>而剧中少年的设定是北海道江差的阿伊努人，而梅茨星人的名字叫作金山，作为在日朝鲜人最常用姓氏，也不由得想起关东大地震时期日本本土对于在日朝鲜人的歧视与破坏。而少年喊出的那句 “僕の生まれた所は北海道の江差だ，僕は日本人/我出生在北海道的江差，我是日本人” ，也是意味深长</p><p>编剧在剧中设定的一个场景，少年在买面包被拒后，面对面包店老板女儿追出来给他面包的时候说出了 ”同情なんてしてもらいたくないな/我不需要你的同情“，而面包店老板女儿所做出的回应 ”同情なんかしてないわ売ってあばるたけよ/我又没同情你，只是卖给你而已“ 可能是编剧想告诉我们的东西</p><p>自由的尊重是我们所有人都应该拥有的权利。</p><h4 id="日本社会问题"><a href="#日本社会问题" class="headerlink" title="日本社会问题"></a>日本社会问题</h4><p>实际上奥特曼讨论日本问题一直是老传统了，其实前一章所述的原住民问题也是日本社会问题的一部分，不过被我单独拿出来讲了。而刨开老生常态的环境和反战问题之类的话题，大体可以分为几类</p><ol><li>当代青年的迷茫</li><li>女性问题</li></ol><p>首先聊聊当代青年迷茫的问题。其实在奥特曼最早期的年代里1960年代末到1970年代，在当时的几个大背景下</p><ol><li>美日安保条约续约</li><li>冲绳回归日本，但是美军依旧享受治外法权</li><li>大学参与进越南战争</li><li>东大安田讲堂事件</li><li>国际左翼与国际共运</li></ol><p>在这样一些大背景下，日本学生运动风起云涌（请不要无关联想），这一代的日本人实际上处在一个特殊的迷茫期（大家都在迷茫.jpg），这样一种朝气且迷茫的气质在艾斯奥特曼中表现的尤甚</p><blockquote><p>PS：艾斯奥特曼本身就是极为左翼的一部作品</p></blockquote><p>我们可以来看一下艾斯第二十话，一位从大学退学出来环游世界的青年对着北斗星司出了这样一段话</p><blockquote><p>俺が大学を飛び出してきた気持ちが/我离开大学的心情<br>あんたなんかには分かるもんか/你这种人是没法理解的<br>自由だ/是自由<br>解放だ/是身心解放<br>みんな勝手とばかりやりやがって/每个人都想随心所欲的生活<br>真実なんてどこにもありやいい/真实感却无处存在<br>一体何を信じたらいいんだ 俺たちば/我们到底应该相信什么</p></blockquote><p>而在超兽出来后，面对即将被毁的船，北斗星司和和这位青年也有这样的对话</p><blockquote><p>北斗: この町の人たちとあの船どどっちが大切なんだ/这个城市的人和那艘船，哪个更重要<br>青年: 俺には船のほうがだ/对我来说是船<br>青年: あんな超獣なんかにやられてたまるか/怎么能被那种超兽打败<br>青年: 俺は船を守るぞ/我要保护船<br>北斗：バカ野郎， ちっとは自分の命のことも考えろ/笨蛋，你好歹也考虑下自己的命<br>青年：船は俺の命なんだ/船就是我的命</p></blockquote><p>在日本学运乃至武装暴动的大背景下，这段对话回看起来也是蛮有味道的</p><p>顺带一提，我很喜欢奥特系列脚本的一个原因在于，他们不会给出一个肯定的答案，或者说，相反他们也会表现出迷茫，比如说，在同一话里，身为一个军事组织的成员的北斗，也有着自己的迷茫</p><blockquote><p>最後の航海が今から3年前か。ぢようど俺がタックへ入隊した頃だ。あいつが言うように。俺もこの船もその日から鎖につながれて，自由を失ってしまったんだろうか/这艘船最后的航行是在三年前。正好是我加入TAC的时候。就像他说的一样，我和这艘船从那天起就被锁链所束缚，失去了自由吗？</p></blockquote><p>这可能也是时代的迷茫.jpg</p><p>而与此同时，在这样一种时代背景下，随着女性解放思潮的进一步发展，除开奥特曼形象受之影响（艾斯.jpg），脚本和监督也在尝试在剧集中进行讨论，归曼第43话 魔神 月に咆える/魔鬼下月光下咆哮 和第49话 狙われた女/被盯哨的女人 便是其中代表作（这两话脚本都是 石堂淑朗）</p><p>在43话中，伊吹队长在回家后，关于女儿美奈子有这样一段很有趣的对话</p><blockquote><p>外婆：美奈子も大きくなったら マットの人のお嫁さんになるのかね/美奈子长大后会嫁给 MAT 队的人吗？<br>美奈子：なの嫌いよ/我才不要<br>伊吹: マットは私1人たくさんというわけだな/是觉得家里有一个 MAT 队员就够了把<br>美奈子：違うの，マットの人のお嫁さんにならないってことは，マットの隊員になるということを妨げはしないわ/不是的，不想嫁给 MAT 队员是为了不妨碍我成为 MAT 队员<br>美奈子妈妈：女の子のくせに/女孩子家家的<br>美奈子：だって丘隊員だって女/可是丘队员也是女的<br>伊吹：まつお前は平凡な男と結婚してくれ,そのほうがお父さんは安心だ/算了，你还是找个普通的男生结婚吧，这样我才会更放心一些<br>美奈子：嫌よ私はウーマンサプ派な/不要，我可是女权主义者</p></blockquote><p>这一段对话，即便从今天的眼光来看，也是非常的超前的。</p><h4 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h4><p>其实奥特曼剧作里，非常精巧的片段还很多，有些是脚本/监督来表达自己心中的想法，有些是受时代环境的影响（另外一个很典型的例子是雷欧当年受到《日本沉没》系列很深刻的影响）。限于篇幅，这里不再展开了。如果有兴趣的话，感觉我可以开个系列单篇来做单元回的解析</p><h3 id="拍摄手法"><a href="#拍摄手法" class="headerlink" title="拍摄手法"></a>拍摄手法</h3><p>实际上奥特曼系列作为特摄剧，一直在孜孜不倦的追求视觉效果的形式。从初代奥特曼首次空战巴尔坦星人开始，到手绘出的艾斯的梅塔利姆光线。监督一直在尝试给观众全新的视觉体验。不过说实话，我觉得目前的奥有点漫威的感觉，过多的特效，失去了原本那种精心制作的感觉。</p><p>抛开个人碎碎念以外，我自己觉得奥特摄影的巅峰应该是在迪迦，可能熟悉的人已经猜出来我想说什么了，16话よみがえる鬼神/苏醒的鬼神，37话花。将日式美学和能剧元素发挥到了极致，一种特殊的美轮美奂</p><p>这个时候必须上图了</p><p><img src="https://github.com/Zheaoli/zheaoli.github.io/assets/7054676/c9320cbf-ab87-4758-919c-3fabbe2ba621" alt="鸟居下的战斗"></p><p><img src="https://github.com/Zheaoli/zheaoli.github.io/assets/7054676/4036eb54-1301-4eb1-89bd-5db55d51cc9b" alt="樱花下的战斗"></p><p>说实话，我觉得这种特殊的美感，简直让我一身鸡皮疙瘩</p><h3 id="宗教气质"><a href="#宗教气质" class="headerlink" title="宗教气质"></a>宗教气质</h3><p>其实奥特曼的宗教气质一直非常的浓厚。其实千言万语归为一个问题</p><blockquote><p>奥特曼是人还是神？</p></blockquote><p>在早期的两部作品中，初代和赛文，毫无疑问的是神性非常重的化身。从更高的维度去观察人类，注视人类。初代结局佐菲问初代的“ウルトラマン、そんなに地球人が好きになったのか”，不由的让人有一种神爱世人的联想。而赛文奥特曼所设定的，深爱着人类，帮人类所承担了人类的罪恶，这种设定也是非常的神性</p><blockquote><p>我们若认自己的罪，神是信实的，是公义的，必要赦免我们的罪，洗净我们一切的不义。 — 《新约》约翰一书1:9</p></blockquote><p>而从归曼开始，人性的部分开始融入到奥特曼的内核中，奥特曼会因为人间体至爱被外星人杀害而陷入极端愤怒，而人间体也会因为目睹人类的黑暗而质疑战斗的意义</p><p>到了迪迦，可能居间惠队长的一段话，为这个长达20余年的争论画下了一个暂时的休止符</p><blockquote><p>最初にウルトラマンをこの目で見たとき私は神に出会えたと思った。人類を正しい方向に導いてくれる存在だと。でも違うのよね。それがだんだん分かってきたの。ウルトラマンは光であり人なのね。/我最初见到奥特曼时，以为遇到了神，以为他是将人类指引往正确道路的存在。但是我错了，后来我才渐渐明白，奥特曼既是光，也是人。</p></blockquote><p><img src="https://github.com/Zheaoli/zheaoli.github.io/assets/7054676/d69eb708-4da7-47b1-8cc4-74b7e6193d3d" alt="是神但是也是人"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>奥特曼走到如今，已经过去了半个世纪。在这半个世纪中，不同的脚本和监督一起给无数的人绘制了一个梦幻的世界。这也是我想用 “ヒーロが必要なんだよ，金城君。ヒーローが必要なんだ！” 来做为本文开头的原因</p><p>而怎么结束这篇文章呢</p><p>毫无疑问的还是那句话</p><p>ウルトラマン大好きだ</p>]]></content>
    
    
    <summary type="html">ヒーロが必要なんだよ，金城君。ヒーローが必要なんだ！</summary>
    
    
    
    <category term="人生" scheme="https://www.manjusaka.blog/categories/%E4%BA%BA%E7%94%9F/"/>
    
    <category term="杂记" scheme="https://www.manjusaka.blog/categories/%E4%BA%BA%E7%94%9F/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="人生" scheme="https://www.manjusaka.blog/tags/%E4%BA%BA%E7%94%9F/"/>
    
    <category term="杂记" scheme="https://www.manjusaka.blog/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>简单聊聊 CVE-2024-21626</title>
    <link href="https://www.manjusaka.blog/posts/2024/02/10/CVE-2024-21626/"/>
    <id>https://www.manjusaka.blog/posts/2024/02/10/CVE-2024-21626/</id>
    <published>2024-02-10T20:00:00.000Z</published>
    <updated>2024-05-19T19:06:04.916Z</updated>
    
    <content type="html"><![CDATA[<p>本来这篇文章应该在初一凌晨发的，但是拖延癌晚期，所以到现在才发，得反思下了</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>众所周知，容器逃逸并不是什么令人稀奇的问题了（不被逃逸的容器才是稀奇），2月初，runc 社区正式公布了一个船新的逃逸 CVE，参见 <a href="https://github.com/opencontainers/runc/security/advisories/GHSA-xr7r-f8xq-vfvv">https://github.com/opencontainers/runc/security/advisories/GHSA-xr7r-f8xq-vfvv</a>，版本横跨 1.0 到 1.1.11</p><p>这个 CVE 的核心特性在于“可以通过镜像分发的方式，成本很低的进行逃逸”</p><p>我们先来复现一下这个问题</p><p>我自己的环境是这样</p><p><img src="https://github.com/Zheaoli/zheaoli.github.io/assets/7054676/635aadfa-4015-4424-a6d8-2ad1ca3b721b" alt="复现版本"></p><p>看这篇博客的同学可以参考下面方式进行环境准备，</p><ol><li>按照自己的发行版确保安装了，Docker, libseccomp, golang</li><li>按照下面方式进行环境安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/opencontainers/runc</span><br><span class="line"></span><br><span class="line">git checkout v1.1.0-rc.1</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">rm</span> -rf $(<span class="built_in">which</span> runc)</span><br><span class="line"></span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>然后我们可以准备这样一个 Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Sets the current working directory for this image</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /proc/self/fd/7/</span></span><br></pre></td></tr></table></figure><p>执行 <code>docker build . -t test</code></p><p>然后我们可以执行 <code>docker run --rm -ti test bash</code>，需要多次才能执行成功， 执行成功后我们进入容器 shell</p><p><img src="https://github.com/Zheaoli/zheaoli.github.io/assets/7054676/74756150-4e20-4028-9f4d-bd77aa326699" alt="容器内"></p><p>然后我们通过 <code>cd ../..</code> 退出到根目录，接着我们就能看到，我们宿主机完整的文件了。同时我们还能使用 chroot 能命令，切换到宿主机的根目录。</p><p><img src="https://github.com/Zheaoli/zheaoli.github.io/assets/7054676/d72cfe48-da4a-4a18-9f58-23e678d153e2" alt="逃逸行为"></p><p>那么这样一个问题是怎么导致的呢？</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>聊这个 CVE 之前，需要聊一些背景知识。首先是 Linux 下 openat2 这个 syscall。openat2 是 openat 在 Linux 5.6 之后的一个对于原本 open/openat 的一个扩展。其核心在于可以让用户进行更细粒度的控制，包括安全控制。比如 <code>O_CLOEXEC</code> （在执行 exec 时，自动更关闭之前的文件描述符）等细粒度的 flag 控制。</p><p>然后我们需要来聊聊整个容器的启动过程</p><p>容器启动的过程概述可以抽象为这样，</p><blockquote><p>docker-client -&gt; dockerd -&gt; containerd -&gt; containerd-shim -&gt; runc（容器外） -&gt; runc（容器内） -&gt; containter-entrypoint</p></blockquote><p>在启动过程中，runc 会负责设置容器的 cgroup 信息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *initProcess)</span></span> start() (retErr <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">if</span> err := p.manager.Apply(p.pid()); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;unable to apply cgroup configuration: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>众所周知，cgroup 最常见的控制方法是直接写入 cgroup 文件，runc 也不例外，同时为了保证文件的安全性，runc 会尝试使用 openat2 来进行文件打开。但是如前面所说的一样，openat2 是个在 Linux 5.6 之后才引入的 syscall，那么咋整捏，runc 有一个特殊方法 <code>prepareOpenat2</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prepareOpenat2</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">prepOnce.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fd, err := unix.Openat2(<span class="number">-1</span>, cgroupfsDir, &amp;unix.OpenHow&#123;</span><br><span class="line">Flags: unix.O_DIRECTORY | unix.O_PATH,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">prepErr = &amp;os.PathError&#123;Op: <span class="string">&quot;openat2&quot;</span>, Path: cgroupfsDir, Err: err&#125;</span><br><span class="line"><span class="keyword">if</span> err != unix.ENOSYS &#123; <span class="comment">//nolint:errorlint // unix errors are bare</span></span><br><span class="line">logrus.Warnf(<span class="string">&quot;falling back to securejoin: %s&quot;</span>, prepErr)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">logrus.Debug(<span class="string">&quot;openat2 not available, falling back to securejoin&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> st unix.Statfs_t</span><br><span class="line"><span class="keyword">if</span> err = unix.Fstatfs(fd, &amp;st); err != <span class="literal">nil</span> &#123;</span><br><span class="line">prepErr = &amp;os.PathError&#123;Op: <span class="string">&quot;statfs&quot;</span>, Path: cgroupfsDir, Err: err&#125;</span><br><span class="line">logrus.Warnf(<span class="string">&quot;falling back to securejoin: %s&quot;</span>, prepErr)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cgroupFd = fd</span><br><span class="line"></span><br><span class="line">resolveFlags = unix.RESOLVE_BENEATH | unix.RESOLVE_NO_MAGICLINKS</span><br><span class="line"><span class="keyword">if</span> st.Type == unix.CGROUP2_SUPER_MAGIC &#123;</span><br><span class="line"><span class="comment">// cgroupv2 has a single mountpoint and no &quot;cpu,cpuacct&quot; symlinks</span></span><br><span class="line">resolveFlags |= unix.RESOLVE_NO_XDEV | unix.RESOLVE_NO_SYMLINKS</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> prepErr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>眼尖的同学已经看到了，在测试是否有 openat2 的时候，runc 会使用 <code>unix.Openat2(-1, cgroupfsDir, &amp;unix.OpenHow&#123;Flags: unix.O_DIRECTORY | unix.O_PATH&#125;)</code> 这个调用来测试是否有 openat2，在这里，我们没有使用 <code>O_CLOEXEC</code>，同时我已经打开的文件并没有被关闭， 这就导致了一个问题，如果系统支持 openat2，这里就会存在一个文件描述符泄漏（简单的给一个结论这里泄漏的文件描述符指向 <code>/sys/fs/cgroup</code>）</p><p>而利用方式也很简单，我们上面的样例 Dockerfile 中的 <code>WORKDIR /proc/self/fd/7/</code> 就是利用这个泄漏的文件描述符，WORKDIR 在 OCI 中会转化成 <code>CWD</code> 的设置，在 runc 启动过程中，将直接通过 chdir 的方式进行设置</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// before executing the command inside the namespace</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">finalizeNamespace</span><span class="params">(config *initConfig)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// Ensure that all unwanted fds we may have accidentally</span></span><br><span class="line"><span class="comment">// inherited are marked close-on-exec so they stay out of the</span></span><br><span class="line"><span class="comment">// container</span></span><br><span class="line"><span class="keyword">if</span> err := utils.CloseExecFrom(config.PassedFilesCount + <span class="number">3</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;error closing exec fds: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// we only do chdir if it&#x27;s specified</span></span><br><span class="line">doChdir := config.Cwd != <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> doChdir &#123;</span><br><span class="line"><span class="comment">// First, attempt the chdir before setting up the user.</span></span><br><span class="line"><span class="comment">// This could allow us to access a directory that the user running runc can access</span></span><br><span class="line"><span class="comment">// but the container user cannot.</span></span><br><span class="line">err := unix.Chdir(config.Cwd)</span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> err == <span class="literal">nil</span>:</span><br><span class="line">doChdir = <span class="literal">false</span></span><br><span class="line"><span class="keyword">case</span> os.IsPermission(err):</span><br><span class="line"><span class="comment">// If we hit an EPERM, we should attempt again after setting up user.</span></span><br><span class="line"><span class="comment">// This will allow us to successfully chdir if the container user has access</span></span><br><span class="line"><span class="comment">// to the directory, but the user running runc does not.</span></span><br><span class="line"><span class="comment">// This is useful in cases where the cwd is also a volume that&#x27;s been chowned to the container user.</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;chdir to cwd (%q) set in config.json failed: %w&quot;</span>, config.Cwd, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么换句话说，我们容器内启动的进程默认的 <code>/proc/pid/cwd</code> 就是我们设置的 <code>/proc/self/fd/7</code> 也就是我们宿主机的 <code>/sys/fs/cgroup</code>，这就导致了我们在容器内可以直接访问宿主机的文件</p><p>这整个流程只能说，，阴差阳错</p><h2 id="探测"><a href="#探测" class="headerlink" title="探测"></a>探测</h2><p>如果我们 runc 版本没有办法及时更新到修复后的版本，那么我们有没有办法探测到这个问题呢？可以</p><p>这个攻击的特征非常简单</p><ol><li>使用 chdir 系统调用</li><li>目标路径是 <code>/proc/self/fd/*</code></li></ol><p>那么我们用 eBPF+Tracepoint 处理下就 OK</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vmlinux.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;bpf_tracing.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;bpf_helpers.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> __license[] SEC(<span class="string">&quot;license&quot;</span>) = <span class="string">&quot;Dual MIT/GPL&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">event</span> &#123;</span></span><br><span class="line">    __u32 pid;</span><br><span class="line">    __u8 path[<span class="number">256</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">event</span> *<span class="title">unusedevent</span> __<span class="title">attribute__</span>((<span class="title">unused</span>));</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    __uint(type, BPF_MAP_TYPE_RINGBUF);</span><br><span class="line">__uint(max_entries, <span class="number">1</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">&#125; events <span class="title function_">SEC</span><span class="params">(<span class="string">&quot;.maps&quot;</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sys_enter_chdir_args</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> common_type;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> common_flags;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> common_preempt_count;</span><br><span class="line">    <span class="type">int</span> common_pid;</span><br><span class="line">    <span class="type">int</span> __syscall_nr;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *filename;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">SEC(<span class="string">&quot;tracepoint/syscalls/sys_enter_chdir&quot;</span>)</span><br><span class="line"><span class="type">int</span> <span class="title function_">trace_enter_chdir</span><span class="params">(<span class="keyword">struct</span> sys_enter_chdir_args *ctx)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!ctx)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">event</span> *<span class="title">event</span>;</span></span><br><span class="line">    event = bpf_ringbuf_reserve(&amp;events, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> event), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (!event) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    event-&gt;pid = bpf_get_current_pid_tgid()&gt;&gt;<span class="number">32</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *path = (<span class="type">const</span> <span class="type">char</span> *)ctx-&gt;filename;</span><br><span class="line">    bpf_probe_read_str(event-&gt;path, <span class="keyword">sizeof</span>(event-&gt;path), path);</span><br><span class="line">    bpf_ringbuf_submit(event, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将事件上报到用户态，然后用户态用正则处理下 path 就行。当然这里的特征还能更多样化一些</p><ol><li>unwind 一下拿到用户态调用栈，确定是 runc 的调用</li><li>确定下是否是容器进程等</li></ol><p>由于我比较懒，所以在博客里就不写了，有兴趣的同学可以自己写写（XD</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>也没啥好总结的，容器逃逸不是新闻，不逃逸才是（XD</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本来这篇文章应该在初一凌晨发的，但是拖延癌晚期，所以到现在才发，得反思下了&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://www.manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://www.manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/Linux/"/>
    
    <category term="容器" scheme="https://www.manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/Linux/%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="编程" scheme="https://www.manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://www.manjusaka.blog/tags/Linux/"/>
    
    <category term="笔记" scheme="https://www.manjusaka.blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="水文" scheme="https://www.manjusaka.blog/tags/%E6%B0%B4%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>简单聊聊 Python 3.13 的 JIT 方案</title>
    <link href="https://www.manjusaka.blog/posts/2024/01/03/a-simple-introduction-about-python-jit/"/>
    <id>https://www.manjusaka.blog/posts/2024/01/03/a-simple-introduction-about-python-jit/</id>
    <published>2024-01-03T18:30:00.000Z</published>
    <updated>2024-05-19T19:06:04.916Z</updated>
    
    <content type="html"><![CDATA[<p>Python 3.13 的 JIT 方案最终确定了，我觉得可以说又新又好。所以深夜水一篇水文，来聊聊这个 JIT 方案</p><p>这篇文章可能会有些枯燥，所以如果对此不感兴趣的同学可以直接 x 掉</p><span id="more"></span><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>在聊 Python 3.13 具体的实现之前，我们需要来了解下它所采用的 JIT 方案的基础知识</p><p>JIT 本身的定义我相信阅读这篇文章的同学已经非常了解了，所以此处不再赘述。JIT 核心分为两大块</p><ol><li>代码的 profile，以确定热点路径，尽可能的减少 JIT 的 fallback</li><li>汇编代码的生成</li></ol><p>本文主要会聊代码的生成部分</p><p>在此之前，Python 生态里一个 JIT 的实现，Pyston/Pypy，他们所采取的方案其实是和 LuaJIT 的方式类似，开发者手写汇编来完成代码的特化，然后依赖 DynASM 执行相关的代码</p><p>这种方式主要的缺陷在于</p><ol><li>手写汇编带来的心智负担</li><li>对于平台的兼容性</li></ol><p>为了给大家一个直观的感受，我给出一个我之前写过的汇编的例子来作为演示</p><p>首先，我需要实现的功能很简单，用 C 来描述应该是这样的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[], <span class="type">char</span> * envp[])</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (argv &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> execve(args[<span class="number">0</span>], args, envp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为一些尺寸极端敏感的场景，这份 C 代码没有办法直接 link libc，为了尽可能的压缩 binary size，我选择用汇编实现，以下是 X86_64 的 ASM </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">.global _start</span><br><span class="line"></span><br><span class="line">.section .text</span><br><span class="line">_start:</span><br><span class="line">    # Setup stack frame</span><br><span class="line">    movq %rsp, %rbp</span><br><span class="line"></span><br><span class="line">    # Load argc</span><br><span class="line">    movq (%rbp), %r8       # %r8 now holds argc</span><br><span class="line"></span><br><span class="line">    # Load argv</span><br><span class="line">    leaq 8(%rbp), %r9      # %r9 now points to argv[0]</span><br><span class="line"></span><br><span class="line">    # Find envp by iterating through argv until NULL is found</span><br><span class="line">    movq %r9, %r10         # %r10 will be used to find envp</span><br><span class="line">find_envp:</span><br><span class="line">    movq (%r10), %rdi      # Load the current pointer in argv</span><br><span class="line">    cmpq $0, %rdi          # Compare it to NULL</span><br><span class="line">    je envp_found          # If NULL, we&#x27;ve found the end of argv</span><br><span class="line">    addq $8, %r10          # Otherwise, move to the next pointer in argv</span><br><span class="line">    jmp find_envp</span><br><span class="line"></span><br><span class="line">envp_found:</span><br><span class="line">    addq $8, %r10          # Move one more step to point to the start of envp</span><br><span class="line"></span><br><span class="line">    # Allocate space on the stack for the new argv array</span><br><span class="line">    subq $8, %rsp          # Space for NULL termination</span><br><span class="line">    subq %r8, %rsp</span><br><span class="line">    subq %r8, %rsp         # Space for argc pointers (including argv[0])</span><br><span class="line">    movq %rsp, %r11        # %r11 now points to the start of the new argv array</span><br><span class="line"></span><br><span class="line">    # Copy argv pointers to the new array</span><br><span class="line">    movq $0, %rcx          # Counter</span><br><span class="line">copy_loop:</span><br><span class="line">    cmpq %rcx, %r8</span><br><span class="line">    je copy_done</span><br><span class="line">    movq (%r9, %rcx, 8), %rdi</span><br><span class="line">    movq %rdi, (%r11, %rcx, 8)</span><br><span class="line">    incq %rcx</span><br><span class="line">    jmp copy_loop</span><br><span class="line"></span><br><span class="line">copy_done:</span><br><span class="line">    movq $0, (%r11, %rcx, 8)   # NULL-terminate the new argv array</span><br><span class="line"></span><br><span class="line">    # Check if argc &gt; 0</span><br><span class="line">    cmpq $0, %r8</span><br><span class="line">    jle .Lexit</span><br><span class="line"></span><br><span class="line">    # Execute execve syscall</span><br><span class="line">    movq $59, %rax          # syscall number for execve</span><br><span class="line">    movq (%r11), %rdi        # filename is argv[0]</span><br><span class="line">    movq %r11, %rsi         # New argv array</span><br><span class="line">    movq %r10, %rdx         # envp</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">.Lexit:</span><br><span class="line">    # Exit the program using the exit syscall</span><br><span class="line">    movq $60, %rax</span><br><span class="line">    xorq %rdi, %rdi</span><br><span class="line">    syscall</span><br></pre></td></tr></table></figure><p>同时，因为这个功能需要跨平台实现，所以我们需要同时实现 ARM64 的版本，以下是 ARM64 的 ASM</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">.global _start</span><br><span class="line"></span><br><span class="line">.section .text</span><br><span class="line">_start:</span><br><span class="line">    # Setup stack frame</span><br><span class="line">    mov x29, sp</span><br><span class="line"></span><br><span class="line">    # Load argc</span><br><span class="line">    ldr x8, [x29]        # x8 now holds argc</span><br><span class="line"></span><br><span class="line">    # Load argv</span><br><span class="line">    add x9, x29, #8      # x9 now points to argv[0]</span><br><span class="line"></span><br><span class="line">    # Find envp by iterating through argv until NULL is found</span><br><span class="line">    mov x10, x9          # x10 will be used to find envp</span><br><span class="line">find_envp:</span><br><span class="line">    ldr x19, [x10]       # Load the current pointer in argv</span><br><span class="line">    cbz x19, envp_found  # If NULL, we&#x27;ve found the end of argv</span><br><span class="line">    add x10, x10, #8     # Otherwise, move to the next pointer in argv</span><br><span class="line">    b find_envp</span><br><span class="line"></span><br><span class="line">envp_found:</span><br><span class="line">    add x10, x10, #8     # Move one more step to point to the start of envp</span><br><span class="line"></span><br><span class="line">    # Allocate space on the stack for the new argv array</span><br><span class="line">    sub sp, sp, #8       # Space for NULL termination</span><br><span class="line">    sub sp, sp, x8, lsl #3</span><br><span class="line">    sub sp, sp, x8, lsl #3      # Space for argc pointers (including argv[0])</span><br><span class="line">    mov x11, sp          # x11 now points to the start of the new argv array</span><br><span class="line"></span><br><span class="line">    # Copy argv pointers to the new array</span><br><span class="line">    mov x12, #0          # Counter</span><br><span class="line">copy_loop:</span><br><span class="line">    cmp x12, x8</span><br><span class="line">    b.eq copy_done</span><br><span class="line">    ldr x19, [x9, x12, lsl #3]</span><br><span class="line">    str x19, [x11, x12, lsl #3]</span><br><span class="line">    add x12, x12, #1</span><br><span class="line">    b copy_loop</span><br><span class="line"></span><br><span class="line">copy_done:</span><br><span class="line">    mov x19, #0</span><br><span class="line">    str x19, [x11, x12, lsl #3]   # NULL-terminate the new argv array</span><br><span class="line"></span><br><span class="line">    # Check if argc &gt; 0</span><br><span class="line">    cmp x8, #0</span><br><span class="line">    b.le .Lexit</span><br><span class="line"></span><br><span class="line">    # Execute execve syscall</span><br><span class="line">    mov x8, #221         # syscall number for execve</span><br><span class="line">    ldr x0, [x11]        # filename is argv[0]</span><br><span class="line">    mov x1, x11          # New argv array</span><br><span class="line">    mov x2, x10          # envp</span><br><span class="line">    svc #0</span><br><span class="line"></span><br><span class="line">.Lexit:</span><br><span class="line">    # Exit the program using the exit syscall</span><br><span class="line">    mov x8, #93</span><br><span class="line">    mov x0, #0</span><br><span class="line">    svc #0</span><br></pre></td></tr></table></figure><p>你能发现，X86_64 的寄存器和 ARM 生态完全不一样，这就导致了我们需要为不同的平台写不同的汇编代码，你再考虑下我们需要</p><ol><li>MIPS</li><li>RISC-V</li><li>PowerPC</li><li>…</li></ol><p>即便 DynASM 已经对跨平台做了一些抽象，但是直接手写汇编所带来的心智负担还是非常大的</p><p>所以，我们需要更现代化的方案，这就是今天要聊到 Copy And Patch。其核心在于利用已有编译器生成的汇编代码，然后对其进行 patch，来完成代码的特化</p><p>我们一点点来了解这个方案，首先我们从最基础的一个代码入手</p><p>假设我们现在有一个最基础的 C 代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个代码没有任何问题，我们可以直接用 gcc 来编译它，然后反汇编，看看它的汇编代码是什么样的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0000000000000000 &lt;add&gt;:</span><br><span class="line">       0: 55                            pushq   %rbp</span><br><span class="line">       1: 48 89 e5                      movq    %rsp, %rbp</span><br><span class="line">       4: 89 7d fc                      movl    %edi, -0x4(%rbp)</span><br><span class="line">       7: 89 75 f8                      movl    %esi, -0x8(%rbp)</span><br><span class="line">       a: 8b 55 fc                      movl    -0x4(%rbp), %edx</span><br><span class="line">       d: 8b 45 f8                      movl    -0x8(%rbp), %eax</span><br><span class="line">      10: 01 d0                         addl    %edx, %eax</span><br><span class="line">      12: 5d                            popq    %rbp</span><br><span class="line">      13: c3                            retq</span><br></pre></td></tr></table></figure><p>最基础的汇编代码，没有问题。</p><p>那么我们现在有这样一个场景，我们提供两个函数</p><ol><li>load_left</li><li>load_right</li></ol><p>这个两个函数将用于加载我们左右两个操作数，然后我们的代码变成下面这样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">load_left</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">load_right</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> load_left() + load_right();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们开垦一下汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">0000000000000000 &lt;add&gt;:</span><br><span class="line">       0: 55                            pushq   %rbp</span><br><span class="line">       1: 48 89 e5                      movq    %rsp, %rbp</span><br><span class="line">       4: 53                            pushq   %rbx</span><br><span class="line">       5: 48 83 ec 08                   subq    $0x8, %rsp</span><br><span class="line">       9: b8 00 00 00 00                movl    $0x0, %eax</span><br><span class="line">       e: e8 00 00 00 00                callq   0x13 &lt;add+0x13&gt;</span><br><span class="line">                000000000000000f:  R_X86_64_PLT32       load_left-0x4</span><br><span class="line">      13: 89 c3                         movl    %eax, %ebx</span><br><span class="line">      15: b8 00 00 00 00                movl    $0x0, %eax</span><br><span class="line">      1a: e8 00 00 00 00                callq   0x1f &lt;add+0x1f&gt;</span><br><span class="line">                000000000000001b:  R_X86_64_PLT32       load_right-0x4</span><br><span class="line">      1f: 01 d8                         addl    %ebx, %eax</span><br><span class="line">      21: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx</span><br><span class="line">      25: c9                            leave</span><br><span class="line">      26: c3                            retq</span><br></pre></td></tr></table></figure><p>我们关注到，汇编中有这样两行奇怪的东西</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> e: e8 00 00 00 00                callq   0x13 &lt;add+0x13&gt;</span><br><span class="line">          000000000000000f:  R_X86_64_PLT32       load_left-0x4</span><br><span class="line">1a: e8 00 00 00 00                callq   0x1f &lt;add+0x1f&gt;</span><br><span class="line">          000000000000001b:  R_X86_64_PLT32       load_right-0x4</span><br></pre></td></tr></table></figure><p>Bingo，熟悉一些基础的程序知识同学应该反应过来了，<code>e8</code> 指令（即 x86 下的 callq 指令）后面的 <code>00 00 00 00</code> 地址，将会在执行时，被 reloc 成为 <code>load_left</code> 和 <code>load_right</code> 的地址。</p><p>那么可能有些同学已经反应过来了，如果我们有办法将这段汇编代码中的 <code>e8 00 00 00 00</code> 替换成 <code>e8 xx xx xx xx</code>，那么我们就可以在这里 patch 上我们的代码了。这里是不是可以作为我们 JIT 的入口了呢？</p><p>当然，这里有一个问题，<code>e8</code> 后面的指令地址应该怎么样确定呢？</p><p>这里我们可以注意到，程序中有这样的部分 <code>000000000000000f:  R_X86_64_PLT32       load_left-0x4</code>， 这个是一个 ELF 的 Relocation Entry，它的作用是告诉我们，<code>e8</code> 后面的地址，应该是 <code>load_left</code> 的地址，同时，我们也能知道重定向部分的起始 <code>0x0f</code>.</p><p>同样的类型还有很多，比如 <code>R_X86_64_PC32</code>，<code>R_X86_64_GOTPCREL</code> 等等，这些类型的 Relocation Entry 都可以帮助我们定位到我们需要 patch 的地址，以及帮助我们计算偏移</p><p>再举个例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 17f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi</span><br><span class="line">// 0000000000000181:  R_X86_64_64  .rodata.str1.1</span><br><span class="line">// 189: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi</span><br><span class="line">// 000000000000018b:  R_X86_64_64  .rodata.str1.1+0x16</span><br></pre></td></tr></table></figure><p>这里我们可以看到，<code>48 bf 00 00 00 00 00 00 00 00</code> 和 <code>48 be 00 00 00 00 00 00 00 00</code> 后面都有一个 <code>R_X86_64_64</code> 的 Relocation Entry，这个 Relocation Entry 告诉我们，这两个指令后面的地址，应该是 <code>.rodata.str1.1</code> 的地址，同时，我们也能知道重定向部分的起始 <code>0x181</code> 和 <code>0x18b</code>，这样我们就可以计算出偏移，然后 patch 上我们的代码了</p><p>那么这就是整个 copy and patch 的大概过程，我们可以利用编译器生成的汇编代码，然后通过 Relocation Entry 来定位我们需要 patch 的地址，然后 patch 上我们的代码。最终尽可能的简化我们的心智负担</p><h2 id="Python-3-13-的-JIT"><a href="#Python-3-13-的-JIT" class="headerlink" title="Python 3.13 的 JIT"></a>Python 3.13 的 JIT</h2><p>Python 3.13 目前的 JIT 方案已经确定下来了，它的核心就是 Copy And Patch，现在我们整体来看一下</p><p>首先，Python 有一个 <code>Python/executor_cases.h</code> 文件，囊括了我们所有的字节码和对应的操作</p><p>比如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> _BINARY_OP_ADD_INT: &#123;</span><br><span class="line">    PyObject *right;</span><br><span class="line">    PyObject *left;</span><br><span class="line">    PyObject *res;</span><br><span class="line">    right = stack_pointer[<span class="number">-1</span>];</span><br><span class="line">    left = stack_pointer[<span class="number">-2</span>];</span><br><span class="line">    STAT_INC(BINARY_OP, hit);</span><br><span class="line">    res = _PyLong_Add((PyLongObject *)left, (PyLongObject *)right);</span><br><span class="line">    _Py_DECREF_SPECIALIZED(right, (destructor)PyObject_Free);</span><br><span class="line">    _Py_DECREF_SPECIALIZED(left, (destructor)PyObject_Free);</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="literal">NULL</span>) <span class="keyword">goto</span> pop_2_error_tier_two;</span><br><span class="line">    stack_pointer[<span class="number">-2</span>] = res;</span><br><span class="line">    stack_pointer += <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们新增加了一个 <code>tools/template.c</code> 文件，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Python.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pycore_call.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pycore_ceval.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pycore_dict.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pycore_emscripten_signal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pycore_intrinsics.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pycore_jit.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pycore_long.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pycore_opcode_metadata.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pycore_opcode_utils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pycore_range.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pycore_setobject.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pycore_sliceobject.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ceval_macros.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> CURRENT_OPARG</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CURRENT_OPARG() (_oparg)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> CURRENT_OPERAND</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CURRENT_OPERAND() (_operand)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> DEOPT_IF</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEOPT_IF(COND, INSTNAME) \</span></span><br><span class="line"><span class="meta">    do &#123;                         \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> ((COND)) &#123;            \</span></span><br><span class="line"><span class="meta">            goto deoptimize;     \</span></span><br><span class="line"><span class="meta">        &#125;                        \</span></span><br><span class="line"><span class="meta">    &#125; while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> ENABLE_SPECIALIZATION</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ENABLE_SPECIALIZATION (0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> GOTO_ERROR</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GOTO_ERROR(LABEL)        \</span></span><br><span class="line"><span class="meta">    do &#123;                         \</span></span><br><span class="line"><span class="meta">        goto LABEL ## _tier_two; \</span></span><br><span class="line"><span class="meta">    &#125; while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> LOAD_IP</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOAD_IP(UNUSED) \</span></span><br><span class="line"><span class="meta">    do &#123;                \</span></span><br><span class="line"><span class="meta">    &#125; while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PATCH_VALUE(TYPE, NAME, ALIAS)  \</span></span><br><span class="line"><span class="meta">    extern void ALIAS;                  \</span></span><br><span class="line"><span class="meta">    TYPE NAME = (TYPE)(uint64_t)&amp;ALIAS;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PATCH_JUMP(ALIAS)                                    \</span></span><br><span class="line"><span class="meta">    extern void ALIAS;                                       \</span></span><br><span class="line"><span class="meta">    __attribute__((musttail))                                \</span></span><br><span class="line"><span class="meta">    return ((jit_func)&amp;ALIAS)(frame, stack_pointer, tstate);</span></span><br><span class="line"></span><br><span class="line">_Py_CODEUNIT *</span><br><span class="line">_JIT_ENTRY(_PyInterpreterFrame *frame, PyObject **stack_pointer, PyThreadState *tstate)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Locals that the instruction implementations expect to exist:</span></span><br><span class="line">    PATCH_VALUE(_PyUOpExecutorObject *, current_executor, _JIT_EXECUTOR)</span><br><span class="line">    <span class="type">int</span> oparg;</span><br><span class="line">    <span class="type">int</span> opcode = _JIT_OPCODE;</span><br><span class="line">    _PyUOpInstruction *next_uop;</span><br><span class="line">    <span class="comment">// Other stuff we need handy:</span></span><br><span class="line">    PATCH_VALUE(<span class="type">uint16_t</span>, _oparg, _JIT_OPARG)</span><br><span class="line">    PATCH_VALUE(<span class="type">uint64_t</span>, _operand, _JIT_OPERAND)</span><br><span class="line">    PATCH_VALUE(<span class="type">uint32_t</span>, _target, _JIT_TARGET)</span><br><span class="line">    <span class="comment">// The actual instruction definitions (only one will be used):</span></span><br><span class="line">    <span class="keyword">if</span> (opcode == _JUMP_TO_TOP) &#123;</span><br><span class="line">        CHECK_EVAL_BREAKER();</span><br><span class="line">        PATCH_JUMP(_JIT_TOP);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (opcode) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;executor_cases.c.h&quot;</span></span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            Py_UNREACHABLE();</span><br><span class="line">    &#125;</span><br><span class="line">    PATCH_JUMP(_JIT_CONTINUE);</span><br><span class="line">    <span class="comment">// Labels that the instruction implementations expect to exist:</span></span><br><span class="line">unbound_local_error_tier_two:</span><br><span class="line">    _PyEval_FormatExcCheckArg(</span><br><span class="line">        tstate, PyExc_UnboundLocalError, UNBOUNDLOCAL_ERROR_MSG,</span><br><span class="line">        PyTuple_GetItem(_PyFrame_GetCode(frame)-&gt;co_localsplusnames, oparg));</span><br><span class="line">    <span class="keyword">goto</span> error_tier_two;</span><br><span class="line">pop_4_error_tier_two:</span><br><span class="line">    STACK_SHRINK(<span class="number">1</span>);</span><br><span class="line">pop_3_error_tier_two:</span><br><span class="line">    STACK_SHRINK(<span class="number">1</span>);</span><br><span class="line">pop_2_error_tier_two:</span><br><span class="line">    STACK_SHRINK(<span class="number">1</span>);</span><br><span class="line">pop_1_error_tier_two:</span><br><span class="line">    STACK_SHRINK(<span class="number">1</span>);</span><br><span class="line">error_tier_two:</span><br><span class="line">    _PyFrame_SetStackPointer(frame, stack_pointer);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">deoptimize:</span><br><span class="line">    _PyFrame_SetStackPointer(frame, stack_pointer);</span><br><span class="line">    <span class="keyword">return</span> _PyCode_CODE(_PyFrame_GetCode(frame)) + _target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，_JIT_OPCODE，由编译时传入，作为当前的 opcode，因为这是一个固定值，所以编译器在编译的时候，会 strip 掉其余的分支，只保留当前 opcode 的分支，某种意义上，核心的 switch 部分就编程这样了（以 _BINARY_OP_ADD_INT 为例）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(_BINARY_OP_ADD_INT) &#123;</span><br><span class="line">    <span class="keyword">case</span> _BINARY_OP_ADD_INT: &#123;</span><br><span class="line">        PyObject *right;</span><br><span class="line">        PyObject *left;</span><br><span class="line">        PyObject *res;</span><br><span class="line">        right = stack_pointer[<span class="number">-1</span>];</span><br><span class="line">        left = stack_pointer[<span class="number">-2</span>];</span><br><span class="line">        STAT_INC(BINARY_OP, hit);</span><br><span class="line">        res = _PyLong_Add((PyLongObject *)left, (PyLongObject *)right);</span><br><span class="line">        _Py_DECREF_SPECIALIZED(right, (destructor)PyObject_Free);</span><br><span class="line">        _Py_DECREF_SPECIALIZED(left, (destructor)PyObject_Free);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="literal">NULL</span>) <span class="keyword">goto</span> pop_2_error_tier_two;</span><br><span class="line">        stack_pointer[<span class="number">-2</span>] = res;</span><br><span class="line">        stack_pointer += <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        Py_UNREACHABLE();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们最终能得到这样的汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">// 0: 55                            pushq   %rbp</span><br><span class="line">// 1: 41 57                         pushq   %r15</span><br><span class="line">// 3: 41 56                         pushq   %r14</span><br><span class="line">// 5: 41 55                         pushq   %r13</span><br><span class="line">// 7: 41 54                         pushq   %r12</span><br><span class="line">// 9: 53                            pushq   %rbx</span><br><span class="line">// a: 48 83 ec 18                   subq    $0x18, %rsp</span><br><span class="line">// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)</span><br><span class="line">// 13: 49 89 f7                      movq    %rsi, %r15</span><br><span class="line">// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)</span><br><span class="line">// 1b: 4c 8b 66 f0                   movq    -0x10(%rsi), %r12</span><br><span class="line">// 1f: 48 8b 6e f8                   movq    -0x8(%rsi), %rbp</span><br><span class="line">// 23: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14</span><br><span class="line">// 0000000000000025:  R_X86_64_64  _Py_stats</span><br><span class="line">// 2d: 49 8b 06                      movq    (%r14), %rax</span><br><span class="line">// 30: 48 85 c0                      testq   %rax, %rax</span><br><span class="line">// 33: 74 07                         je      0x3c &lt;_JIT_ENTRY+0x3c&gt;</span><br><span class="line">// 35: 48 ff 80 88 a4 01 00          incq    0x1a488(%rax)</span><br><span class="line">// 3c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax</span><br><span class="line">// 000000000000003e:  R_X86_64_64  _PyLong_Add</span><br><span class="line">// 46: 4c 89 e7                      movq    %r12, %rdi</span><br><span class="line">// 49: 48 89 ee                      movq    %rbp, %rsi</span><br><span class="line">// 4c: ff d0                         callq   *%rax</span><br><span class="line">// 4e: 49 89 c5                      movq    %rax, %r13</span><br><span class="line">// 51: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)</span><br><span class="line">// 55: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx</span><br><span class="line">// 0000000000000057:  R_X86_64_64  PyInterpreterState_Get</span><br><span class="line">// 5f: 75 24                         jne     0x85 &lt;_JIT_ENTRY+0x85&gt;</span><br><span class="line">// 61: 49 8b 06                      movq    (%r14), %rax</span><br><span class="line">// 64: 48 85 c0                      testq   %rax, %rax</span><br><span class="line">// 67: 74 07                         je      0x70 &lt;_JIT_ENTRY+0x70&gt;</span><br><span class="line">// 69: 48 ff 80 78 58 09 00          incq    0x95878(%rax)</span><br><span class="line">// 70: 48 89 cb                      movq    %rcx, %rbx</span><br><span class="line">// 73: ff d1                         callq   *%rcx</span><br><span class="line">// 75: 48 89 d9                      movq    %rbx, %rcx</span><br><span class="line">// 78: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)</span><br><span class="line">// 7f: 48 ff 4d 00                   decq    (%rbp)</span><br><span class="line">// 83: 74 37                         je      0xbc &lt;_JIT_ENTRY+0xbc&gt;</span><br><span class="line">// 85: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)</span><br><span class="line">// 8b: 75 49                         jne     0xd6 &lt;_JIT_ENTRY+0xd6&gt;</span><br><span class="line">// 8d: 49 8b 06                      movq    (%r14), %rax</span><br><span class="line">// 90: 48 85 c0                      testq   %rax, %rax</span><br><span class="line">// 93: 74 07                         je      0x9c &lt;_JIT_ENTRY+0x9c&gt;</span><br><span class="line">// 95: 48 ff 80 78 58 09 00          incq    0x95878(%rax)</span><br><span class="line">// 9c: ff d1                         callq   *%rcx</span><br><span class="line">// 9e: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)</span><br><span class="line">// a5: 49 ff 0c 24                   decq    (%r12)</span><br><span class="line">// a9: 75 2b                         jne     0xd6 &lt;_JIT_ENTRY+0xd6&gt;</span><br><span class="line">// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax</span><br><span class="line">// 00000000000000ad:  R_X86_64_64  PyObject_Free</span><br><span class="line">// b5: 4c 89 e7                      movq    %r12, %rdi</span><br><span class="line">// b8: ff d0                         callq   *%rax</span><br><span class="line">// ba: eb 1a                         jmp     0xd6 &lt;_JIT_ENTRY+0xd6&gt;</span><br><span class="line">// bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax</span><br><span class="line">// 00000000000000be:  R_X86_64_64  PyObject_Free</span><br><span class="line">// c6: 48 89 ef                      movq    %rbp, %rdi</span><br><span class="line">// c9: ff d0                         callq   *%rax</span><br><span class="line">// cb: 48 89 d9                      movq    %rbx, %rcx</span><br><span class="line">// ce: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)</span><br><span class="line">// d4: 74 b7                         je      0x8d &lt;_JIT_ENTRY+0x8d&gt;</span><br><span class="line">// d6: 49 8d 47 f0                   leaq    -0x10(%r15), %rax</span><br><span class="line">// da: 4d 85 ed                      testq   %r13, %r13</span><br><span class="line">// dd: 74 2e                         je      0x10d &lt;_JIT_ENTRY+0x10d&gt;</span><br><span class="line">// df: 49 83 c7 f8                   addq    $-0x8, %r15</span><br><span class="line">// e3: 4c 89 28                      movq    %r13, (%rax)</span><br><span class="line">// e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax</span><br><span class="line">// 00000000000000e8:  R_X86_64_64  _JIT_CONTINUE</span><br><span class="line">// f0: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi</span><br><span class="line">// f5: 4c 89 fe                      movq    %r15, %rsi</span><br><span class="line">// f8: 48 8b 54 24 10                movq    0x10(%rsp), %rdx</span><br><span class="line">// fd: 48 83 c4 18                   addq    $0x18, %rsp</span><br><span class="line">// 101: 5b                            popq    %rbx</span><br><span class="line">// 102: 41 5c                         popq    %r12</span><br><span class="line">// 104: 41 5d                         popq    %r13</span><br><span class="line">// 106: 41 5e                         popq    %r14</span><br><span class="line">// 108: 41 5f                         popq    %r15</span><br><span class="line">// 10a: 5d                            popq    %rbp</span><br><span class="line">// 10b: ff e0                         jmpq    *%rax</span><br><span class="line">// 10d: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx</span><br><span class="line">// 112: 48 29 c8                      subq    %rcx, %rax</span><br><span class="line">// 115: 48 83 c0 b8                   addq    $-0x48, %rax</span><br><span class="line">// 119: 48 c1 e8 03                   shrq    $0x3, %rax</span><br><span class="line">// 11d: 89 41 40                      movl    %eax, 0x40(%rcx)</span><br><span class="line">// 120: 31 c0                         xorl    %eax, %eax</span><br><span class="line">// 122: 48 83 c4 18                   addq    $0x18, %rsp</span><br><span class="line">// 126: 5b                            popq    %rbx</span><br><span class="line">// 127: 41 5c                         popq    %r12</span><br><span class="line">// 129: 41 5d                         popq    %r13</span><br><span class="line">// 12b: 41 5e                         popq    %r14</span><br><span class="line">// 12d: 41 5f                         popq    %r15</span><br><span class="line">// 12f: 5d                            popq    %rbp</span><br><span class="line">// 130: c3                            retq</span><br><span class="line">// 131: </span><br></pre></td></tr></table></figure><p>OK，我们在编译器（目前 Python 选用的 LLVM 系列的工具链，编译器为 clang）开了 O3 编译后得到中间文件后，我们利用 <code>llvm-objdump</code> 和 <code>llvm-readobj</code> 来获取到我们需要的信息（这里其实也是一个非常棒的细节，因为我们要跨很多平台，要处理几种不同的二进制格式，比如 Linux 下 ELF，Windows 下 PE，MacOS 下 Mach-O，所以我们需要一个统一的工具来处理这些二进制格式，而 LLVM 的工具链就是这样的工具）我们能注意到，在上面的代码中，有这样一些重定向条目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 0000000000000025:  R_X86_64_64  _Py_stats</span><br><span class="line">// 000000000000003e:  R_X86_64_64  _PyLong_Add</span><br><span class="line">// 0000000000000057:  R_X86_64_64  PyInterpreterState_Get</span><br><span class="line">// 00000000000000ad:  R_X86_64_64  PyObject_Free</span><br><span class="line">// 00000000000000be:  R_X86_64_64  PyObject_Free</span><br><span class="line">// 00000000000000e8:  R_X86_64_64  _JIT_CONTINUE</span><br></pre></td></tr></table></figure><p>然后我们就可以根据从工具链中获取到的信息，来定位到我们需要 patch 的地址，然后生成一些运行时 patch 的 flag，最终生成这样一份 C 代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> _BINARY_OP_ADD_INT_code_body[<span class="number">306</span>] = &#123;<span class="number">0x55</span>, <span class="number">0x41</span>, <span class="number">0x57</span>, <span class="number">0x41</span>, <span class="number">0x56</span>, <span class="number">0x41</span>, <span class="number">0x55</span>, <span class="number">0x41</span>, <span class="number">0x54</span>, <span class="number">0x53</span>, <span class="number">0x48</span>, <span class="number">0x83</span>, <span class="number">0xec</span>, <span class="number">0x18</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0x54</span>, <span class="number">0x24</span>, <span class="number">0x10</span>, <span class="number">0x49</span>, <span class="number">0x89</span>, <span class="number">0xf7</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0x7c</span>, <span class="number">0x24</span>, <span class="number">0x08</span>, <span class="number">0x4c</span>, <span class="number">0x8b</span>, <span class="number">0x66</span>, <span class="number">0xf0</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x6e</span>, <span class="number">0xf8</span>, <span class="number">0x49</span>, <span class="number">0xbe</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x49</span>, <span class="number">0x8b</span>, <span class="number">0x06</span>, <span class="number">0x48</span>, <span class="number">0x85</span>, <span class="number">0xc0</span>, <span class="number">0x74</span>, <span class="number">0x07</span>, <span class="number">0x48</span>, <span class="number">0xff</span>, <span class="number">0x80</span>, <span class="number">0x88</span>, <span class="number">0xa4</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x48</span>, <span class="number">0xb8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x4c</span>, <span class="number">0x89</span>, <span class="number">0xe7</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xee</span>, <span class="number">0xff</span>, <span class="number">0xd0</span>, <span class="number">0x49</span>, <span class="number">0x89</span>, <span class="number">0xc5</span>, <span class="number">0xf6</span>, <span class="number">0x45</span>, <span class="number">0x03</span>, <span class="number">0x80</span>, <span class="number">0x48</span>, <span class="number">0xb9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x75</span>, <span class="number">0x24</span>, <span class="number">0x49</span>, <span class="number">0x8b</span>, <span class="number">0x06</span>, <span class="number">0x48</span>, <span class="number">0x85</span>, <span class="number">0xc0</span>, <span class="number">0x74</span>, <span class="number">0x07</span>, <span class="number">0x48</span>, <span class="number">0xff</span>, <span class="number">0x80</span>, <span class="number">0x78</span>, <span class="number">0x58</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xcb</span>, <span class="number">0xff</span>, <span class="number">0xd1</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xd9</span>, <span class="number">0x48</span>, <span class="number">0xff</span>, <span class="number">0x88</span>, <span class="number">0xc8</span>, <span class="number">0x15</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x48</span>, <span class="number">0xff</span>, <span class="number">0x4d</span>, <span class="number">0x00</span>, <span class="number">0x74</span>, <span class="number">0x37</span>, <span class="number">0x41</span>, <span class="number">0xf6</span>, <span class="number">0x44</span>, <span class="number">0x24</span>, <span class="number">0x03</span>, <span class="number">0x80</span>, <span class="number">0x75</span>, <span class="number">0x49</span>, <span class="number">0x49</span>, <span class="number">0x8b</span>, <span class="number">0x06</span>, <span class="number">0x48</span>, <span class="number">0x85</span>, <span class="number">0xc0</span>, <span class="number">0x74</span>, <span class="number">0x07</span>, <span class="number">0x48</span>, <span class="number">0xff</span>, <span class="number">0x80</span>, <span class="number">0x78</span>, <span class="number">0x58</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0xff</span>, <span class="number">0xd1</span>, <span class="number">0x48</span>, <span class="number">0xff</span>, <span class="number">0x88</span>, <span class="number">0xc8</span>, <span class="number">0x15</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x49</span>, <span class="number">0xff</span>, <span class="number">0x0c</span>, <span class="number">0x24</span>, <span class="number">0x75</span>, <span class="number">0x2b</span>, <span class="number">0x48</span>, <span class="number">0xb8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x4c</span>, <span class="number">0x89</span>, <span class="number">0xe7</span>, <span class="number">0xff</span>, <span class="number">0xd0</span>, <span class="number">0xeb</span>, <span class="number">0x1a</span>, <span class="number">0x48</span>, <span class="number">0xb8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xef</span>, <span class="number">0xff</span>, <span class="number">0xd0</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xd9</span>, <span class="number">0x41</span>, <span class="number">0xf6</span>, <span class="number">0x44</span>, <span class="number">0x24</span>, <span class="number">0x03</span>, <span class="number">0x80</span>, <span class="number">0x74</span>, <span class="number">0xb7</span>, <span class="number">0x49</span>, <span class="number">0x8d</span>, <span class="number">0x47</span>, <span class="number">0xf0</span>, <span class="number">0x4d</span>, <span class="number">0x85</span>, <span class="number">0xed</span>, <span class="number">0x74</span>, <span class="number">0x2e</span>, <span class="number">0x49</span>, <span class="number">0x83</span>, <span class="number">0xc7</span>, <span class="number">0xf8</span>, <span class="number">0x4c</span>, <span class="number">0x89</span>, <span class="number">0x28</span>, <span class="number">0x48</span>, <span class="number">0xb8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x7c</span>, <span class="number">0x24</span>, <span class="number">0x08</span>, <span class="number">0x4c</span>, <span class="number">0x89</span>, <span class="number">0xfe</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x54</span>, <span class="number">0x24</span>, <span class="number">0x10</span>, <span class="number">0x48</span>, <span class="number">0x83</span>, <span class="number">0xc4</span>, <span class="number">0x18</span>, <span class="number">0x5b</span>, <span class="number">0x41</span>, <span class="number">0x5c</span>, <span class="number">0x41</span>, <span class="number">0x5d</span>, <span class="number">0x41</span>, <span class="number">0x5e</span>, <span class="number">0x41</span>, <span class="number">0x5f</span>, <span class="number">0x5d</span>, <span class="number">0xff</span>, <span class="number">0xe0</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x4c</span>, <span class="number">0x24</span>, <span class="number">0x08</span>, <span class="number">0x48</span>, <span class="number">0x29</span>, <span class="number">0xc8</span>, <span class="number">0x48</span>, <span class="number">0x83</span>, <span class="number">0xc0</span>, <span class="number">0xb8</span>, <span class="number">0x48</span>, <span class="number">0xc1</span>, <span class="number">0xe8</span>, <span class="number">0x03</span>, <span class="number">0x89</span>, <span class="number">0x41</span>, <span class="number">0x40</span>, <span class="number">0x31</span>, <span class="number">0xc0</span>, <span class="number">0x48</span>, <span class="number">0x83</span>, <span class="number">0xc4</span>, <span class="number">0x18</span>, <span class="number">0x5b</span>, <span class="number">0x41</span>, <span class="number">0x5c</span>, <span class="number">0x41</span>, <span class="number">0x5d</span>, <span class="number">0x41</span>, <span class="number">0x5e</span>, <span class="number">0x41</span>, <span class="number">0x5f</span>, <span class="number">0x5d</span>, <span class="number">0xc3</span>&#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> Hole _BINARY_OP_ADD_INT_code_holes[<span class="number">7</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">0x25</span>, HoleKind_R_X86_64_64, HoleValue_ZERO, &amp;_Py_stats, <span class="number">0x0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x3e</span>, HoleKind_R_X86_64_64, HoleValue_ZERO, &amp;_PyLong_Add, <span class="number">0x0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x57</span>, HoleKind_R_X86_64_64, HoleValue_ZERO, &amp;PyInterpreterState_Get, <span class="number">0x0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0xad</span>, HoleKind_R_X86_64_64, HoleValue_ZERO, &amp;PyObject_Free, <span class="number">0x0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0xbe</span>, HoleKind_R_X86_64_64, HoleValue_ZERO, &amp;PyObject_Free, <span class="number">0x0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0xe8</span>, HoleKind_R_X86_64_64, HoleValue_CONTINUE, <span class="literal">NULL</span>, <span class="number">0x0</span>&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最终所有指令编译完成后，最终会生成 <code>jit_stencils.h</code> 文件，被我们其余 CPython 代码引用，编译进我们的二进制中</p><p>然后我们来看下，我们的 JIT 是如何工作的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_PyJIT_Compile(_PyUOpExecutorObject *executor)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Loop once to find the total compiled size:</span></span><br><span class="line">    <span class="type">size_t</span> code_size = <span class="number">0</span>;</span><br><span class="line">    <span class="type">size_t</span> data_size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Py_ssize_t i = <span class="number">0</span>; i &lt; Py_SIZE(executor); i++) &#123;</span><br><span class="line">        _PyUOpInstruction *instruction = &amp;executor-&gt;trace[i];</span><br><span class="line">        <span class="type">const</span> StencilGroup *group = &amp;stencil_groups[instruction-&gt;opcode];</span><br><span class="line">        code_size += group-&gt;code.body_size;</span><br><span class="line">        data_size += group-&gt;data.body_size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Round up to the nearest page (code and data need separate pages):</span></span><br><span class="line">    <span class="type">size_t</span> page_size = get_page_size();</span><br><span class="line">    assert((page_size &amp; (page_size - <span class="number">1</span>)) == <span class="number">0</span>);</span><br><span class="line">    code_size += page_size - (code_size &amp; (page_size - <span class="number">1</span>));</span><br><span class="line">    data_size += page_size - (data_size &amp; (page_size - <span class="number">1</span>));</span><br><span class="line">    <span class="type">char</span> *memory = jit_alloc(code_size + data_size);</span><br><span class="line">    <span class="keyword">if</span> (memory == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">goto</span> fail;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Loop again to emit the code:</span></span><br><span class="line">    <span class="type">char</span> *code = memory;</span><br><span class="line">    <span class="type">char</span> *data = memory + code_size;</span><br><span class="line">    <span class="keyword">for</span> (Py_ssize_t i = <span class="number">0</span>; i &lt; Py_SIZE(executor); i++) &#123;</span><br><span class="line">        _PyUOpInstruction *instruction = &amp;executor-&gt;trace[i];</span><br><span class="line">        <span class="type">const</span> StencilGroup *group = &amp;stencil_groups[instruction-&gt;opcode];</span><br><span class="line">        <span class="comment">// Think of patches as a dictionary mapping HoleValue to uint64_t:</span></span><br><span class="line">        <span class="type">uint64_t</span> patches[] = GET_PATCHES();</span><br><span class="line">        patches[HoleValue_CODE] = (<span class="type">uint64_t</span>)code;</span><br><span class="line">        patches[HoleValue_CONTINUE] = (<span class="type">uint64_t</span>)code + group-&gt;code.body_size;</span><br><span class="line">        patches[HoleValue_DATA] = (<span class="type">uint64_t</span>)data;</span><br><span class="line">        patches[HoleValue_EXECUTOR] = (<span class="type">uint64_t</span>)executor;</span><br><span class="line">        patches[HoleValue_OPARG] = instruction-&gt;oparg;</span><br><span class="line">        patches[HoleValue_OPERAND] = instruction-&gt;operand;</span><br><span class="line">        patches[HoleValue_TARGET] = instruction-&gt;target;</span><br><span class="line">        patches[HoleValue_TOP] = (<span class="type">uint64_t</span>)memory;</span><br><span class="line">        patches[HoleValue_ZERO] = <span class="number">0</span>;</span><br><span class="line">        emit(group, patches);</span><br><span class="line">        code += group-&gt;code.body_size;</span><br><span class="line">        data += group-&gt;data.body_size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mark_executable(memory, code_size) ||</span><br><span class="line">        mark_readable(memory + code_size, data_size))</span><br><span class="line">    &#123;</span><br><span class="line">        jit_free(memory, code_size + data_size);</span><br><span class="line">        <span class="keyword">goto</span> fail;</span><br><span class="line">    &#125;</span><br><span class="line">    executor-&gt;base.execute = execute;</span><br><span class="line">    executor-&gt;jit_code = memory;</span><br><span class="line">    executor-&gt;jit_size = code_size + data_size;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">fail:</span><br><span class="line">    <span class="keyword">return</span> PyErr_Occurred() ? <span class="number">-1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一部分代码看似很复杂，实际上核心代码很简单，利用 <code>jit_alloc</code> 生成一块内存，然后利用 <code>emit</code> 将我们的汇编代码写入到这块内存中，然后利用 <code>mark_executable</code> 和 <code>mark_readable</code> 将这块内存标记为可执行和可读，最终将这块内存的地址赋值给我们的 executor，这样我们的 executor 就可以执行我们的 JIT 代码了</p><p>然后</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">patches[HoleValue_CODE] = (<span class="type">uint64_t</span>)code;</span><br><span class="line">patches[HoleValue_CONTINUE] = (<span class="type">uint64_t</span>)code + group-&gt;code.body_size;</span><br><span class="line">patches[HoleValue_DATA] = (<span class="type">uint64_t</span>)data;</span><br><span class="line">patches[HoleValue_EXECUTOR] = (<span class="type">uint64_t</span>)executor;</span><br><span class="line">patches[HoleValue_OPARG] = instruction-&gt;oparg;</span><br><span class="line">patches[HoleValue_OPERAND] = instruction-&gt;operand;</span><br><span class="line">patches[HoleValue_TARGET] = instruction-&gt;target;</span><br><span class="line">patches[HoleValue_TOP] = (<span class="type">uint64_t</span>)memory;</span><br><span class="line">patches[HoleValue_ZERO] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>这一部分就是将我们提前预置的一些 flag 设定具体的值，以便后续的 patch</p><p>然后 patch 核心的部分，就是根据各平台的 LDD 规则来将我们动态的一些地址 patch 到 relocate 的位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (hole-&gt;kind) &#123;</span><br><span class="line">    <span class="keyword">case</span> HoleKind_IMAGE_REL_I386_DIR32:</span><br><span class="line">        <span class="comment">// 32-bit absolute address.</span></span><br><span class="line">        <span class="comment">// Check that we&#x27;re not out of range of 32 unsigned bits:</span></span><br><span class="line">        assert(value &lt; (<span class="number">1ULL</span> &lt;&lt; <span class="number">32</span>));</span><br><span class="line">        *loc32 = (<span class="type">uint32_t</span>)value;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">case</span> HoleKind_ARM64_RELOC_UNSIGNED:</span><br><span class="line">    <span class="keyword">case</span> HoleKind_IMAGE_REL_AMD64_ADDR64:</span><br><span class="line">    <span class="keyword">case</span> HoleKind_R_AARCH64_ABS64:</span><br><span class="line">    <span class="keyword">case</span> HoleKind_X86_64_RELOC_UNSIGNED:</span><br><span class="line">    <span class="keyword">case</span> HoleKind_R_X86_64_64:</span><br><span class="line">        <span class="comment">// 64-bit absolute address.</span></span><br><span class="line">        *loc64 = value;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">case</span> HoleKind_R_AARCH64_CALL26:</span><br><span class="line">    <span class="keyword">case</span> HoleKind_R_AARCH64_JUMP26:</span><br><span class="line">        <span class="comment">// 28-bit relative branch.</span></span><br><span class="line">        assert(IS_AARCH64_BRANCH(*loc32));</span><br><span class="line">        value -= (<span class="type">uint64_t</span>)location;</span><br><span class="line">        <span class="comment">// Check that we&#x27;re not out of range of 28 signed bits:</span></span><br><span class="line">        assert((<span class="type">int64_t</span>)value &gt;= -(<span class="number">1</span> &lt;&lt; <span class="number">27</span>));</span><br><span class="line">        assert((<span class="type">int64_t</span>)value &lt; (<span class="number">1</span> &lt;&lt; <span class="number">27</span>));</span><br><span class="line">        <span class="comment">// Since instructions are 4-byte aligned, only use 26 bits:</span></span><br><span class="line">        assert(get_bits(value, <span class="number">0</span>, <span class="number">2</span>) == <span class="number">0</span>);</span><br><span class="line">        set_bits(loc32, <span class="number">0</span>, <span class="number">26</span>, value, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">case</span> HoleKind_R_AARCH64_MOVW_UABS_G0_NC:</span><br><span class="line">        <span class="comment">// 16-bit low part of an absolute address.</span></span><br><span class="line">        assert(IS_AARCH64_MOV(*loc32));</span><br><span class="line">        <span class="comment">// Check the implicit shift (this is &quot;part 0 of 3&quot;):</span></span><br><span class="line">        assert(get_bits(*loc32, <span class="number">21</span>, <span class="number">2</span>) == <span class="number">0</span>);</span><br><span class="line">        set_bits(loc32, <span class="number">5</span>, <span class="number">16</span>, value, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">case</span> HoleKind_R_AARCH64_MOVW_UABS_G1_NC:</span><br><span class="line">        <span class="comment">// 16-bit middle-low part of an absolute address.</span></span><br><span class="line">        assert(IS_AARCH64_MOV(*loc32));</span><br><span class="line">        <span class="comment">// Check the implicit shift (this is &quot;part 1 of 3&quot;):</span></span><br><span class="line">        assert(get_bits(*loc32, <span class="number">21</span>, <span class="number">2</span>) == <span class="number">1</span>);</span><br><span class="line">        set_bits(loc32, <span class="number">5</span>, <span class="number">16</span>, value, <span class="number">16</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">case</span> HoleKind_R_AARCH64_MOVW_UABS_G2_NC:</span><br><span class="line">        <span class="comment">// 16-bit middle-high part of an absolute address.</span></span><br><span class="line">        assert(IS_AARCH64_MOV(*loc32));</span><br><span class="line">        <span class="comment">// Check the implicit shift (this is &quot;part 2 of 3&quot;):</span></span><br><span class="line">        assert(get_bits(*loc32, <span class="number">21</span>, <span class="number">2</span>) == <span class="number">2</span>);</span><br><span class="line">        set_bits(loc32, <span class="number">5</span>, <span class="number">16</span>, value, <span class="number">32</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">case</span> HoleKind_R_AARCH64_MOVW_UABS_G3:</span><br><span class="line">        <span class="comment">// 16-bit high part of an absolute address.</span></span><br><span class="line">        assert(IS_AARCH64_MOV(*loc32));</span><br><span class="line">        <span class="comment">// Check the implicit shift (this is &quot;part 3 of 3&quot;):</span></span><br><span class="line">        assert(get_bits(*loc32, <span class="number">21</span>, <span class="number">2</span>) == <span class="number">3</span>);</span><br><span class="line">        set_bits(loc32, <span class="number">5</span>, <span class="number">16</span>, value, <span class="number">48</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">case</span> HoleKind_ARM64_RELOC_GOT_LOAD_PAGE21:</span><br><span class="line">        <span class="comment">// 21-bit count of pages between this page and an absolute address&#x27;s</span></span><br><span class="line">        <span class="comment">// page... I know, I know, it&#x27;s weird. Pairs nicely with</span></span><br><span class="line">        <span class="comment">// ARM64_RELOC_GOT_LOAD_PAGEOFF12 (below).</span></span><br><span class="line">        assert(IS_AARCH64_ADRP(*loc32));</span><br><span class="line">        <span class="comment">// Number of pages between this page and the value&#x27;s page:</span></span><br><span class="line">        value = (value &gt;&gt; <span class="number">12</span>) - ((<span class="type">uint64_t</span>)location &gt;&gt; <span class="number">12</span>);</span><br><span class="line">        <span class="comment">// Check that we&#x27;re not out of range of 21 signed bits:</span></span><br><span class="line">        assert((<span class="type">int64_t</span>)value &gt;= -(<span class="number">1</span> &lt;&lt; <span class="number">20</span>));</span><br><span class="line">        assert((<span class="type">int64_t</span>)value &lt; (<span class="number">1</span> &lt;&lt; <span class="number">20</span>));</span><br><span class="line">        <span class="comment">// value[0:2] goes in loc[29:31]:</span></span><br><span class="line">        set_bits(loc32, <span class="number">29</span>, <span class="number">2</span>, value, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// value[2:21] goes in loc[5:26]:</span></span><br><span class="line">        set_bits(loc32, <span class="number">5</span>, <span class="number">19</span>, value, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">case</span> HoleKind_ARM64_RELOC_GOT_LOAD_PAGEOFF12:</span><br><span class="line">        <span class="comment">// 12-bit low part of an absolute address. Pairs nicely with</span></span><br><span class="line">        <span class="comment">// ARM64_RELOC_GOT_LOAD_PAGE21 (above).</span></span><br><span class="line">        assert(IS_AARCH64_LDR_OR_STR(*loc32) || IS_AARCH64_ADD_OR_SUB(*loc32));</span><br><span class="line">        <span class="comment">// There might be an implicit shift encoded in the instruction:</span></span><br><span class="line">        <span class="type">uint8_t</span> shift = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (IS_AARCH64_LDR_OR_STR(*loc32)) &#123;</span><br><span class="line">            shift = (<span class="type">uint8_t</span>)get_bits(*loc32, <span class="number">30</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="comment">// If both of these are set, the shift is supposed to be 4.</span></span><br><span class="line">            <span class="comment">// That&#x27;s pretty weird, and it&#x27;s never actually been observed...</span></span><br><span class="line">            assert(get_bits(*loc32, <span class="number">23</span>, <span class="number">1</span>) == <span class="number">0</span> || get_bits(*loc32, <span class="number">26</span>, <span class="number">1</span>) == <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        value = get_bits(value, <span class="number">0</span>, <span class="number">12</span>);</span><br><span class="line">        assert(get_bits(value, <span class="number">0</span>, shift) == <span class="number">0</span>);</span><br><span class="line">        set_bits(loc32, <span class="number">10</span>, <span class="number">12</span>, value, shift);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体上的思路就是差不多这样一些，剩下的就是一些 corner case 的处理，本文先不在展开。大家感兴趣的话，我单独开单篇再来聊一些</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们能发现 Python 3.13 JIT 方案的一个很大的特点是，尽可能的利用了 LLVM 生态的东西，编译器用 clang，编译参数开 -o3 获取最大的性能，二进制用具用 <code>llvm-objdump</code> 和 <code>llvm-readelf</code>，这样做相较于其余方案的好处非常非常的明显</p><ol><li>clang 的编译器优化能力非常强，能够生成非常高效的代码</li><li>能够利用 LLVM 生态的工具链，能够更好的处理跨平台的问题</li><li>避免了人工维护的困境，大部分的改动也能通过自动化的方式生成与集成，避免低级错误的诞生</li></ol><p>所以我说 Python 3.13 的 JIT 方案可谓是又新又好</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python 3.13 的 JIT 方案最终确定了，我觉得可以说又新又好。所以深夜水一篇水文，来聊聊这个 JIT 方案&lt;/p&gt;
&lt;p&gt;这篇文章可能会有些枯燥，所以如果对此不感兴趣的同学可以直接 x 掉&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://www.manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Python" scheme="https://www.manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/Python/"/>
    
    
    <category term="编程" scheme="https://www.manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://www.manjusaka.blog/tags/Linux/"/>
    
    <category term="笔记" scheme="https://www.manjusaka.blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="水文" scheme="https://www.manjusaka.blog/tags/%E6%B0%B4%E6%96%87/"/>
    
    <category term="Python" scheme="https://www.manjusaka.blog/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Per aspera, Ad astra</title>
    <link href="https://www.manjusaka.blog/posts/2023/12/29/per-aspera-ad-astra/"/>
    <id>https://www.manjusaka.blog/posts/2023/12/29/per-aspera-ad-astra/</id>
    <published>2023-12-29T15:00:00.000Z</published>
    <updated>2024-05-19T19:06:04.920Z</updated>
    
    <content type="html"><![CDATA[<p>外星人一定很奇怪，本星际云本地泡银河系猎户悬臂边缘的太阳系第三行星的人类，怎么又在开始为他们庆祝行星绕行一圈开始忙碌了呢？</p><span id="more"></span><h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>如果要说要说今年最让我记忆犹新的瞬间，那么毫无疑问是今年8月，月初的某一天，我毫无征兆的突然情绪爆发，冲到窗口边打开窗户，试图从十八楼一跃而下。不过可能我没法有游戏里的主角这一样的光环，落地，转身，拍拍屁股走人。可能只是在繁华的街道上徒留一地碎肉。</p><p>所以，妹子不知道为啥发觉了我的异常，在我一只脚迈出窗外的时候，死命将我拉了回来。我从没想过她的力气会那么大，会那样的无畏的拉着我。</p><p>所以我有些闲暇坐在这，写下这篇文章。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>从试图跳楼往前回溯，是连续几周的同一个噩梦，梦回到了自己被强奸的现场，每一次都是同样的真实。可能我想我的一些坚守的防线在不知不觉中被打破了吧。</p><p>如果说2023的关键词第一个是爱，那么第二个应该就是 tough 了</p><p>无数的噩梦，自我的怀疑，各种不如意的琐事，最喜爱的演员的离世，最惨的时候两周去了六次急诊缝了5针，打了三针，这一些 tough ，负面的词一直环绕着我。某种意义上今年是我内心猛兽更被释放的一年。我某种意义上一度陷落十来岁那种暴戾的状态，所幸， 我挺了过来。</p><p>抛开那些 tough 的内容，这一年，其实也是蛮有希望的</p><p>最大的变化是我们家迎来了一位新的成员，边牧林克，一个让你操心不已，但是却又让你想起来很有感觉的小狗。他在学会使用说话按钮最喜欢表达的一个词就是 “Loving You”。是不是非常的暖！（当然林克的操心程度非常的大，包括不仅限于撕了我概率论的书，啃了我不少电子产品，没事偷吃猫粮导致拉肚子（但是我们依然还是一只可爱的小狗</p><p>而另外一个变化是，我们家迎来了一位特殊的成员，一只叫小熊的小猫，或者是老猫。小熊是一只流浪猫，在夏日的某一个夜晚和我相遇，当时的我和妹子在因为家里已经有过多的猫而纠结时，我们说，如果我叫他，他过来，我们就救。话音未落，小熊便打着呼噜过来了，毫无防备。那么就救吧。</p><p>小熊是一只脾气异常好的猫，在住院时便成为医院的医护人员的心头宝，他也是一只异常努力的猫。努力的活着，异常努力的活着，他在我们遇见他时状态便很不好，重度口炎+肾衰，这对于任何生物来说都是异常痛苦的。但是小熊成功的挺了过来，现在状态非常稳定。回家后，小熊最喜欢躺的地方是我枕边，听着他打呼噜的时候，我在想某种意义上我在想小熊和我相遇某种意义上算是命中注定，互相拯救。</p><p>说到这个，突然想起今年一件让我开心很久的事，我一直捐助的学生，今年非常顺利的考上了大学，看着她顺利走出大山时候的笑容，我觉得我捐助的钱花的非常值得。“教育是最好的公益”</p><p>当然我 2023 年也还折腾了很多东西</p><ol><li>家里的 HomeLab 经过三个版本的大升级</li><li>和小狗一起去了很多次宠物营地</li><li>看了很多杂书<ol><li>叫魂</li><li>风沙星辰</li><li>人类群星闪耀时</li><li>银河系搭车客指南</li><li>东京贫困女子</li><li>etc..</li></ol></li></ol><p>差不多是这样，如果说 2023 年是足够 tough 的一年，那么被爱与希望环绕着的我，也好歹算是走了出来</p><p><img src="https://github.com/Zheaoli/zheaoli.github.io/assets/7054676/820e2a75-cc1f-49b5-87d9-11fb5a00156f" alt="小狗"></p><h2 id="感情"><a href="#感情" class="headerlink" title="感情"></a>感情</h2><p>感情继续进入了第五个年头，可能还会有剩下很多个年头</p><p>只是没有想到，今年突然给这一份感情加上了不少的厚重感，荆澈同学现在是我字面意义上的救命恩人Hhhhhhh</p><p>从某个意义上来说，在生死交杂的混乱边界，很多时候我会迷失，会徘徊，但是有些时候想沉沦下去的时候，会感觉背后有一双手一直在用尽全力拽着我。当我回头时总会想起荆澈同学哭喊的那句话“你死了我咋跟你爸妈交代啊”</p><p>说点轻松的，今年的感情特殊的一点是，我们有狗之后，我们俩的分工便成为了，我负责狗的日常，她负责狗的训练。某种意义上来说我们算是体验一定程度上的无痛当爹/妈</p><p>不管怎么样，希望24年也能顺利的走下去，一定要多出去玩（23年我状态不好没咋出门，感觉对不起荆澈同学（</p><p>啊！荆澈同学今年还给我买了变身器，她让我扛不住的时候按下变身器变身成奥特曼就好了！</p><p>Gaia！（超大声</p><p><img src="https://github.com/Zheaoli/zheaoli.github.io/assets/7054676/9e50dd06-e592-4b9b-a878-78f449e33ae3" alt="变身"></p><h2 id="工作与技术"><a href="#工作与技术" class="headerlink" title="工作与技术"></a>工作与技术</h2><p>今年的技术生涯，可以总结为一句话”改革，啊不，学习进入了深水区“</p><p>是的，毫无疑问的进入了深水区，站在29岁的当下，我不由的发现，技术的学习对于我来说似乎到了一个新的瓶颈。我需要更多的去思考，去理解，去实践，去总结。而且期间有一件事对于我来说是致命的</p><blockquote><p>做的事情没有办法很快的见效</p></blockquote><p>是的。我现在学习，去体验很多的很多东西，他们的结果可能需要以周或者月乃至季度为单位才能看到。这对于我来说无疑是一个巨大的挑战。我在此期间会不断的进入一个焦虑，与自我怀疑的状态。质疑自己是否还能继续走下去，质疑自己是不是一个垃圾。</p><p>而这种焦虑感也会体现在我的工作中，我的 Leader 曾经对我说”我感觉你很多时候在不断的找事来做“。Exactly，某种意义上是在填补心中的空虚。换句话说，我自己让自己陷入到一个 Everythings issues go go go 的状态中。</p><p>从另外一个方面来讲，今年的一个经常被提起的话题是 AI 是否会最终让你失业。我对此倒是有很坚定的信任，在肉眼可见的时间里，人终究还是会作为可靠性的最后一道防线</p><p>聊聊自己做的一些事吧</p><p>在学习方面，今年主要是通过 CSAPP 对于计算机体系结构有了更深入的理解，包括配合对照 Linux 内核里的一些实现，对于整体的计算机体系的 sense 有了不小的提升。这一点也体现在我在社区和工作中调试一些问题的时候，我的直觉会更为准确。</p><p>另外一点我自己觉得比较好玩的是，今年机缘巧合之下，因为调试的需求，去系统的看了一些 ELF 的里调试信息 DWARF 的一些东西，这也帮助我在做一些场景下问题定位的时候，更加的准确。</p><p>在开源项目方面，今年各种项目多多少少有一些参与，大概列一些把</p><ol><li>nerdctl CMD 入口完整重构了，让其余项目可以更好的使用</li><li>Apache OpenDAL 项目，写了不少 Rust，拾掇了 Python binding 和不少 CI。晋升了 Committer/PPMC</li><li>runc 在帮助人兜底一些历史遗留但是没人继续跟进的 PR</li><li>开始给 Kernel 提 patch（虽然被拒了不少</li></ol><p>然后去 PyCon China 做了最后两场分享，半参与的开始恢复一些博客的录制</p><p>整体来说，今年输出还是比去年少不少的</p><p>如果说明年有什么想做的事的话，那么还挺多的</p><ol><li>继续学习 Rust</li><li>写一些 CPU Simulator，比如最近已经开工想写一个 NES Simulator</li><li>把 runc 的一些 C/Go 混杂的部分扬了</li><li>继续学习 ELF/DWARF</li><li>去搞一搞 eBPF VM 的东西</li></ol><p>仔细想想也还挺有时不我待之感</p><p><img src="https://github.com/Zheaoli/zheaoli.github.io/assets/7054676/baf17e19-a65a-4c43-822c-0e2e3cb56df3" alt="我的 GitHub"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>差不多这样吧。对照了一下去年列的 OKR，今年其实有不少没有完成，但是我还是想冒昧给自己一个 3.75（XD， 毕竟我活下来了（阿里味太重了（不是</p><p>在生死交杂的世界里，唯有爱与希望是我们继续下去的动力</p><p>Per aspera, Ad astra</p><p>我很喜欢的翻译是</p><blockquote><p>循此苦旅，终抵星辰</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;外星人一定很奇怪，本星际云本地泡银河系猎户悬臂边缘的太阳系第三行星的人类，怎么又在开始为他们庆祝行星绕行一圈开始忙碌了呢？&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://www.manjusaka.blog/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="总结" scheme="https://www.manjusaka.blog/categories/%E9%9A%8F%E7%AC%94/%E6%80%BB%E7%BB%93/"/>
    
    <category term="秀恩爱" scheme="https://www.manjusaka.blog/categories/%E9%9A%8F%E7%AC%94/%E6%80%BB%E7%BB%93/%E7%A7%80%E6%81%A9%E7%88%B1/"/>
    
    
    <category term="随笔" scheme="https://www.manjusaka.blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="总结" scheme="https://www.manjusaka.blog/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>家庭 Homelab 升级计划: v2</title>
    <link href="https://www.manjusaka.blog/posts/2023/12/28/how-do-I-build-homelab-part2/"/>
    <id>https://www.manjusaka.blog/posts/2023/12/28/how-do-I-build-homelab-part2/</id>
    <published>2023-12-28T12:00:00.000Z</published>
    <updated>2024-05-19T19:06:04.916Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个为了一盘醋包了一盘饺子的故事</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>熟悉我的朋友都知道，我是个 SRE，啊，不是，书接上回，大家都知道我在六月上旬的时候，家里的 HomeLab 来了一次全新的调整。</p><p>整体的效果如下</p><p><img src="https://github.com/Zheaoli/zheaoli.github.io/assets/7054676/7135cd07-6391-4eab-829a-8fbc11565d3c" alt="机柜"></p><p><img src="https://github.com/Zheaoli/zheaoli.github.io/assets/7054676/91030573-8562-42da-a8f3-d6daf9e95947" alt="网络拓扑"></p><p><img src="https://github.com/Zheaoli/zheaoli.github.io/assets/7054676/7b57634d-acae-4e7e-a2c6-3aaf9a4ac93e" alt="家里的 VM"></p><p>现在我大概的设备如下</p><ol><li>三台 NUC （两台 Intel NUC，一台零刻 NUC），单 2.5G 口，上面跑了一个 PVE 集群，开启了一堆虚拟机</li><li>一台新入的 2.5G * 4 的小主机，上面单独跑了一个 PVE，PVE 上承载了一个 OpenWRT，做了硬件直通</li><li>UDM-SE 作为我的主路由，负责控制 DHCP ，VLAN SSID 等 AC 功能</li><li>一个 2.5G*12 + 1G*12 的 24 口交换机</li><li>一个群晖 DS1821+，上面跑了一些媒体服务</li></ol><p>同时，因为我发现 VM 管理很麻烦，所以我在10月底，将 K3S 引入了我的 Homelab 中，具体的结构如下</p><ol><li>三台物理 NUC 抽出6个 VM</li><li>每个物理 NUC 上面跑一个 K3S Master + K3S Agent</li></ol><p>这样算是做了个最基本使用的环境（后续可能会再如几个 NUC 作为一些特殊的节点）</p><p>差不多 v1 状态介绍完了，那么接下来，我来介绍下 v2 的改造</p><h2 id="V2-启动"><a href="#V2-启动" class="headerlink" title="V2 启动"></a>V2 启动</h2><p>我最近在做一些 Redis 迁移的工具，所以我想常态化的在集群里跑一个 Redis Cluster。基础的技术方案很简单 <a href="https://github.com/bitnami/charts/blob/main/bitnami/redis-cluster/README.md">redis-cluster helm charts</a> 不就完了嘛。</p><p>但是问题出现在，我想在集群外访问这个 Redis Cluster，那么这就有点麻烦了。因为自建集群存在一个问题是需要一个 External-IP 作为入口。在云厂商托管的 K8S 中，这一切都很简单。但是在自己的 Homelab 中就需要别的技术方案了。</p><p>调研了一圈，发现 <a href="https://metallb.universe.tf/">MetalLb</a> 将会是一个不错的选择。</p><ol><li>安装简单，开箱即用</li><li>支持 L2 和 BGP 两种模式</li></ol><p>那么就，安装一下？这里又有一个当时觉得头疼的地方，因为我用的主路由 UDM-SE 不支持 BGP，所以我只能选择 L2 模式。那么就配置一下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">metallb.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IPAddressPool</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">first-pool</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">metallb-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">addresses:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.20</span><span class="number">.1</span><span class="number">-192.168</span><span class="number">.20</span><span class="number">.250</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">metallb.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">L2Advertisement</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">metallb-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ipAddressPools:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">first-pool</span></span><br></pre></td></tr></table></figure><p>然后我的 Service 就能成功的分配到可以访问的 IP 了。一切看起来很好对不对？很明显不是啊！</p><p>说到不足就需要来先聊一下 MetalLB 的 L2 是怎么做的。它在每个节点上都会启动一个 Speaker 的 DaemonSet，会将你 SVC 被分配的 IP 和 MAC 地址走 ARP 宣告出去（IPV6 走 NDP）。那么这样做有几个问题</p><ol><li>同一时刻只能有一个节点的 Speaker 宣告这个 IP，如果这个节点挂了，MetalLB 基于 Hashicorp 的 <a href="https://github.com/hashicorp/memberlist">memberlist</a> 做的 failover 会有数十秒的延迟</li><li>让你的局域网变得 dirty（占用了局域网的一个 IP Range）</li></ol><p>这合理吗？这不合理啊。这清真吗，当然不清真啊。那么咋整啊，如果想换成 BGP 的话。</p><p>前面我说了<strong>我用的主路由 UDM-SE 不支持 BGP，所以我只能选择 L2 模式。</strong> 对吧。但是仔细思考之后，事情好像起了那么一些变化？</p><p>是这样，目前我的主路由只会作为最上层的网关，而我大部分设备的 Gateway 是通过 DHCP 下发的配置指向了我的 OpenWRT 实例，那么这样说的话，我好像在 OpenWRT 上做 BGP 支持就可以了？Exactly！</p><p>我把我定制的固件 <a href="https://github.com/Zheaoli/Auto-OpenWrt">Auto-OpenWRT</a> 添加了 <code>quagga</code> 相关的包后，编译，替换虚拟机镜像。然后开始进入我们的配置流程。</p><p>先看下 OpenWRT 的配置(ssh 到 OpenWRT 上，利用 vtysh 进行配置)</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">router bgp 65000</span><br><span class="line">bgp router-id 192.168.5.1</span><br><span class="line">neighbor 192.168.12.11 remote-as 65009</span><br><span class="line">neighbor 192.168.12.11 description &quot;k3s-master-1&quot;</span><br><span class="line">neighbor 192.168.12.12 remote-as 65009</span><br><span class="line">neighbor 192.168.12.12 description &quot;k3s-node-1&quot;</span><br><span class="line">neighbor 192.168.12.13 remote-as 65009</span><br><span class="line">neighbor 192.168.12.13 description &quot;k3s-node-2&quot;</span><br><span class="line">neighbor 192.168.12.14 remote-as 65009</span><br><span class="line">neighbor 192.168.12.14 description &quot;k3s-node-3&quot;</span><br><span class="line">neighbor 192.168.12.15 remote-as 65009</span><br><span class="line">neighbor 192.168.12.15 description &quot;k3s-node-4</span><br><span class="line">neighbor 192.168.12.16 remote-as 65009</span><br><span class="line">neighbor 192.168.12.16 description &quot;k3s-node-5&quot;</span><br></pre></td></tr></table></figure><p>这里我将 OpenWRT 的 BGP AS 设置为 65000，然后将 K3S 的 BGP AS 设置为 65009。</p><p>然后我们对 K3S 的配置进行修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">metallb.io/v1beta2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">BGPPeer</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">bgp-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">metallb-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">myASN:</span> <span class="number">65009</span></span><br><span class="line">  <span class="attr">peerASN:</span> <span class="number">65000</span></span><br><span class="line">  <span class="attr">peerAddress:</span> <span class="number">192.168</span><span class="number">.5</span><span class="number">.1</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">metallb.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IPAddressPool</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">first-pool</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">metallb-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">addresses:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">10.47</span><span class="number">.40</span><span class="number">.1</span><span class="string">/24</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">metallb.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">BGPAdvertisement</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">metallb-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ipAddressPools:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">first-pool</span></span><br></pre></td></tr></table></figure><p>OK, 回来看下我们的 OpenWRT 的一些结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">OpenWrt# show ip bgp summary</span><br><span class="line">BGP router identifier 192.168.5.1, local AS number 65000</span><br><span class="line">RIB entries 13, using 1456 bytes of memory</span><br><span class="line">Peers 6, using 53 KiB of memory</span><br><span class="line"></span><br><span class="line">Neighbor        V         AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd</span><br><span class="line">192.168.12.11   4 65009      12       9        0    0    0 00:02:43        7</span><br><span class="line">192.168.12.12   4 65009      12       8        0    0    0 00:02:54        7</span><br><span class="line">192.168.12.13   4 65009      12       9        0    0    0 00:02:49        7</span><br><span class="line">192.168.12.14   4 65009      12       9        0    0    0 00:02:53        7</span><br><span class="line">192.168.12.15   4 65009      12       9        0    0    0 00:02:46        7</span><br><span class="line">192.168.12.16   4 65009      12       9        0    0    0 00:02:44        7</span><br><span class="line"></span><br><span class="line">Total number of neighbors 6</span><br></pre></td></tr></table></figure><p>Right，Neighbor 成功建立，然后我们创建几个 LoadBalancer SVC 看一下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">NAME                          TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                          AGE</span><br><span class="line">shake-test-cluster            ClusterIP      10.43.135.231   &lt;none&gt;        6379/TCP                         2d19h</span><br><span class="line">shake-test-cluster-0-svc      LoadBalancer   10.43.51.216    10.47.40.0    6379:32530/TCP,16379:30502/TCP   38h</span><br><span class="line">shake-test-cluster-1-svc      LoadBalancer   10.43.131.210   10.47.40.1    6379:32576/TCP,16379:31528/TCP   38h</span><br><span class="line">shake-test-cluster-2-svc      LoadBalancer   10.43.255.193   10.47.40.2    6379:31159/TCP,16379:30952/TCP   38h</span><br><span class="line">shake-test-cluster-3-svc      LoadBalancer   10.43.208.189   10.47.40.3    6379:30919/TCP,16379:32387/TCP   38h</span><br><span class="line">shake-test-cluster-4-svc      LoadBalancer   10.43.138.170   10.47.40.5    6379:31628/TCP,16379:31405/TCP   38h</span><br><span class="line">shake-test-cluster-5-svc      LoadBalancer   10.43.21.204    10.47.40.6    6379:32273/TCP,16379:30076/TCP   38h</span><br></pre></td></tr></table></figure><p>OK 分配了一些 VIP，我们再来看下 OpenWRT 的 BGP 路由表</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">OpenWrt# show ip bgp</span><br><span class="line"></span><br><span class="line">   Network          Next Hop            Metric LocPrf Weight Path</span><br><span class="line">*  10.47.40.0/32    192.168.12.11                          0 65009 i</span><br><span class="line">*                   192.168.12.16                          0 65009 i</span><br><span class="line">*                   192.168.12.15                          0 65009 i</span><br><span class="line">*                   192.168.12.13                          0 65009 i</span><br><span class="line">*                   192.168.12.14                          0 65009 i</span><br><span class="line">*&gt;                  192.168.12.12                          0 65009 i</span><br><span class="line">*  10.47.40.1/32    192.168.12.11                          0 65009 i</span><br><span class="line">*                   192.168.12.16                          0 65009 i</span><br><span class="line">*                   192.168.12.15                          0 65009 i</span><br><span class="line">*                   192.168.12.13                          0 65009 i</span><br><span class="line">*                   192.168.12.14                          0 65009 i</span><br><span class="line">*&gt;                  192.168.12.12                          0 65009 i</span><br><span class="line">*  10.47.40.2/32    192.168.12.11                          0 65009 i</span><br><span class="line">*                   192.168.12.16                          0 65009 i</span><br><span class="line">*                   192.168.12.15                          0 65009 i</span><br><span class="line">*                   192.168.12.13                          0 65009 i</span><br><span class="line">*                   192.168.12.14                          0 65009 i</span><br><span class="line">*&gt;                  192.168.12.12                          0 65009 i</span><br><span class="line">*  10.47.40.3/32    192.168.12.11                          0 65009 i</span><br><span class="line">*                   192.168.12.16                          0 65009 i</span><br><span class="line">*                   192.168.12.15                          0 65009 i</span><br><span class="line">*                   192.168.12.13                          0 65009 i</span><br><span class="line">*                   192.168.12.14                          0 65009 i</span><br><span class="line">*&gt;                  192.168.12.12                          0 65009 i</span><br><span class="line">*  10.47.40.4/32    192.168.12.11                          0 65009 i</span><br><span class="line">*                   192.168.12.16                          0 65009 i</span><br><span class="line">*                   192.168.12.15                          0 65009 i</span><br><span class="line">*                   192.168.12.13                          0 65009 i</span><br><span class="line">*                   192.168.12.14                          0 65009 i</span><br><span class="line">*&gt;                  192.168.12.12                          0 65009 i</span><br><span class="line">*  10.47.40.5/32    192.168.12.11                          0 65009 i</span><br><span class="line">*                   192.168.12.16                          0 65009 i</span><br><span class="line">*                   192.168.12.15                          0 65009 i</span><br><span class="line">*                   192.168.12.13                          0 65009 i</span><br><span class="line">*                   192.168.12.14                          0 65009 i</span><br><span class="line">*&gt;                  192.168.12.12                          0 65009 i</span><br><span class="line">*  10.47.40.6/32    192.168.12.11                          0 65009 i</span><br><span class="line">*                   192.168.12.16                          0 65009 i</span><br><span class="line">*                   192.168.12.15                          0 65009 i</span><br><span class="line">*                   192.168.12.13                          0 65009 i</span><br><span class="line">*                   192.168.12.14                          0 65009 i</span><br><span class="line">*&gt;                  192.168.12.12                          0 65009 i</span><br></pre></td></tr></table></figure><p>很好，我们的路由表里面已经有了我们的 VIP，以及 Next Hop，当某个节点发生故障的时候，OpenWRT 会自动将路由表更新，然后将流量转发到其他节点上。</p><p>那么 SVC 的需求算是告一段落了，这算本次升级的结束了吗？</p><p>当然不是。</p><p>在完成 BGP 后，OpenWRT 将会承担更多的任务。我现在的方式是，有一个一模一样的备机在旁边，当主机挂了的时候，我需要手动切换到备机上。这样的话，我就需要一个自动化的方案。</p><p>那么这个方案就是 <a href="https://en.wikipedia.org/wiki/Virtual_Router_Redundancy_Protocol">VRRP</a>。这个协议的原理很简单，就是在两台机器上都跑一个 VRRP 的 Daemon，然后通过一个 Virtual IP 来进行访问。当主机挂了的时候，备机会接管这个 Virtual IP。</p><p>在 OpenWRT 上，我们可以通过 <code>keepalived</code> 来实现这个功能。我们先来看下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">    router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP #默认的主节点值为 MASTER</span><br><span class="line">    interface eth0</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 10</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;        </span><br><span class="line">        192.168.5.1/16 dev eth0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们将 Virtual IP 设置为 192.168.5.1，而背后的四个节点为</p><ul><li>192.168.5.2</li><li>192.168.5.3</li><li>192.168.5.4</li><li>192.168.5.5</li></ul><p>其中 192.168.5.2 为主节点，这四个 OpenWRT 都在我四个 NUC 机器上，确保一个硬件挂了其余的节点可以接管。</p><p>我们来测试下，先下线 192.168.5.2</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Thu Dec 28 20:14:52 2023 daemon.info Keepalived_vrrp[13785]: (VI_1) Entering MASTER STATE</span><br><span class="line">Thu Dec 28 20:14:52 2023 daemon.info avahi-daemon[2902]: Registering new address record for 192.168.5.1 on eth0.IPv4.</span><br><span class="line">Thu Dec 28 20:14:52 2023 daemon.info Keepalived_vrrp[13785]: (VI_1) Master received advert from 192.168.5.5 with same priority 10 but higher IP address than ours</span><br><span class="line">Thu Dec 28 20:14:52 2023 daemon.info Keepalived_vrrp[13785]: (VI_1) Entering BACKUP STATE</span><br><span class="line">Thu Dec 28 20:14:52 2023 daemon.info avahi-daemon[2902]: Withdrawing address record for 192.168.5.1 on eth0.</span><br></pre></td></tr></table></figure><p>我们能看到主节点已经切换到了 192.168.5.5 上了，然后我们再上线</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Thu Dec 28 20:26:22 2023 daemon.info Keepalived_vrrp[3000]: (VI_1) Master received advert from 192.168.5.2 with higher priority 100, ours 10</span><br><span class="line">Thu Dec 28 20:26:22 2023 daemon.info Keepalived_vrrp[3000]: (VI_1) Entering BACKUP STATE</span><br><span class="line">Thu Dec 28 20:26:22 2023 daemon.info avahi-daemon[2909]: Withdrawing address record for 192.168.5.1 on eth0.</span><br><span class="line">Thu Dec 28 20:26:22 2023 daemon.notice ttyd[7586]: [2023/12/28 20:26:22:2320] N: rops_handle_POLLIN_netlink: DELADDR</span><br></pre></td></tr></table></figure><p>我们能看到，主节点也已经切换回了</p><p>现在算是终于做到了基础的 HA 了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次升级主要还是以软件升级为主，希望能尽可能体验和云上一致。同时保持基础的 HA</p><p>下一步的迭代计划是（我自己想的）：</p><ol><li>可以尝试做更多路由的骚操作，比如 DSR</li><li>可以添置新的一些交换机，尝试 RDMA 之类的好玩的东西</li></ol><p>差不多就这样把</p>]]></content>
    
    
    <summary type="html">人生嘛，Homelab 图个乐子</summary>
    
    
    
    <category term="Homelab" scheme="https://www.manjusaka.blog/categories/Homelab/"/>
    
    
    <category term="Linux" scheme="https://www.manjusaka.blog/tags/Linux/"/>
    
    <category term="笔记" scheme="https://www.manjusaka.blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="水文" scheme="https://www.manjusaka.blog/tags/%E6%B0%B4%E6%96%87/"/>
    
    <category term="Homelab" scheme="https://www.manjusaka.blog/tags/Homelab/"/>
    
  </entry>
  
  <entry>
    <title>Python 3.12：一个被人忽略的史诗级版本</title>
    <link href="https://www.manjusaka.blog/posts/2023/10/29/the-most-important-thing-in-python-3-12/"/>
    <id>https://www.manjusaka.blog/posts/2023/10/29/the-most-important-thing-in-python-3-12/</id>
    <published>2023-10-29T19:49:00.000Z</published>
    <updated>2024-05-19T19:06:04.920Z</updated>
    
    <content type="html"><![CDATA[<p>Python 3.12 已经发布了一段时间，所以写篇水文来聊一聊这个常常被人忽略的史诗级版本。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>Python 3.12 绝对是一个史诗级版本，在我心目中，它对于 Python 的意义，大于 “async/await” 的 Python 3.5 和 “Type Hint” 的 Python 3.6 对于 Python 的意义。</p><p>或者我们可以这么说<strong>在未来数年的时间里，Python 后续的很多意义重大的变更，其都能上溯到 Python 3.12</strong>。</p><p>理解我这一个观点，我们来说一下 Python 的几大痛点：</p><ol><li>Python 的可调试性，可观测性问题。历史上 Python 中做 Cost 的消耗极大，同时没有足够的手段可以从旁路去观察 Python 的运行时行为</li><li>Python GIL 问题，这个老生长谈了，不多说</li><li>Python 的 C API/ABI 问题，之前暴露的 C API/ABI 通常和 CPython VM 实现细节耦合，导致跨版本兼容性会是一个问题</li></ol><p>而这样一些问题，Python 3.12 上都有了极大的进步</p><ol><li>PEP 669， GH-96143 极大提升了 Python 的可观测性，可调试性</li><li>PEP 684， A Per-Interpreter GIL， 提升 Python 进程内性能，为后续的 non-GIL 打下了良好的基础</li><li>PEP 697 全新的 C API，进一步解耦 API/ABI 与 CPython VM 实现细节的耦合</li></ol><p>我们下面分别来聊聊这一些变更</p><h3 id="可观测性的提升"><a href="#可观测性的提升" class="headerlink" title="可观测性的提升"></a>可观测性的提升</h3><p>先聊聊 PEP 669，PEP 669 其实是受 PEP 659 启发的一个 PEP。在此之前，Python 内部事件的监控非常的困难，或者说代价极为高昂。以之前 laike9m 做的 Cyberbrain 这样一个工具来说，它能实现如下的调试效果</p><p><img src="https://user-images.githubusercontent.com/2592205/95418789-1820b480-08ed-11eb-9b3e-61c8cdbf187a.png" alt="Cyberbrain"></p><p>通过这个功能能很方便的调试函数的各种调用栈和入参。实际上这样的实现整体上基于 <code>sys.settrace</code> 这样一套 API 来做的。会非常的慢，原因是在于每一个栈帧的调用都会触发一次 <code>sys.settrace</code> 的调用，可谓是在主干道上疯狂堵塞了。</p><p>而 PEP 669 则不一样，它存在两种 level</p><ol><li>Global Callback</li><li>Code Block Callback</li></ol><p>换句话说，可以让我们根据场景来选择不同的实现粒度（按照官方的 Benchmark，比 PEP 523 快了数个数量级）</p><p>同时 PEP 669 也实现了完整的一套 Event 语义</p><ol><li>PY_START: Start of a Python function (occurs immediately after the call, the callee’s frame will be on the stack)</li><li>PY_RESUME: Resumption of a Python function (for generator and coroutine functions), except for throw() calls.</li><li>PY_THROW: A Python function is resumed by a throw() call.</li><li>PY_RETURN: Return from a Python function (occurs immediately before the return, the callee’s frame will be on the stack).</li><li>PY_YIELD: Yield from a Python function (occurs immediately before the yield, the callee’s frame will be on the stack).</li><li>PY_UNWIND: Exit from a Python function during exception unwinding.</li><li>CALL: A call in Python code (event occurs before the call).</li><li>C_RETURN: Return from any callable, except Python functions (event occurs after the return).</li><li>C_RAISE: Exception raised from any callable, except Python functions (event occurs after the exit).</li><li>RAISE: An exception is raised, except those that cause a STOP_ITERATION event.</li><li>EXCEPTION_HANDLED: An exception is handled.</li><li>LINE: An instruction is about to be executed that has a different line number from the preceding instruction.</li><li>INSTRUCTION – A VM instruction is about to be executed.</li><li>JUMP – An unconditional jump in the control flow graph is made.</li><li>BRANCH – A conditional branch is taken (or not).</li><li>STOP_ITERATION – An artificial StopIteration is raised; see the STOP_ITERATION event.、</li></ol><p>对比一下 <code>sys.settrace</code> 提供的事件</p><ol><li>call</li><li>line</li><li>return</li><li>exception</li><li>opcode</li></ol><p>什么叫又新又好啊？通过 PEP 669，我们可以很方便的去实现性能更好的调试器，低成本的对 hot path 进行调用统计等很多操作</p><p>PEP 669，先告一段落，接着继续往下聊，GH-96143，也是一个贼为重要 PR</p><p>我们都知道，对于解释性语言在旁路 trace 最难做的一个事情，就是你很难能将内存中的地址和现在执行的代码关联起来（因为直接地址是没有意义的）。而 GH-96143 则是做了一个极简化的 JIT，将 Python 的 code block 和内存地址锚定，可以让我们在旁路直接 trace 内存地址。一个效果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">7f0caf8aa70c b py::_path_abspath:&lt;frozen importlib._bootstrap_external&gt;</span><br><span class="line">7f0caf8aa717 b py::_path_isabs:&lt;frozen importlib._bootstrap_external&gt;</span><br><span class="line">7f0caf8aa722 b py::FileFinder._fill_cache:&lt;frozen importlib._bootstrap_external&gt;</span><br><span class="line">7f0caf8aa72d b py::execusercustomize:&lt;frozen site&gt;</span><br><span class="line">7f0caf8aa738 b py::_read_directory:&lt;frozen zipimport&gt;</span><br><span class="line">7f0caf8aa743 b py::FileLoader.__init__:&lt;frozen importlib._bootstrap_external&gt;</span><br><span class="line">7f0caf8aa74e b py::&lt;module&gt;:/home/manjusaka/Documents/projects/cpython/demo.py</span><br><span class="line">7f0caf8aa759 b py::baz:/home/manjusaka/Documents/projects/cpython/demo.py</span><br><span class="line">7f0caf8aa764 b py::bar:/home/manjusaka/Documents/projects/cpython/demo.py</span><br><span class="line">7f0caf8aa76f b py::foo:/home/manjusaka/Documents/projects/cpython/demo.py</span><br></pre></td></tr></table></figure><p>具体的实现可以参考我另外一篇文章，这里就不展开了。终于算是补全了其余语言已经出现很早的功能了</p><h3 id="GIL-的改进"><a href="#GIL-的改进" class="headerlink" title="GIL 的改进"></a>GIL 的改进</h3><p>众所周知，Python 祖传的被黑的的地方是 GIL，或者说 GIL 给它带来了很多比如简化开发者代码心智负担的优势以外，也给带来额外的黑点。在<del>降本增效</del>，啊不对，性能提升越来越重要的今天，我们需要来尽可能的规避 GIL 所带来的性能问题</p><p>但是 GIL 不是那么好移除的，因为 Python 不少的状态都是全局状态，其设计的一部分假设就是 GIL 所带来的线程安全性，很典型的例子有</p><ol><li>GC</li><li>内存分配器</li><li>不同对象的安全性等</li></ol><p>在我们继续推进 non-GIL 之前，我们需要将关键状态从全局解耦。PEP 684 其实就是起到了这样的作用。除了引入 per-interpreter 的 GIL 以外。它最重要的意义莫过于将包括 GC 状态在内的一系列关键状态，下放至 interpreter 的级别。为后续的 non-GIL 落地打下了很坚实的基础</p><h3 id="C-API-ABI-的改进"><a href="#C-API-ABI-的改进" class="headerlink" title="C API/ABI 的改进"></a>C API/ABI 的改进</h3><p>Python C API/ABI 一直是一个老大难问题，因为一度和 Python VM 的 API 耦合的非常紧密。Python 官方也意识到了这个问题，从 Python 3.2 引入 Limited API，到 PEP 652 ，Python 一直在试图提供稳定，跨版本的 API，但是始终有一环没有闭环，那就是对于类型的处理</p><p>比如说，我们 Rust/C++ 之类的 Binding，通常可能会在 Python 标准类型的基础上进行一部分派生，中间存入自己的状态。那么我们最开始的写法是（也只能是）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    PyListObject <span class="built_in">list</span>;</span><br><span class="line">    <span class="type">int</span> state;</span><br><span class="line">&#125; SubListObject;</span><br></pre></td></tr></table></figure><p>那么你觉得这段代码有什么问题吗？可能你发现了，这段代码，直接依赖了 Python 的 PyListObject，这样一个数据结构实际上是内部的实现细节，它的内存布局，兼容性随时可能随着版本变化而变化。所以 PEP 697 就尝试去填补上 Python Stable API/ABI 这最后一环</p><p>在 697 后，我们可以这样实现我们的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> state;</span><br><span class="line">&#125; SubListState;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> PyObject * <span class="title function_">update_state</span><span class="params">(PyObject *module, PyObject *args)</span> &#123;</span><br><span class="line">    PyType_Spec sub_spec = &#123;</span><br><span class="line">        .name = <span class="string">&quot;_testcapi.Sub&quot;</span>,</span><br><span class="line">        .basicsize = <span class="keyword">sizeof</span>(SubListState),</span><br><span class="line">        .flags = Py_TPFLAGS_DEFAULT,</span><br><span class="line">        .slots = empty_slots,</span><br><span class="line">    &#125;;</span><br><span class="line">    PyObject *base = PyList_New(<span class="number">1</span>);</span><br><span class="line">    PyObject *sub = PyType_FromMetaclass(<span class="literal">NULL</span>, module, &amp;sub_spec, base);</span><br><span class="line">    <span class="keyword">if</span> (!sub) &#123;</span><br><span class="line">        <span class="keyword">goto</span> finally;</span><br><span class="line">    &#125;</span><br><span class="line">    instance = PyObject_CallNoArgs(sub);</span><br><span class="line">    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">        <span class="keyword">goto</span> finally;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> *data_ptr = PyObject_GetTypeData(instance, (PyTypeObject *)sub);</span><br><span class="line">    <span class="keyword">if</span> (!data_ptr) &#123;</span><br><span class="line">        <span class="keyword">goto</span> finally;</span><br><span class="line">    &#125;</span><br><span class="line">    SubListState *state = (SubListState *)data_ptr;</span><br><span class="line">    state-&gt;state = <span class="number">1</span>;</span><br><span class="line">finally:</span><br><span class="line">    Py_XDECREF(instance);</span><br><span class="line">    Py_XDECREF(sub);</span><br><span class="line">    Py_XDECREF(base);</span><br><span class="line">    <span class="keyword">return</span> Py_None;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们能看到，我们能直接将我们想要在数据结构中扩展的部分直接 attach 到基类上，而无须关心其细节。这样一来，我们就能够在不同版本的 Python 上，保证 ABI 的兼容性了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>很多人在去判断一门语言新版本的时候，会从语法糖等角度去判断，但是我自己更喜欢从它的稳定性等常常被人忽略的角度去判断。我对于 Python 3.12 的一个最直观的评价就是<strong>在可观测性，调试性，API/ABI 稳定性上，终于和其余语言站在了同一水平线上</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Python 3.12 已经发布了一段时间，所以写篇水文来聊一聊这个常常被人忽略的史诗级版本。&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;&lt;p&gt;Python 3.12 绝对是</summary>
      
    
    
    
    <category term="编程" scheme="https://www.manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Python" scheme="https://www.manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/Python/"/>
    
    
    <category term="编程" scheme="https://www.manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://www.manjusaka.blog/tags/Linux/"/>
    
    <category term="笔记" scheme="https://www.manjusaka.blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="水文" scheme="https://www.manjusaka.blog/tags/%E6%B0%B4%E6%96%87/"/>
    
    <category term="Python" scheme="https://www.manjusaka.blog/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>开源可能没你想的那么难</title>
    <link href="https://www.manjusaka.blog/posts/2023/10/24/open-source-is-simple-than-you-think/"/>
    <id>https://www.manjusaka.blog/posts/2023/10/24/open-source-is-simple-than-you-think/</id>
    <published>2023-10-24T12:00:00.000Z</published>
    <updated>2024-05-19T19:06:04.920Z</updated>
    
    <content type="html"><![CDATA[<p>去参与社区？难吗？其实不难，只是你想的很难，或者说难是你给自己找的借口</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>很多人觉得参与进开源社区很难，无外乎几个原因</p><ol><li>觉得自己技术栈不符合</li><li>觉得没啥事可以做</li><li>觉得太难了</li></ol><p>我自己对于这个观点表示不太认可，所以我从九月中旬开始，用了一个月时间，利用 <a href="https://github.com/apache/incubator-opendal">incubator-opendal</a> 做了一个实验，为什么会选择这个项目？原因以下几点</p><ol><li>Rust 对于我来说是一门我非常不熟悉的语言，相当于我跨技术栈去做一些事情</li><li>我自己之前是做网关和容器相关的偏多，存储方面对于我来说不是在我的好球区</li></ol><p>所以我想看一下，我自己作为 fresh man 能在这个社区里面做什么事</p><p>截止到今天，我整体的提交记录如下</p><p><img src="https://github.com/Zheaoli/zheaoli.github.io/assets/7054676/2fcdab1e-e516-4811-8901-8cf52ae6bcb5" alt="提交记录"></p><p>整体的花费的时间接近34h</p><p><img src="https://github.com/Zheaoli/zheaoli.github.io/assets/7054676/bc2c35f8-60f0-4de6-b884-2a59d5c5a0de" alt="项目时间统计"></p><p><img src="https://github.com/Zheaoli/zheaoli.github.io/assets/7054676/4f2d7f00-e74e-482e-a486-26c62946c6cf" alt="项目时间统计"></p><p>整体工作内容横跨了几个方面</p><ol><li>多个 Service 的支持（MySQL/Sqlite/MongoDB）</li><li>拾掇拾掇了 CI，参与 Action 的重构</li><li>把整体 Layer 的文档覆盖了</li><li>把可观测性的部分做了不少改进</li></ol><p>而截止到目前，还有很多工作需要去继续跟进，比如</p><ol><li>基于 DTrace 的进程调试支持</li><li>可观测性的几个 Layer 的完善</li><li>Layer 的测试补全</li></ol><p>大概总结一下就是通过这一个月的历练，我自己 Rust 熟练度得到了极大的提升（感谢 @Xuanwo 的不杀之恩），我自己对于整个社区的运作的理解也得到了印证。从我个人的角度来说，这次一次实验算是符合我的预期：很多时候开源没你想的那么难。</p><p>首先一点，我要纠正一个我经常见到的一个错误的观点“社区里只有那些技术难度很大，很有挑战的工作才是有价值的”。完全错误的观点，我之前和 @Xuanwo 以及 @Tison 有一个共同的观点是，很多工作并不是一开始就变得困难，而是一点点的需求形成。同时一个社区里往往存在很多关系到用户体验，必须要有人去做，但是受限于精力，已有的维护者暂时没法去做的事情。这些都是非常有价值的。</p><p>比如说我过去一个月内，花了不少的精力，将相关 Service 的文档补全，是个很典型的例子。这一些活，对于后续进入社区的成员来说，价值非常的大，但是做起来很苦逼，所以一直搁置到现在。这些活都会是一个良好的切入点。那么可能有人要问一个问题了，你去做这些脏活累活值吗？这个问题就需要去从你参与开源社区的出发点去讨论了，是去获取 reputation，然后升职加薪？还是 just for fun？如果是前者，那肯定不值，这位同学你肯定也不想在你的晋升答辩上协商善于做脏活累活吧（逃。如果是后者，我个人觉得很值，而且我自己也乐在其中，因为实际上在梳理整个文档，做很多脏活累活的过程中，实际上是 push 我去完整的梳理 OpenDAL 相关的 Service 和一些背后的逻辑。这个过程无论是对于我技术栈的提升还是对于项目本身的理解的提升都是蛮大的</p><p>说到另外一个问题，就是很多人的畏难情绪，我不只一次将一些合适的 Issue 放到不同群里，但是得到的回复通常是“我不会xx，该怎么办？”。学啊？而且很多时候熟不熟练真的没那么重要的，我记得在实现 OpenDAL 里面一些 Service 过程中，发现了一个优化点，<a href="https://github.com/apache/incubator-opendal/issues/3220">feat: change blocking_x in async_x call to tokio::task::blocking_spawn</a>，在我发到一些群里后，一位正在学习 Rust 的群友接下来这个任务，而且完成的很好。实际上去做自己最熟悉的东西是不太会给你打来成长的，去跳出舒适区，去和不同人交流，去做一些自己不熟悉的事情，才是最好的成长方式。</p><p><img src="https://github.com/Zheaoli/zheaoli.github.io/assets/7054676/fea7e1f9-acaf-4658-838a-989c003782da" alt="和群友的一些交流"></p><p>最后还有一点非常的重要，你自己经历的珍贵，你自己可能都没意识到。每个人不同的职业，学习经历会塑造一个人不同的看问题的视角，而不同的视角是一个社区最珍贵的财富。其实这个月里，我对于 OpenDAL 可观测性相关的 Layer 的工作（包括完善 Metric，目前正在实现中的引入进程调试工具等工作）实际上就是来自于我作为一个 SRE 对于可观测性基本本能。而我这样一些 SRE 的视角，也给 OpenDAL 带来了整个稳定性相关功能的迭代与进步。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实说了这么多，千言万语汇聚成一句话，如果你想去参与开源社区，那么就去勇敢参与，不需要给自己设限。你一定会在你不断的参与的过程中得到许许多多的收获，认识不同的人与事。</p><p>开源真没你想的那么难</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;去参与社区？难吗？其实不难，只是你想的很难，或者说难是你给自己找的借口&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://www.manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="杂记" scheme="https://www.manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="编程" scheme="https://www.manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="杂记" scheme="https://www.manjusaka.blog/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>聊聊 Python 3.12 中 perf 的原生支持</title>
    <link href="https://www.manjusaka.blog/posts/2023/10/05/the-perf-feature-python-312/"/>
    <id>https://www.manjusaka.blog/posts/2023/10/05/the-perf-feature-python-312/</id>
    <published>2023-10-05T15:50:00.000Z</published>
    <updated>2024-05-19T19:06:04.920Z</updated>
    
    <content type="html"><![CDATA[<p>好久没写 Python 相关的文章了，但是 Python 3.12 perf 原生支持的这个特性非常的棒，思路又新又好了属于是，所以写篇水文来聊聊这个特性</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="先聊聊-Python-的栈帧"><a href="#先聊聊-Python-的栈帧" class="headerlink" title="先聊聊 Python 的栈帧"></a>先聊聊 Python 的栈帧</h3><p>在聊今天的正式内容之前我们需要理解 Python 在内存中的布局</p><p>对于传统的 native application 而言，大家对于其内存布局应该是比较熟悉的，这里以 x86-64 的一张图来说明其栈帧结构</p><p><img src="https://github.com/Zheaoli/zheaoli.github.io/assets/7054676/a1015149-4160-4f3c-b2da-dab8ff4ad2a4" alt="X86 栈帧"></p><p>但是对于 CPython 来说，其 Native Code 执行的只是 VM 一层的代码。其在 VM 内单独抽象了一套类似 native 的栈帧结构。</p><p>其核心结构如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">frame</span> &#123;</span></span><br><span class="line">    PyObject_HEAD</span><br><span class="line">    PyFrameObject *f_back;      <span class="comment">/* previous frame, or NULL */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">PyInterpreterFrame</span> *<span class="title">f_frame</span>;</span> <span class="comment">/* points to the frame data */</span></span><br><span class="line">    PyObject *f_trace;          <span class="comment">/* Trace function */</span></span><br><span class="line">    <span class="type">int</span> f_lineno;               <span class="comment">/* Current line number. Only valid if non-zero */</span></span><br><span class="line">    <span class="type">char</span> f_trace_lines;         <span class="comment">/* Emit per-line trace events? */</span></span><br><span class="line">    <span class="type">char</span> f_trace_opcodes;       <span class="comment">/* Emit per-opcode trace events? */</span></span><br><span class="line">    <span class="type">char</span> f_fast_as_locals;      <span class="comment">/* Have the fast locals of this frame been converted to a dict? */</span></span><br><span class="line">    <span class="comment">/* The frame data, if this frame object owns the frame */</span></span><br><span class="line">    PyObject *_f_frame_data[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PyInterpreterFrame</span> &#123;</span></span><br><span class="line">    PyObject *f_executable; <span class="comment">/* Strong reference */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">PyInterpreterFrame</span> *<span class="title">previous</span>;</span></span><br><span class="line">    PyObject *f_funcobj; <span class="comment">/* Strong reference. Only valid if not on C stack */</span></span><br><span class="line">    PyObject *f_globals; <span class="comment">/* Borrowed reference. Only valid if not on C stack */</span></span><br><span class="line">    PyObject *f_builtins; <span class="comment">/* Borrowed reference. Only valid if not on C stack */</span></span><br><span class="line">    PyObject *f_locals; <span class="comment">/* Strong reference, may be NULL. Only valid if not on C stack */</span></span><br><span class="line">    PyFrameObject *frame_obj; <span class="comment">/* Strong reference, may be NULL. Only valid if not on C stack */</span></span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> This is not necessarily the last instruction started in the given</span></span><br><span class="line">    <span class="comment">// frame. Rather, it is the code unit *prior to* the *next* instruction. For</span></span><br><span class="line">    <span class="comment">// example, it may be an inline CACHE entry, an instruction we just jumped</span></span><br><span class="line">    <span class="comment">// over, or (in the case of a newly-created frame) a totally invalid value:</span></span><br><span class="line">    _Py_CODEUNIT *prev_instr;</span><br><span class="line">    <span class="type">int</span> stacktop;  <span class="comment">/* Offset of TOS from localsplus  */</span></span><br><span class="line">    <span class="comment">/* The return_offset determines where a `RETURN` should go in the caller,</span></span><br><span class="line"><span class="comment">     * relative to `prev_instr`.</span></span><br><span class="line"><span class="comment">     * It is only meaningful to the callee,</span></span><br><span class="line"><span class="comment">     * so it needs to be set in any CALL (to a Python function)</span></span><br><span class="line"><span class="comment">     * or SEND (to a coroutine or generator).</span></span><br><span class="line"><span class="comment">     * If there is no callee, then it is meaningless. */</span></span><br><span class="line">    <span class="type">uint16_t</span> return_offset;</span><br><span class="line">    <span class="type">char</span> owner;</span><br><span class="line">    <span class="comment">/* Locals and stack */</span></span><br><span class="line">    PyObject *localsplus[<span class="number">1</span>];</span><br><span class="line">&#125; _PyInterpreterFrame;</span><br></pre></td></tr></table></figure><p>其在内存的组织结构大概如下所示</p><p><img src="https://github.com/Zheaoli/zheaoli.github.io/assets/7054676/06bda75b-0505-40b5-a0d8-4c815b21402b" alt="Python 栈帧"></p><p>这里不难理解，每个栈帧中都包含了当前栈帧的上一个栈帧的指针，这样就形成了一个完整的栈结构。</p><p>同时我们能看到，在 Python 的栈帧结构中包含了很多重要的信息，</p><ol><li>当前执行的 opcode</li><li>当前所对应的行号（类似于符号表存在）</li><li>当前的局部，全局变量</li></ol><p>我们所有的 trace/回溯的操作，都需要来基于这些信息来进行。</p><p>OK，在大致了解了 Python 的栈帧的一些入门知识后，我们接着往下聊</p><h3 id="3-12-之前的一些尝试"><a href="#3-12-之前的一些尝试" class="headerlink" title="3.12 之前的一些尝试"></a>3.12 之前的一些尝试</h3><p>我们通常对于在外部调试 Python 的时候，无外乎有两种需求</p><ol><li>去 trace 某一个函数的调用栈</li><li>去采样不同函数在不同时间的调用（perf）</li></ol><p>在 Python 3.12 之前，社区已经对于这样一些内容有了尝试</p><h4 id="trace-的尝试"><a href="#trace-的尝试" class="headerlink" title="trace 的尝试"></a>trace 的尝试</h4><p>Python 目前对于 Trace 的尝试最早可以追溯到2014年，在 3.6 发布前夕，Python 提供了 DTrace 的支持，参见 Systemtap and DTrace support<a href="#refer-anchor-1"><sup>1</sup></a></p><p>DTrace 是在 Unix/Linux 下提供的一种用户预置一些埋点的基础设施。在对应的函数预置埋点后，对应位置的调用可以触发外部的注册程序（包含 SystemTap/eBPF 等），从而实现对于一些调用时的动态 trace。</p><p>Python 提供了一部分预置的 Hook 点</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">29564 python18035        python3.6          _PyEval_EvalFrameDefault function-entry</span><br><span class="line">29565 python18035        python3.6             dtrace_function_entry function-entry</span><br><span class="line">29566 python18035        python3.6          _PyEval_EvalFrameDefault function-return</span><br><span class="line">29567 python18035        python3.6            dtrace_function_return function-return</span><br><span class="line">29568 python18035        python3.6                           collect gc-done</span><br><span class="line">29569 python18035        python3.6                           collect gc-start</span><br><span class="line">29570 python18035        python3.6          _PyEval_EvalFrameDefault line</span><br><span class="line">29571 python18035        python3.6                 maybe_dtrace_line line</span><br></pre></td></tr></table></figure><p>然后下面是一个使用 systemtap 的例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">probe process(&quot;python&quot;).mark(&quot;function__entry&quot;) &#123;</span><br><span class="line">     filename = user_string($arg1);</span><br><span class="line">     funcname = user_string($arg2);</span><br><span class="line">     lineno = $arg3;</span><br><span class="line"></span><br><span class="line">     printf(&quot;%s =&gt; %s in %s:%d\\n&quot;,</span><br><span class="line">            thread_indent(1), funcname, filename, lineno);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">probe process(&quot;python&quot;).mark(&quot;function__return&quot;) &#123;</span><br><span class="line">    filename = user_string($arg1);</span><br><span class="line">    funcname = user_string($arg2);</span><br><span class="line">    lineno = $arg3;</span><br><span class="line"></span><br><span class="line">    printf(&quot;%s &lt;= %s in %s:%d\\n&quot;,</span><br><span class="line">           thread_indent(-1), funcname, filename, lineno);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果差不多这样</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">11408 python(8274):        =&gt; __contains__ in Lib/_abcoll.py:362</span><br><span class="line">11414 python(8274):         =&gt; __getitem__ in Lib/os.py:425</span><br><span class="line">11418 python(8274):          =&gt; encode in Lib/os.py:490</span><br><span class="line">11424 python(8274):          &lt;= encode in Lib/os.py:493</span><br><span class="line">11428 python(8274):         &lt;= __getitem__ in Lib/os.py:426</span><br><span class="line">11433 python(8274):        &lt;= __contains__ in Lib/_abcoll.py:366</span><br></pre></td></tr></table></figure><p>但是目前来说，通过 DTrace 暴露的信息还比较少，在一些复杂的场景（比如多线程，协程），对于一个函数多次调用后，我们很难去将具体的函数关联到具体的调用栈中。</p><p>这个时候就需要涉及到去对于 Python 栈帧结构的处理了。虽然 USDT 没有将 FrameObject 指针传入到我们的注册 hook 程序中，不过要获取的话，实际上也不算太难</p><p>首先我们利用 readelf 看一下 Python 二进制中 <code>.note.stapsdt</code> section 中的内容，</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Displaying notes found in: .note.stapsdt</span><br><span class="line">  Owner                Data size        Description</span><br><span class="line">  stapsdt              0x00000045       NT_STAPSDT (SystemTap probe descriptors)</span><br><span class="line">    Provider: python</span><br><span class="line">    Name: function__entry</span><br><span class="line">    Location: 0x00000000002693bf, Base: 0x00000000003f0fc9, Semaphore: 0x0000000000624110</span><br><span class="line">    Arguments: 8@%rbp 8@%r12 -4@%eax</span><br><span class="line">  stapsdt              0x00000046       NT_STAPSDT (SystemTap probe descriptors)</span><br><span class="line">    Provider: python</span><br><span class="line">    Name: function__return</span><br><span class="line">    Location: 0x00000000002693ff, Base: 0x00000000003f0fc9, Semaphore: 0x0000000000624112</span><br><span class="line">    Arguments: 8@%rbp 8@%r12 -4@%eax</span><br><span class="line">  stapsdt              0x0000003b       NT_STAPSDT (SystemTap probe descriptors)</span><br><span class="line">    Provider: python</span><br><span class="line">    Name: line</span><br><span class="line">    Location: 0x000000000010539e, Base: 0x00000000003f0fc9, Semaphore: 0x000000000062411c</span><br><span class="line">    Arguments: 8@%r12 8@%rax -4@%r15d</span><br><span class="line">  stapsdt              0x00000047       NT_STAPSDT (SystemTap probe descriptors)</span><br><span class="line">    Provider: python</span><br><span class="line">    Name: import__find__load__done</span><br><span class="line">    Location: 0x00000000002a1450, Base: 0x00000000003f0fc9, Semaphore: 0x0000000000624124</span><br><span class="line">    Arguments: 8@%rax -4@%edx</span><br><span class="line">  stapsdt              0x00000040       NT_STAPSDT (SystemTap probe descriptors)</span><br><span class="line">    Provider: python</span><br><span class="line">    Name: import__find__load__start</span><br><span class="line">    Location: 0x00000000002a1468, Base: 0x00000000003f0fc9, Semaphore: 0x0000000000624122</span><br><span class="line">    Arguments: 8@%rax</span><br><span class="line">  stapsdt              0x00000033       NT_STAPSDT (SystemTap probe descriptors)</span><br><span class="line">    Provider: python</span><br><span class="line">    Name: audit</span><br><span class="line">    Location: 0x00000000002cd611, Base: 0x00000000003f0fc9, Semaphore: 0x0000000000624126</span><br><span class="line">    Arguments: 8@%rbp 8@%rbx</span><br><span class="line">  stapsdt              0x00000036       NT_STAPSDT (SystemTap probe descriptors)</span><br><span class="line">    Provider: python</span><br><span class="line">    Name: gc__start</span><br><span class="line">    Location: 0x00000000002e6a9d, Base: 0x00000000003f0fc9, Semaphore: 0x000000000062411e</span><br><span class="line">    Arguments: -4@120(%rsp)</span><br><span class="line">  stapsdt              0x00000030       NT_STAPSDT (SystemTap probe descriptors)</span><br><span class="line">    Provider: python</span><br><span class="line">    Name: gc__done</span><br><span class="line">    Location: 0x00000000002e70b4, Base: 0x00000000003f0fc9, Semaphore: 0x0000000000624120</span><br><span class="line">    Arguments: -8@%rbx</span><br></pre></td></tr></table></figure><p>我们能看到 function__entry 中起始的地址是 <code>0x00000000002693bf</code>，然后我们可以在 gdb 中将对应的部分反汇编出来</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x5555557bd3ef &lt;dtrace_function_return+31&gt;:  call   0x55555575be00 &lt;PyUnicode_AsUTF8&gt;</span><br><span class="line">0x5555557bd3f4 &lt;dtrace_function_return+36&gt;:  mov    %rbx,%rdi</span><br><span class="line">0x5555557bd3f7 &lt;dtrace_function_return+39&gt;:  mov    %rax,%r12</span><br><span class="line">0x5555557bd3fa &lt;dtrace_function_return+42&gt;:  call   0x5555557e38d0 &lt;_PyInterpreterFrame_GetLine&gt;</span><br><span class="line">0x5555557bd3ff &lt;dtrace_function_return+47&gt;:  nop</span><br></pre></td></tr></table></figure><p>其中 NOP 指令是一个 trick，在外部有程序 attach 到进程上后，NOP 会被替换成 INT3 进入调试模式。</p><p>然后我们看到上一个调用是 call _PyInterpreterFrame_GetLine ，而这个函数的参数的原型是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> _PyInterpreterFrame_GetLine(_PyInterpreterFrame *frame);</span><br></pre></td></tr></table></figure><p>OK 基于 X86 的调用约定，rbi 用于存放函数第一个参数，即我们需要获取的 frame 对象，那么这里实际上在我们的 probe 程序中获取 rbx 寄存器的值就可以获取我们需要的 frame 对象了。</p><p>这样就能基于 DTrace 来完成一些 trace 的需求了。</p><p>但是目前基于 DTrace 的方案有这样一些问题</p><ol><li>不通用，需要在不同的平台上来反汇编获取对应的寄存器，同时不同的 Python 版本的寄存器位置也不一样（3.9 以下是 r15， 3.10/3.11 是 rbx）</li><li>Python 官方对于 Dtrace 的上心，导致 API 时不时的失灵，比如今天从4月份到现在，Dtrace function__entry 的 probe 点因为 PEP 669 的实现失效至今没法修，参见 Missing DTrace probes<a href="#refer-anchor-2"><sup>2</sup></a></li><li>粒度太粗了，每个函数都需要过一次 function__entry， 性能地狱</li></ol><h4 id="perf-类采样的尝试"><a href="#perf-类采样的尝试" class="headerlink" title="perf 类采样的尝试"></a>perf 类采样的尝试</h4><p>其实这一部分可以了聊的东西相对没那么多，主流的工具，如同 py-spy 这样的都是通过 process_vm_readv 这样的奇怪的 syscall 来处理的。本质上还是对于 FrameObject 进行各种解析，缺陷差不多有这样一些</p><ol><li>内存读的 overhead 其实不小，这一部分其实是可以规避的</li><li>FrameObject 在不断的变化，导致需要对于不同的 FrameObject 做 Binding，这一点也会导致兼容性的问题。</li></ol><h3 id="Python-3-12-的新尝试"><a href="#Python-3-12-的新尝试" class="headerlink" title="Python 3.12 的新尝试"></a>Python 3.12 的新尝试</h3><p>我们都知道，对于非 NATIVE CODE 来说，perf 很多时候没有办法生效，因为你找不到对应的地址和具体的符号之间的映射，也无从谈起去采样。</p><p>好在 2009 年 Linux 3.x 之后，perf 提供新的功能，它允许用户往 <code>/tmp/perf-%d.map</code> 文件中写入地址与符号之间的映射，这样 perf 就可以通过这个文件来解析地址了。具体可以参见 perf report: Add support for profiling JIT generated code share<a href="#refer-anchor-3"><sup>3</sup></a></p><p>在 Java/Node.js 都对于这个功能有了支持后，Python 也在 3.12 中提供了对于这个功能的支持，具体可以参见 gh-96143: Allow Linux perf profiler to see Python calls<a href="#refer-anchor-4"><sup>4</sup></a></p><p>这个功能的实现其实是一种局部的 JIT，我们来看看具体的实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> PyObject *(*py_evaluator)(PyThreadState *, _PyInterpreterFrame *,</span><br><span class="line">                                  <span class="type">int</span> throwflag);</span><br><span class="line"><span class="keyword">typedef</span> PyObject *(*py_trampoline)(PyThreadState *, _PyInterpreterFrame *, <span class="type">int</span>,</span><br><span class="line">                                   py_evaluator);</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> *_Py_trampoline_func_start;  <span class="comment">// Start of the template of the</span></span><br><span class="line">                                         <span class="comment">// assembly trampoline</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> *</span><br><span class="line">    _Py_trampoline_func_end;  <span class="comment">// End of the template of the assembly trampoline</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">code_arena_st</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> *start_addr;    <span class="comment">// Start of the memory arena</span></span><br><span class="line">    <span class="type">char</span> *current_addr;  <span class="comment">// Address of the current trampoline within the arena</span></span><br><span class="line">    <span class="type">size_t</span> size;         <span class="comment">// Size of the memory arena</span></span><br><span class="line">    <span class="type">size_t</span> size_left;    <span class="comment">// Remaining size of the memory arena</span></span><br><span class="line">    <span class="type">size_t</span> code_size;    <span class="comment">// Size of the code of every trampoline in the arena</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">code_arena_st</span></span></span><br><span class="line"><span class="class">        *<span class="title">prev</span>;</span>  <span class="comment">// Pointer to the arena  or NULL if this is the first arena.</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">code_arena_st</span> <span class="title">code_arena_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">trampoline_api_st</span> <span class="title">trampoline_api_t</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> perf_status _PyRuntime.ceval.perf.status</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> extra_code_index _PyRuntime.ceval.perf.extra_code_index</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> perf_code_arena _PyRuntime.ceval.perf.code_arena</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> trampoline_api _PyRuntime.ceval.perf.trampoline_api</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> perf_map_file _PyRuntime.ceval.perf.map_file</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">perf_map_write_entry</span><span class="params">(<span class="type">void</span> *state, <span class="type">const</span> <span class="type">void</span> *code_addr,</span></span><br><span class="line"><span class="params">                         <span class="type">unsigned</span> <span class="type">int</span> code_size, PyCodeObject *co)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *entry = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (co-&gt;co_qualname != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        entry = PyUnicode_AsUTF8(co-&gt;co_qualname);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *filename = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (co-&gt;co_filename != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        filename = PyUnicode_AsUTF8(co-&gt;co_filename);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">size_t</span> perf_map_entry_size = <span class="built_in">snprintf</span>(<span class="literal">NULL</span>, <span class="number">0</span>, <span class="string">&quot;py::%s:%s&quot;</span>, entry, filename) + <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span>* perf_map_entry = (<span class="type">char</span>*) PyMem_RawMalloc(perf_map_entry_size);</span><br><span class="line">    <span class="keyword">if</span> (perf_map_entry == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">snprintf</span>(perf_map_entry, perf_map_entry_size, <span class="string">&quot;py::%s:%s&quot;</span>, entry, filename);</span><br><span class="line">    PyUnstable_WritePerfMapEntry(code_addr, code_size, perf_map_entry);</span><br><span class="line">    PyMem_RawFree(perf_map_entry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_PyPerf_Callbacks _Py_perfmap_callbacks = &#123;</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">    &amp;perf_map_write_entry,</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> PyObject *</span><br><span class="line"><span class="title function_">py_trampoline_evaluator</span><span class="params">(PyThreadState *ts, _PyInterpreterFrame *frame,</span></span><br><span class="line"><span class="params">                        <span class="type">int</span> throw)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (perf_status == PERF_STATUS_FAILED ||</span><br><span class="line">        perf_status == PERF_STATUS_NO_INIT) &#123;</span><br><span class="line">        <span class="keyword">goto</span> default_eval;</span><br><span class="line">    &#125;</span><br><span class="line">    PyCodeObject *co = _PyFrame_GetCode(frame);</span><br><span class="line">    py_trampoline f = <span class="literal">NULL</span>;</span><br><span class="line">    assert(extra_code_index != <span class="number">-1</span>);</span><br><span class="line">    <span class="type">int</span> ret = _PyCode_GetExtra((PyObject *)co, extra_code_index, (<span class="type">void</span> **)&amp;f);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span> || f == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// This is the first time we see this code object so we need</span></span><br><span class="line">        <span class="comment">// to compile a trampoline for it.</span></span><br><span class="line">        py_trampoline new_trampoline = compile_trampoline();</span><br><span class="line">        <span class="keyword">if</span> (new_trampoline == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">goto</span> default_eval;</span><br><span class="line">        &#125;</span><br><span class="line">        trampoline_api.write_state(trampoline_api.state, new_trampoline,</span><br><span class="line">                                   perf_code_arena-&gt;code_size, co);</span><br><span class="line">        _PyCode_SetExtra((PyObject *)co, extra_code_index,</span><br><span class="line">                         (<span class="type">void</span> *)new_trampoline);</span><br><span class="line">        f = new_trampoline;</span><br><span class="line">    &#125;</span><br><span class="line">    assert(f != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> f(ts, frame, throw, _PyEval_EvalFrameDefault);</span><br><span class="line">default_eval:</span><br><span class="line">    <span class="comment">// Something failed, fall back to the default evaluator.</span></span><br><span class="line">    <span class="keyword">return</span> _PyEval_EvalFrameDefault(ts, frame, throw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这里的思路很巧妙，有几个核心的点</p><ol><li>将默认的 _PyEval_EvalFrameDefault 替换为 py_trampoline_evaluator</li><li>在 py_trampoline_evaluator 中，首先会去尝试从 FrameObject 中获取对应的 trampoline，如果没有的话，就会去编译一个 trampoline，然后将其写入到 perf map 文件中，同时将其缓存到 FrameObject 中，这样下次就可以直接从 FrameObject 中获取到对应的 trampoline 了。</li></ol><p>那么怎么编译 trampline 呢？我们来看看具体的实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">new_code_arena</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// non-trivial programs typically need 64 to 256 kiB.</span></span><br><span class="line">    <span class="type">size_t</span> mem_size = <span class="number">4096</span> * <span class="number">16</span>;</span><br><span class="line">    assert(mem_size % sysconf(_SC_PAGESIZE) == <span class="number">0</span>);</span><br><span class="line">    <span class="type">char</span> *memory =</span><br><span class="line">        mmap(<span class="literal">NULL</span>,  <span class="comment">// address</span></span><br><span class="line">             mem_size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS,</span><br><span class="line">             <span class="number">-1</span>,  <span class="comment">// fd (not used here)</span></span><br><span class="line">             <span class="number">0</span>);  <span class="comment">// offset (not used here)</span></span><br><span class="line">    <span class="keyword">if</span> (!memory) &#123;</span><br><span class="line">        PyErr_SetFromErrno(PyExc_OSError);</span><br><span class="line">        _PyErr_WriteUnraisableMsg(</span><br><span class="line">            <span class="string">&quot;Failed to create new mmap for perf trampoline&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">        perf_status = PERF_STATUS_FAILED;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> *start = &amp;_Py_trampoline_func_start;</span><br><span class="line">    <span class="type">void</span> *end = &amp;_Py_trampoline_func_end;</span><br><span class="line">    <span class="type">size_t</span> code_size = end - start;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> n_copies = mem_size / code_size;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; n_copies; i++) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(memory + i * code_size, start, code_size * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Some systems may prevent us from creating executable code on the fly.</span></span><br><span class="line">    <span class="type">int</span> res = mprotect(memory, mem_size, PROT_READ | PROT_EXEC);</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">-1</span>) &#123;</span><br><span class="line">        PyErr_SetFromErrno(PyExc_OSError);</span><br><span class="line">        munmap(memory, mem_size);</span><br><span class="line">        _PyErr_WriteUnraisableMsg(</span><br><span class="line">            <span class="string">&quot;Failed to set mmap for perf trampoline to PROT_READ | PROT_EXEC&quot;</span>,</span><br><span class="line">            <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    invalidate_icache(memory, memory + mem_size);</span><br><span class="line"></span><br><span class="line">    <span class="type">code_arena_t</span> *new_arena = PyMem_RawCalloc(<span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="type">code_arena_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (new_arena == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        PyErr_NoMemory();</span><br><span class="line">        munmap(memory, mem_size);</span><br><span class="line">        _PyErr_WriteUnraisableMsg(<span class="string">&quot;Failed to allocate new code arena struct&quot;</span>,</span><br><span class="line">                                  <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    new_arena-&gt;start_addr = memory;</span><br><span class="line">    new_arena-&gt;current_addr = memory;</span><br><span class="line">    new_arena-&gt;size = mem_size;</span><br><span class="line">    new_arena-&gt;size_left = mem_size;</span><br><span class="line">    new_arena-&gt;code_size = code_size;</span><br><span class="line">    new_arena-&gt;prev = perf_code_arena;</span><br><span class="line">    perf_code_arena = new_arena;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">free_code_arenas</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">code_arena_t</span> *cur = perf_code_arena;</span><br><span class="line">    <span class="type">code_arena_t</span> *prev;</span><br><span class="line">    perf_code_arena = <span class="literal">NULL</span>;  <span class="comment">// invalid static pointer</span></span><br><span class="line">    <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">        munmap(cur-&gt;start_addr, cur-&gt;size);</span><br><span class="line">        prev = cur-&gt;prev;</span><br><span class="line">        PyMem_RawFree(cur);</span><br><span class="line">        cur = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> py_trampoline</span><br><span class="line"><span class="title function_">code_arena_new_code</span><span class="params">(<span class="type">code_arena_t</span> *code_arena)</span></span><br><span class="line">&#123;</span><br><span class="line">    py_trampoline trampoline = (py_trampoline)code_arena-&gt;current_addr;</span><br><span class="line">    code_arena-&gt;size_left -= code_arena-&gt;code_size;</span><br><span class="line">    code_arena-&gt;current_addr += code_arena-&gt;code_size;</span><br><span class="line">    <span class="keyword">return</span> trampoline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> py_trampoline</span><br><span class="line"><span class="title function_">compile_trampoline</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((perf_code_arena == <span class="literal">NULL</span>) ||</span><br><span class="line">        (perf_code_arena-&gt;size_left &lt;= perf_code_arena-&gt;code_size)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (new_code_arena() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    assert(perf_code_arena-&gt;size_left &lt;= perf_code_arena-&gt;size);</span><br><span class="line">    <span class="keyword">return</span> code_arena_new_code(perf_code_arena);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到其实编译的操作本质上是从内存区域内新申请一块区域，然后将对应的 trampoline 拷贝到这个区域中，然后将这个区域设置为可执行的，这样就可以了。</p><p>而对于 trampoline 的实现，其实就是一个汇编的实现，我们来看看具体的实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    .text</span><br><span class="line">    .globl_Py_trampoline_func_start</span><br><span class="line">_Py_trampoline_func_start:</span><br><span class="line">#ifdef __x86_64__</span><br><span class="line">    sub    $8, %rsp</span><br><span class="line">    call    *%rcx</span><br><span class="line">    add    $8, %rsp</span><br><span class="line">    ret</span><br><span class="line">#endif // __x86_64__</span><br><span class="line">#if defined(__aarch64__) &amp;&amp; defined(__AARCH64EL__) &amp;&amp; !defined(__ILP32__)</span><br><span class="line">    // ARM64 little endian, 64bit ABI</span><br><span class="line">    // generate with aarch64-linux-gnu-gcc 12.1</span><br><span class="line">    stp     x29, x30, [sp, -16]!</span><br><span class="line">    mov     x29, sp</span><br><span class="line">    blr     x3</span><br><span class="line">    ldp     x29, x30, [sp], 16</span><br><span class="line">    ret</span><br><span class="line">#endif</span><br><span class="line">    .globl_Py_trampoline_func_end</span><br><span class="line">_Py_trampoline_func_end:</span><br><span class="line">    .section        .note.GNU-stack,&quot;&quot;,@progbits</span><br></pre></td></tr></table></figure><p>我们看到这里的汇编其实就是一个简单的 call 操作，然后将返回值返回即可。等价于</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PyObject *</span><br><span class="line"><span class="title function_">trampoline</span><span class="params">(PyThreadState *ts, _PyInterpreterFrame *f,</span></span><br><span class="line"><span class="params">           <span class="type">int</span> throwflag, py_evaluator evaluator)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> evaluator(ts, f, throwflag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们其实这里的思路就不难理解了，我们在编译 trampoline 的时候，会将对应的 FrameObject 传入到 trampoline 中，然后我们在 perf map 文件写入的时候，实际上是将符号与内存中的一块固定区域进行了 binding。这样让我们的 perf 就可以通过 perf map 文件来解析对应的符号了。</p><p>那么我们来看看具体的 perf map 文件的内容</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">7f0caf8aa70c b py::_path_abspath:&lt;frozen importlib._bootstrap_external&gt;</span><br><span class="line">7f0caf8aa717 b py::_path_isabs:&lt;frozen importlib._bootstrap_external&gt;</span><br><span class="line">7f0caf8aa722 b py::FileFinder._fill_cache:&lt;frozen importlib._bootstrap_external&gt;</span><br><span class="line">7f0caf8aa72d b py::execusercustomize:&lt;frozen site&gt;</span><br><span class="line">7f0caf8aa738 b py::_read_directory:&lt;frozen zipimport&gt;</span><br><span class="line">7f0caf8aa743 b py::FileLoader.__init__:&lt;frozen importlib._bootstrap_external&gt;</span><br><span class="line">7f0caf8aa74e b py::&lt;module&gt;:/home/manjusaka/Documents/projects/cpython/demo.py</span><br><span class="line">7f0caf8aa759 b py::baz:/home/manjusaka/Documents/projects/cpython/demo.py</span><br><span class="line">7f0caf8aa764 b py::bar:/home/manjusaka/Documents/projects/cpython/demo.py</span><br><span class="line">7f0caf8aa76f b py::foo:/home/manjusaka/Documents/projects/cpython/demo.py</span><br></pre></td></tr></table></figure><p>这样的好处有很多，我们可以利用 Linux 本身的 perf 生态，来完成很多基本的工作（比如火焰图）</p><p>同时我们在去做一些具体的函数的 trace 的时候，我们也可以利用 uprobe 之类的工具，基于我们在 perf 中写入的映射，来做更进一步的 trace，这也让整个 Python 程序的 trace 变的更容易，不用考虑汇编，不用考虑平台（其实也要考虑的（目前只有 ARM/X86 支持））</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Python 3.12 这个新特性真的是又新又好，实现的非常巧妙。其实之前和人讨论到 WASM 的 perf 的支持的时候，我第一反应也是可以参考 Python 中类似的做法，不过 WASM 先把自己的 WASI 搞成熟吧，不然花式 host function 也没啥 perf/trace 的必要了。</p><p>差不多就这样</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><div id="refer-anchor-1"></div><ul><li>[1]. <a href="https://github.com/python/cpython/issues/65789">https://github.com/python/cpython/issues/65789</a></li></ul><div id="refer-anchor-2"></div><ul><li>[2]. <a href="https://github.com/python/cpython/issues/104280">https://github.com/python/cpython/issues/104280</a></li></ul><div id="refer-anchor-3"></div><ul><li>[3]. <a href="https://lkml.org/lkml/2009/6/8/499">https://lkml.org/lkml/2009/6/8/499</a></li></ul><div id="refer-anchor-4"></div><ul><li>[4]. <a href="https://github.com/python/cpython/pull/96123">https://github.com/python/cpython/pull/96123</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;好久没写 Python 相关的文章了，但是 Python 3.12 perf 原生支持的这个特性非常的棒，思路又新又好了属于是，所以写篇水文来聊聊这个特性&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://www.manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://www.manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/Linux/"/>
    
    
    <category term="编程" scheme="https://www.manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://www.manjusaka.blog/tags/Linux/"/>
    
    <category term="笔记" scheme="https://www.manjusaka.blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="水文" scheme="https://www.manjusaka.blog/tags/%E6%B0%B4%E6%96%87/"/>
    
    <category term="Python" scheme="https://www.manjusaka.blog/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>关于 CPU Burst 在 K8s 中的一些设计想法</title>
    <link href="https://www.manjusaka.blog/posts/2023/08/26/a-little-bit-design-about-cpu-burst-in-k8s/"/>
    <id>https://www.manjusaka.blog/posts/2023/08/26/a-little-bit-design-about-cpu-burst-in-k8s/</id>
    <published>2023-08-26T19:09:00.000Z</published>
    <updated>2024-05-19T19:06:04.916Z</updated>
    
    <content type="html"><![CDATA[<p>深夜看群友聊的我实在焦虑，起来随便写个水文压压惊</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>写这篇文章的原因是之前给 runc 提的 CPU Burst 支持的 PR <a href="https://github.com/opencontainers/runc/pull/3749">[Carry #3205] libct/cg: add CFS bandwidth burst for CPU</a> 终于开始有了新的动静了，这次换了一个国人的 reviewer，感觉要是运气好能在9月开始合并这个 PR。</p><p>如果这个 PR 被合并了，那么在 containerd/nerdctl 等其余项目上支持 CPU Burst 的工作就可以开始了。所以这篇文章就是想记录下我对于 CPU Burst 在 Kubernetes 内实现的一些想法，差不多可以当作自己写正式的 KEP(Kubernetes Enhancement Proposal) 草稿</p><p>主要分为两个部分来聊一下</p><ol><li>CPU Burst 的一些背景</li><li>目前 Kubernetes 对于 CPU 资源切分的设计概要</li><li>CPU Burst 在 Kubernetes 中的一些设计想法</li></ol><h3 id="CPU-Burst-的一些背景"><a href="#CPU-Burst-的一些背景" class="headerlink" title="CPU Burst 的一些背景"></a>CPU Burst 的一些背景</h3><p>聊 CPU Burst 之前必须要先聊一下 Linux 里面关于 CGroup 的一些背景知识</p><p>提到 CPU 限制，本质上是限制进程的 CPU 使用的时间片，在 Linux 下，进程存在三种调度优先级</p><ol><li>SCHED_NORMAL</li><li>SCHED_FIFO</li><li>SCHED_RR</li></ol><p>1 用的是 Linux 中 CFS 调度器，而常见普通进程都是 SCHED_NORMAL 。OK 前提知识带过</p><p>说回容器中的 CPU 限制，目前主流语境下，容器特指以基于 CGroup 的容器方案为代表的一系列的基于 Linux 中 CGroup 和 Namespace 进行隔离的技术方案。那么在这个语境下，CPU 限制的实现利用了Linux CGroup 中三个 CPU Subsystem。我们主要关心的如下四个参数</p><ol><li>cpu.cfs_period_us</li><li>cpu.cfs_quota_us</li><li>cpu.shares</li><li>cpuset.cpus</li></ol><p>现在分别来聊一下</p><p>首先说 cpu.shares，在基于 CGroup 的容器方案中的使用参数是 —cpu-shares，本质上是一个下限的软限制，用来设定 CPU 的利用率权重。默认值是 1024。这里对于相对值可能理解有点抽象。那么我们来看个例子 假如一个 1core 的主机运行 3 个 container，其中一个 cpu-shares 设置为 1024，而其它 cpu-shares 被设置成 512。当 3 个容器中的进程尝试使用 100% CPU 的时候（因为 cpu.shares 针对的是下限，只有使用 100% CPU 很重要，此时才可以体现设置值），则设置 1024 的容器会占用 50% 的 CPU 时间。那再举个例子，之前这个场景，其余的两个容器如果都没有太多任务，那么空余出来的 CPU 时间，是可以继续被第一个 1024 的容器继续使用的</p><p>接下来聊一下 cpu.cfs_quota_us 和 cpu.cfs_period_us ，这两个是需要组合使用才能生效，本质上含义是在 cpu.cfs_period_us 的单位时间内，进程最多可以利用 cpu.cfs_quota_us （单位都是 us），如果 quota 耗尽，那么进程会被内核 throttle 。在基于 CGroup 的容器方案下，你可以利用 —cpu-period 和 —cpu-quota 这两个值分别进行设置。也可以通过 —cpu 来进行设置，当我们设置 —cpu 为 2 的时候，容器会保证 cpu.cfs_quota_us 两倍于 cpu.cfs_period_us，剩下的就以此类推了（Docker 默认的 cpu.cfs_period_us 的阈值是 100ms 即 10000us）</p><p>在这种模式下，CPU 的时间片按照时间维度基于 period 进行切分，那么在我们实际的生产应用中，我们将会遇到这样的情况，突然来了一波流量/一个任务，进程消耗完了所有的 quota 后，那么将会进入 throttle 的状态。这会导致我们整个响应的 P99 出现很大的毛刺。</p><p>CPU Burst 这个特性就是为了解决这个问题而生，它的原理是在已有的语义基础上，新增一个参数 cpu.cfs_burst_us （在 CGroup V2 中 cpu.max.burst），即进程可以在 CPU 利用率比较低的空闲时段积累一定的 credit，然后在密集使用的时候换取一定的 buffer，实现更少的 throttle 和更高的 CPU 利用率（当然这个特性还暂时没有被主流容器所完全支持）</p><p>这里可能有人会问，这样不会导致 CPU 限制失效吗？虽然本文不会讨论 burst 的实现（可以单开一篇文章聊），但是可以先给一个结论，目前来看，暂时从数学的角度上利用 WECT(Worst-case Execution Time) 没法给出一个证明说 CPU Burst 是完全可靠的，但是根据已有的测试结果来看，在 CGroup 数量比较多 &amp; CPU 利用率整体不高的情况下，边界是收敛的，具体可以参见相关的讨论<a href="#refer-anchor-1"><sup>1</sup></a></p><p>OK，关于 CPU Burst 的背景先聊到这里</p><h3 id="Kubernetes-对于-CPU-资源切分的设计概要"><a href="#Kubernetes-对于-CPU-资源切分的设计概要" class="headerlink" title="Kubernetes 对于 CPU 资源切分的设计概要"></a>Kubernetes 对于 CPU 资源切分的设计概要</h3><p>聊完 CPU Burst 的背景，我们需要来聊一下 Kubernetes 对于 CPU 资源怎么做的分割</p><p>首先我们起手一段祖传 YAML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">50m</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">50Mi</span></span><br><span class="line">    <span class="attr">limits:</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">100Mi</span></span><br></pre></td></tr></table></figure><p>抛去内存的部分，我们先讨论 CPU 的部分，这个地方很容易理解，我这个 Pod 需要百分之5核的 CPU，最多允许使用10%核的 CPU。</p><p>然后在这里，m 是指千分之一核，也就是说 1000m = 1核，那么这里的 50m 就是 5% 核，100m 就是 10% 核。OK 接着往下聊</p><p>首先对于我们 requests 部分，Kubernetes 在调度的时候，会利用我们之前提到的 cpu.shares 来设置</p><p>而对于我们 limits 的部分，Kubernetes 在调度的时候，会利用我们之前提到的 cpu.cfs_quota_us 和 cpu.cfs_period_us 来设置，在 Kubernetes 中，cpu.cfs_period_us 的默认值是 100ms 即 10000us，那么在我们的例子中，cpu.cfs_quota_us 的值就是 100ms * 10% = 10ms。</p><p>OK，大家可能都比较熟悉 Kubernetes 里面的资源的一些基础概念了。那么我们接着回到本文的正题部分：如何在 Kubernetes 中实现 CPU Burst</p><h3 id="如何在-Kubernetes-中实现-CPU-Burst"><a href="#如何在-Kubernetes-中实现-CPU-Burst" class="headerlink" title="如何在 Kubernetes 中实现 CPU Burst"></a>如何在 Kubernetes 中实现 CPU Burst</h3><p>在 Kubernetes 中实现 CPU Burst 核心的两个问题</p><ol><li>语义怎么设计</li><li>我怕们节点可能是混部的，换句话说内核版本不一定大于 5.14</li></ol><p>这个地方我会考虑三种方案</p><ol><li>在 resources 中新增字段</li><li>通过 annotation 以及 CRD 来实现</li><li>通过 kubelet config 来实现</li></ol><p>在聊这三种方案之前，社区其实已经有了一些实现，也是阿里做的，我们先来看一下阿里的实现</p><h4 id="koordinator-中-CPU-Burst-的实现"><a href="#koordinator-中-CPU-Burst-的实现" class="headerlink" title="koordinator 中 CPU Burst 的实现"></a>koordinator 中 CPU Burst 的实现</h4><p>首先我们来看一下阿里的实现，这个实现是在 koordinator 中实现的，具体的实现可以参见<a href="#refer-anchor-2"><sup>2</sup></a></p><p>他们通过 CRD/configmap/annotation 多种方式都可以实现对于 Burst 的支持，比如看一个例子</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">apache-demo</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">koordinator.sh/cpuBurst:</span> <span class="string">&#x27;&#123;&quot;policy&quot;: &quot;auto&quot;&#125;&#x27;</span>   <span class="comment"># 增加了Cpu Burst策略的开关。</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">httpd</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">-D</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">FOREGROUND</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.cn-zhangjiakou.aliyuncs.com/acs/apache-2-4-51-for-slo-test:v0.1</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">apache</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">limits:</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">&quot;4&quot;</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">10Gi</span></span><br><span class="line">      <span class="attr">requests:</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">&quot;4&quot;</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">10Gi</span></span><br><span class="line">  <span class="attr">nodeName:</span> <span class="string">$nodeName</span> <span class="comment"># 注意修改模板中指定节点的nodeName。</span></span><br><span class="line">  <span class="attr">hostNetwork:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line">  <span class="attr">schedulerName:</span> <span class="string">default-scheduler</span></span><br></pre></td></tr></table></figure><p>那么问题来了，现在 Kubernetes 中还不支持 burst，那么怎么做的呢，我们直接看下他们核心代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *cpuBurst)</span></span> applyContainerCFSQuota(podMeta *statesinformer.PodMeta, containerStat *corev1.ContainerStatus,</span><br><span class="line">curContaienrCFS, deltaContainerCFS <span class="type">int64</span>) <span class="type">error</span> &#123;</span><br><span class="line">podDir := podMeta.CgroupDir</span><br><span class="line">curPodCFS, podPathErr := b.cgroupReader.ReadCPUQuota(podDir)</span><br><span class="line"><span class="keyword">if</span> podPathErr != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;get pod %v/%v current cfs quota failed, error: %v&quot;</span>,</span><br><span class="line">podMeta.Pod.Namespace, podMeta.Pod.Name, podPathErr)</span><br><span class="line">&#125;</span><br><span class="line">containerDir, containerPathErr := koordletutil.GetContainerCgroupParentDir(podMeta.CgroupDir, containerStat)</span><br><span class="line"><span class="keyword">if</span> containerPathErr != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;get container %v/%v/%v cgroup path failed, error: %v&quot;</span>,</span><br><span class="line">podMeta.Pod.Namespace, podMeta.Pod.Name, containerStat.Name, containerPathErr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">updatePodCFSQuota := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// no need to adjust pod cpu.cfs_quota if it is already -1</span></span><br><span class="line"><span class="keyword">if</span> curPodCFS &lt;= <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">targetPodCFS := curPodCFS + deltaContainerCFS</span><br><span class="line">podCFSValStr := strconv.FormatInt(targetPodCFS, <span class="number">10</span>)</span><br><span class="line">eventHelper := audit.V(<span class="number">3</span>).Pod(podMeta.Pod.Namespace, podMeta.Pod.Name).Reason(<span class="string">&quot;CFSQuotaBurst&quot;</span>).Message(<span class="string">&quot;update pod CFSQuota: %v&quot;</span>, podCFSValStr)</span><br><span class="line">updater, _ := resourceexecutor.DefaultCgroupUpdaterFactory.New(system.CPUCFSQuotaName, podDir, podCFSValStr, eventHelper)</span><br><span class="line"><span class="keyword">if</span> _, err := b.executor.Update(<span class="literal">true</span>, updater); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;update pod cgroup %v failed, error %v&quot;</span>, podMeta.CgroupDir, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">updateContainerCFSQuota := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">targetContainerCFS := curContaienrCFS + deltaContainerCFS</span><br><span class="line">containerCFSValStr := strconv.FormatInt(targetContainerCFS, <span class="number">10</span>)</span><br><span class="line">eventHelper := audit.V(<span class="number">3</span>).Container(containerStat.Name).Reason(<span class="string">&quot;CFSQuotaBurst&quot;</span>).Message(<span class="string">&quot;update container CFSQuota: %v&quot;</span>, containerCFSValStr)</span><br><span class="line">updater, _ := resourceexecutor.DefaultCgroupUpdaterFactory.New(system.CPUCFSQuotaName, containerDir, containerCFSValStr, eventHelper)</span><br><span class="line"><span class="keyword">if</span> _, err := b.executor.Update(<span class="literal">true</span>, updater); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;update container cgroup %v failed, reason %v&quot;</span>, containerDir, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// cfs scale down, order: container-&gt;pod</span></span><br><span class="line">sortOfUpdateQuota := []<span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">error</span>&#123;updateContainerCFSQuota, updatePodCFSQuota&#125;</span><br><span class="line"><span class="keyword">if</span> deltaContainerCFS &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// cfs scale up, order: pod-&gt;container</span></span><br><span class="line">sortOfUpdateQuota = []<span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">error</span>&#123;updatePodCFSQuota, updateContainerCFSQuota&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, update := <span class="keyword">range</span> sortOfUpdateQuota &#123;</span><br><span class="line"><span class="keyword">if</span> err := update(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set cpu.cfs_burst_us for containers</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *cpuBurst)</span></span> applyCPUBurst(burstCfg *slov1alpha1.CPUBurstConfig, podMeta *statesinformer.PodMeta) &#123;</span><br><span class="line">pod := podMeta.Pod</span><br><span class="line">containerMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]*corev1.Container)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> pod.Spec.Containers &#123;</span><br><span class="line">container := &amp;pod.Spec.Containers[i]</span><br><span class="line">containerMap[container.Name] = container</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">podCFSBurstVal := <span class="type">int64</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> pod.Status.ContainerStatuses &#123;</span><br><span class="line">containerStat := &amp;pod.Status.ContainerStatuses[i]</span><br><span class="line">container, exist := containerMap[containerStat.Name]</span><br><span class="line"><span class="keyword">if</span> !exist || container == <span class="literal">nil</span> &#123;</span><br><span class="line">klog.Warningf(<span class="string">&quot;container %s/%s/%s not found in pod spec&quot;</span>, pod.Namespace, pod.Name, containerStat.Name)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> containerStat.ContainerID == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">klog.V(<span class="number">5</span>).Infof(<span class="string">&quot;container %s/%s/%s got empty id, skip since it may not start&quot;</span>,</span><br><span class="line">pod.Namespace, pod.Name, containerStat.Name)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">containerCFSBurstVal := calcStaticCPUBurstVal(container, burstCfg)</span><br><span class="line">containerDir, burstPathErr := koordletutil.GetContainerCgroupParentDir(podMeta.CgroupDir, containerStat)</span><br><span class="line"><span class="keyword">if</span> burstPathErr != <span class="literal">nil</span> &#123;</span><br><span class="line">klog.Warningf(<span class="string">&quot;get container dir %s/%s/%s failed, dir %v, error %v&quot;</span>,</span><br><span class="line">pod.Namespace, pod.Name, containerStat.Name, containerDir, burstPathErr)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">podCFSBurstVal += containerCFSBurstVal</span><br><span class="line">containerCFSBurstValStr := strconv.FormatInt(containerCFSBurstVal, <span class="number">10</span>)</span><br><span class="line">eventHelper := audit.V(<span class="number">3</span>).Container(containerStat.Name).Reason(<span class="string">&quot;CPUBurst&quot;</span>).Message(<span class="string">&quot;update container CPUBurst: %v&quot;</span>, containerCFSBurstValStr)</span><br><span class="line">updater, err := resourceexecutor.DefaultCgroupUpdaterFactory.New(system.CPUBurstName, containerDir, containerCFSBurstValStr, eventHelper)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123; <span class="comment">// normally cpu burst resource not supported on current system</span></span><br><span class="line">klog.V(<span class="number">5</span>).Infof(<span class="string">&quot;get cpu burst updater for container %s/%s/%s failed, maybe system unsupported, err: %v&quot;</span>,</span><br><span class="line">pod.Namespace, pod.Name, containerStat.Name, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">updated, err := b.executor.Update(<span class="literal">true</span>, updater)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; system.IsResourceUnsupportedErr(err) &#123;</span><br><span class="line">klog.V(<span class="number">5</span>).Infof(<span class="string">&quot;update container %v/%v/%v cpu burst failed, cfs burst not supported, dir %v, info %v&quot;</span>,</span><br><span class="line">pod.Namespace, pod.Name, containerStat.Name, containerDir, err)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">klog.V(<span class="number">4</span>).Infof(<span class="string">&quot;update container %v/%v/%v cpu burst failed, dir %v, updated %v, err %v&quot;</span>,</span><br><span class="line">pod.Namespace, pod.Name, containerStat.Name, containerDir, updated, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">metrics.RecordContainerScaledCFSBurstUS(pod.Namespace, pod.Name, containerStat.ContainerID, containerStat.Name, <span class="type">float64</span>(containerCFSBurstVal))</span><br><span class="line">klog.V(<span class="number">5</span>).Infof(<span class="string">&quot;apply container %v/%v/%v cpu burst value successfully, dir %v, value %v&quot;</span>,</span><br><span class="line">pod.Namespace, pod.Name, containerStat.Name, containerDir, containerCFSBurstVal)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="comment">// end for containers</span></span><br><span class="line"></span><br><span class="line">podDir := podMeta.CgroupDir</span><br><span class="line">podCFSBurstValStr := strconv.FormatInt(podCFSBurstVal, <span class="number">10</span>)</span><br><span class="line">eventHelper := audit.V(<span class="number">3</span>).Pod(podMeta.Pod.Namespace, podMeta.Pod.Name).Reason(<span class="string">&quot;CPUBurst&quot;</span>).Message(<span class="string">&quot;update pod CFSQuota: %v&quot;</span>, podCFSBurstValStr)</span><br><span class="line">updater, err := resourceexecutor.DefaultCgroupUpdaterFactory.New(system.CPUBurstName, podDir, podCFSBurstValStr, eventHelper)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123; <span class="comment">// normally cpu burst resource not supported on current system</span></span><br><span class="line">klog.V(<span class="number">5</span>).Infof(<span class="string">&quot;get cpu burst updater for pod %s/%s failed, maybe system unsupported, err: %v&quot;</span>,</span><br><span class="line">pod.Namespace, pod.Name, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">updated, err := b.executor.Update(<span class="literal">true</span>, updater)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; system.IsResourceUnsupportedErr(err) &#123;</span><br><span class="line">klog.V(<span class="number">5</span>).Infof(<span class="string">&quot;update pod %v/%v cpu burst failed, cfs burst not supported, dir %v, info %v&quot;</span>,</span><br><span class="line">pod.Namespace, pod.Name, podDir, err)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">klog.V(<span class="number">4</span>).Infof(<span class="string">&quot;update pod %v/%v cpu burst failed, dir %v, updated %v, err %v&quot;</span>,</span><br><span class="line">pod.Namespace, pod.Name, podDir, updated, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">klog.V(<span class="number">5</span>).Infof(<span class="string">&quot;apply pod %v/%v cpu burst value successfully, dir %v, value %v&quot;</span>,</span><br><span class="line">pod.Namespace, pod.Name, podDir, podCFSBurstValStr)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段逻辑其实很简单，他们的做法很暴力，直接将 koordinator 跑了 daemon，直接更新了 CGroup 的值，然后通过 CRD/configmap/annotation 来控制是否开启 CPU Burst。同时对于低版本的内核，通过调整 period 和 quota 来实现类似 burst 的效果。。</p><p>不得不说，的确是实现了目标，但是缺点也很明显，实际上是破坏了 Kubernetes 对于资源的调度。路子很野。</p><p>那么我们接下来来聊聊我们的几种实现的思路</p><h4 id="在-kubelet-config-中新增配置来实现"><a href="#在-kubelet-config-中新增配置来实现" class="headerlink" title="在 kubelet config 中新增配置来实现"></a>在 kubelet config 中新增配置来实现</h4><p>首先大家肯定清楚，在 Kubelet 中存在两种 CPU Manager Policy</p><ol><li>None</li><li>Static</li></ol><p>后者对于 Guaranteed 类型 QoS 的 Pod 可以进行绑核操作，我们可以通过在 Node 打上 Label ，然后利用 NodeSelector 和亲和反亲和之类的工具来完成 Pod 的调度</p><p>那么同理，我们可以类似在 Kubernetes 中新增一个 CPU Manager Policy 的策略，叫作 Burst，然后新增一个配置字段 BurstQuotaPercentage。这个字段决定了我们为 Burstable 类型的 Pod，新增 BurstQuotaPercentage * cpu.cfs_quota_us 的 cpu.cfs_burst_us 的时间。</p><p>这样的好处有这样几个</p><ol><li>语义清晰，和 Kubelet 的 CPU Manager Policy 保持了一致</li><li>实现相对简单，而且对于混合节点（多版本内核，多 containerd 版本）支持较好（可以在启动时候进行检查，如果不支持，就不启动这个策略）</li></ol><p>但是缺点也很明显</p><ol><li>和 Static 的策略一样，使用起来并不方便，需要用户自己去做 NodeSelector 的调度，实际上是破坏了一部分 Kubernetes 对于底层细节的封装</li></ol><h4 id="在-resources-中新增字段来实现"><a href="#在-resources-中新增字段来实现" class="headerlink" title="在 resources 中新增字段来实现"></a>在 resources 中新增字段来实现</h4><p>这个方案核心在于调整 Resources 的语义，使其可以使用这样的方式来实现 CPU Burst</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">50m</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">50Mi</span></span><br><span class="line">    <span class="attr">limits:</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">        <span class="attr">cpuBurst:</span> <span class="number">20</span><span class="string">%</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">100Mi</span></span><br></pre></td></tr></table></figure><p>这个方案的好处有这样几个</p><ol><li>使用起来足够简单，非常清晰明了</li><li>调度粒度够细</li></ol><p>但是缺点也很明显</p><ol><li>语义上的不对称，因为 CPUBurst 是对于 limits 的限制，而不是 requests 的限制，那么这实际上破坏了现有语义的对称性。</li><li>调度上存在一个歧义：对于混合部署的场景，如果内核或者 containerd 版本不支持的话，那么我们这个 Pod 是放弃 Burst 还是调度失败？同时我们的调度器是否应该去感知底层内核和 CPU 版本？这又会带来一个抽象泄漏的问题、</li><li>只支持 Pod 级别的 Burst 太细了</li></ol><h4 id="通过-annotation-以及-CRD-来实现"><a href="#通过-annotation-以及-CRD-来实现" class="headerlink" title="通过 annotation 以及 CRD 来实现"></a>通过 annotation 以及 CRD 来实现</h4><p>实际上类似于阿里已有的方案，我们已知 Kubernetes 存在一个 PodDistruptionBudget 的 CRD</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">policy/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PodDisruptionBudget</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zk-pdb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">minAvailable:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">zookeeper</span></span><br></pre></td></tr></table></figure><p>那么我们实际上也可以设计一个类似的 CPUBurstConfig 的 CRD 来实现</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">policy/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CPUBurstConfig</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zk-pdb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">QuotaPercentage:</span> <span class="number">20</span><span class="string">%</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">zookeeper</span></span><br></pre></td></tr></table></figure><p>同时我们也支持通过 annotation 来进行配置（因为 namespace crd 最终会转化为 Pod 上的 annotation）</p><p>那么这样的方案很明显</p><ol><li>规避了 resources 方案带来的语义不对称问题</li><li>我们既可以实现 namespace 级别的多种 Burst 策略，也可以基于 Pod annotation 来实现更细粒度的配置</li></ol><p>但是缺点很明显，和 resources 方案差不多，会带来一个抽象泄漏的问题</p><ol><li>我们的调度器是否应该去感知底层内核和 CPU 版本？</li><li>我们 kubelet 是否应该去读取 Pod 的 annotation 来进行操作？</li></ol><p>差不多就这些吧</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇水文差不多就到这里了，算是对于我自己想做的一个 KEP 的一些设计思考吧。不过有一说一，各种 tradeoff 实在太难做了。属实麻了。差不多就这样吧。改天有空再水点其余的文章吧。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><div id="refer-anchor-1"></div><ul><li>[1]. <a href="https://lore.kernel.org/lkml/5371BD36-55AE-4F71-B9D7-B86DC32E3D2B@linux.alibaba.com/">https://lore.kernel.org/lkml/5371BD36-55AE-4F71-B9D7-B86DC32E3D2B@linux.alibaba.com/</a></li></ul><div id="refer-anchor-2"></div><ul><li>[2]. <a href="https://github.com/koordinator-sh/koordinator">https://github.com/koordinator-sh/koordinator</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;深夜看群友聊的我实在焦虑，起来随便写个水文压压惊&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://www.manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://www.manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/Linux/"/>
    
    
    <category term="编程" scheme="https://www.manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://www.manjusaka.blog/tags/Linux/"/>
    
    <category term="笔记" scheme="https://www.manjusaka.blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="水文" scheme="https://www.manjusaka.blog/tags/%E6%B0%B4%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>关于用户态栈回溯（Unwind）的一些杂记和想法</title>
    <link href="https://www.manjusaka.blog/posts/2023/08/22/a-little-bit-idea-about-unwind/"/>
    <id>https://www.manjusaka.blog/posts/2023/08/22/a-little-bit-idea-about-unwind/</id>
    <published>2023-08-22T16:09:00.000Z</published>
    <updated>2024-05-19T19:06:04.916Z</updated>
    
    <content type="html"><![CDATA[<p>随手记录一些关于用户态栈回溯（Unwind）的一些杂记和想法。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>昨晚三点过刚吃完药躺在床上休息的时候，突然想到了 @yihong0618 的之前在群里的一个想法</p><blockquote><p>我在想 eBPF 能不能 trace libpq 的协议，好像还没有人做过</p></blockquote><p>我最开始的一个想法是</p><blockquote><p>现在主流做法还是 ptrace 系的东西（gdb 那套），你要用 eBPF 去 trace libpq 肯定没问题，就和 Grey 用 uprobe 去 trace go 一样，手算 cast。但是这里另外一个问题是 libpq 的符号信息不一定够。我倾向你可以这样试一下，你改一下 libpq 源码，关键地方走 USDT（我看你之前用过）</p></blockquote><p>不过后续我师父出来有了一个提醒</p><blockquote><p>如果目标是 trace libpq.so 的调用情况，那应该目前就可以做到。<br>.so 相比 executable 有几个优势：</p><ol><li>它一定有动态符号表</li><li>它一定有 .eh_frame<br>uprobe 恰好又是 attach to the binary offset 而不是 process address，所以第一个优势完美匹配 uprobe，甚至绕开了 executable 本身如果是 PIE 的复杂情况。<br>栈回溯则完美利用了第二个优势。举例来说，默认的 libc.so 里的函数都是 -fomit-frame-pointer 所以不能用 bp = *bp 来回溯，但是可以用 FDE (Frame Description Entry) 来回溯。DWARF 的 .debug_frame 和 .so 的 .eh_frame 就包含了这样的信息，所以足够让我们从 .so 回溯回 executable。<br>所以目前的基建已经完全足够做一个 libpq.so 的 bpf tracer，而不需要任何前提假设。</li></ol></blockquote><p>的确是。。LSB 规定的信息足够多，我之前忽略了这点。一般发行版都是带了 .eh_frame, 里面的 CFI 是可以做栈回溯的，而且我看了下 PG 默认的编译是没开 no-asynchronous-unwind-tables 的，基本上可以确保一定会带这 eh_frame。（注：这个选项用来控制是否生成 .eh_frame）</p><p>所以说做就做，爬起来想先做一个 PoC。先去 Review 了一下手上的工具，发现可能 systemtap 是比较适合的工具，他内部已经实现了一套 DWARF，符号表相关信息解析的功能，所以可以直接复用，先写了一个 Demo 的 PG 代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libpq-fe.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">do_exit</span><span class="params">(PGconn *conn)</span> &#123;</span><br><span class="line">    PQfinish(conn);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demo2</span><span class="params">()</span> &#123;</span><br><span class="line">    PGconn *conn = PQconnectdb(<span class="string">&quot;host=127.0.0.1 user=postgres password=example&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (PQstatus(conn) == CONNECTION_BAD) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Connection to database failed: %s\n&quot;</span>, PQerrorMessage(conn));</span><br><span class="line">        do_exit(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PGresult *res = PQexec(conn, <span class="string">&quot;SELECT VERSION()&quot;</span>);    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (PQresultStatus(res) != PGRES_TUPLES_OK) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No data retrieved\n&quot;</span>);        </span><br><span class="line">        PQclear(res);</span><br><span class="line">        do_exit(conn);</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, PQgetvalue(res, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    </span><br><span class="line">    PQclear(res);</span><br><span class="line">    PQfinish(conn);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demo1</span><span class="params">()</span> &#123;</span><br><span class="line">    demo2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    demo1();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后起起 systemtap 写个钩子</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">probe process(&quot;/lib64/libpq.so&quot;).function(&quot;PQconnectdb&quot;) &#123;</span><br><span class="line">    print_ubacktrace()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">probe process(&quot;/lib64/libpq.so&quot;).function(&quot;PQexec&quot;) &#123;</span><br><span class="line">    print_ubacktrace()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">probe process(&quot;/lib64/libpq.so&quot;).function(&quot;PQresultStatus&quot;) &#123;</span><br><span class="line">    print_ubacktrace()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">probe process(&quot;/lib64/libpq.so&quot;).function(&quot;PQclear&quot;) &#123;</span><br><span class="line">    print_ubacktrace()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">probe process(&quot;/lib64/libpq.so&quot;).function(&quot;PQfinish&quot;) &#123;</span><br><span class="line">    print_ubacktrace()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行效果是这样</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">probe process(&quot;/lib64/libpq.so&quot;).function(&quot;PQconnectdb&quot;) &#123;</span><br><span class="line">    print_ubacktrace()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">probe process(&quot;/lib64/libpq.so&quot;).function(&quot;PQexec&quot;) &#123;</span><br><span class="line">    print_ubacktrace()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">probe process(&quot;/lib64/libpq.so&quot;).function(&quot;PQresultStatus&quot;) &#123;</span><br><span class="line">    print_ubacktrace()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">probe process(&quot;/lib64/libpq.so&quot;).function(&quot;PQclear&quot;) &#123;</span><br><span class="line">    print_ubacktrace()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">probe process(&quot;/lib64/libpq.so&quot;).function(&quot;PQfinish&quot;) &#123;</span><br><span class="line">    print_ubacktrace()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没什么问题，心满意足的准备去睡觉</p><p>起来后顺便复习了一些用户态栈回溯的细节</p><h2 id="一些杂记"><a href="#一些杂记" class="headerlink" title="一些杂记"></a>一些杂记</h2><p>用户态栈回溯核心的一个要解决的点就是增强程序的可追踪性。</p><p>在传统 X86 模式下，我们有这样的栈帧结构</p><p><img src="https://github.com/Zheaoli/zheaoli.github.io/assets/7054676/a1015149-4160-4f3c-b2da-dab8ff4ad2a4" alt="X86 栈帧"></p><p>大体概括就是利用 ebp 寄存器保存栈帧地址，esp 保存栈顶指针，在调用过程里，将上一个栈帧地址入栈保存</p><p>在这种情况下，我们不管是调试器还是其他的工具，都可以通过 ebp 和 esp 来进行栈回溯，这种方式优缺点都很明显</p><p>优点就是足够的简单，缺点的话大概有这样一些方面</p><ol><li>浪费一个固定的通用寄存器</li><li>保存回溯信息时有额外的指令跳转开销</li><li>回溯出来的信息上下文不够，通常只能恢复堆栈寄存器的内容</li></ol><p>所以在这种情况下，进入64位时代后，这种栈帧结构被放弃，gcc 在64位编译下默认不使用 rbp 寄存器来保存栈帧地址了（不过可以通过 -fno-omit-frame-pointer 选项打开）</p><p>在栈帧结构变化后，我们现在要进行栈回溯，就需要依赖额外的一些调试信息了。</p><p>说到调试信息，大家第一反应肯定是 DWARF (aka Debugging With Attributed Record Formats)，在这一套信息中，定义了一套 CFI (Call Frame Information) 的规范，用来描述栈帧的结构，这套规范在 GCC 和 LLVM 中都有实现。目前 CFI 相关信息存放在程序的 .debug_frame 和 ,.eh_frame 段中。我们可以用一下 readelf 来查看，这里以我们上面的 C 代码的编译结果为例</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">000000b4 000000000000001c 000000b8 FDE cie=00000000 pc=00000000000012fc..0000000000001311</span><br><span class="line">   LOC           CFA      rbp   ra    </span><br><span class="line">00000000000012fc rsp+8    u     c-8   </span><br><span class="line">00000000000012fd rsp+16   c-16  c-8   </span><br><span class="line">0000000000001300 rbp+16   c-16  c-8   </span><br><span class="line">0000000000001310 rsp+8    c-16  c-8   </span><br></pre></td></tr></table></figure><p>这里的 FDE (Frame Description Entry) 就是一条 CFI 信息，里面包含了一些寄存器的信息，比如 rsp, rbp, ra 等等，这些信息可以用来进行栈回溯。</p><p>整个过程差不多如下</p><ol><li>根据当前 PC 指针值，遍历 .eh_frame ，找到对应的 FDE，然后计算便宜</li><li>根据 CFA (Canonical Frame Address) 计算出当前栈帧的地址（比如 rsp+8），然后计算出通用寄存器地址和返回地址在栈中的位置</li><li>比如这里一个通用寄存器的地址是 rsp-16</li><li>返回地址 ra 的地址是 rsp-8</li><li>然后根据 ra 值重复以上部分，就可以进行栈回溯</li></ol><p>当然这里还有很多工程的部分要去做，比如你需要走 auxv 去拿到进程加载后的 ELF，你需要去遍历符号表之类的东西（XD</p><p>现在有一些成套的基础设施可以用，列一下仅供参考</p><ol><li>GCC 自带的宏， __buildin_return_address,</li><li>libunwind</li></ol><h2 id="总结下"><a href="#总结下" class="headerlink" title="总结下"></a>总结下</h2><p>实际上这个工作还有很多的内容要去做，比如你通过 FFI 调用 so 后，你直接进行 native 的栈回溯得到的结果是这样</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x7f641a21aea0 : PQsendQuery+0x0/0x10 [/usr/lib/libpq.so.5.15]</span><br><span class="line">0x7f641ba874f6 [/usr/lib/libffi.so.8.1.2+0x74f6/0xb000]</span><br></pre></td></tr></table></figure><p>如果你想拿到 FFI 另外一侧的信息，那又是一翻额外的工作量（比如 Python）</p><p>以及 unwind 下还有很多噩梦级别的 case 要去处理，比如 PIE，比如 strip 信息后的二进制。如果想用 eBPF 重写 libunwind 的话，我觉得跳楼可能更快一些（不是</p><p>所以遇到问题的时候，可能优先考虑编译一些带着埋点的二进制文件。有可能你搞 print 大法都比 unwind 更好用（XD</p><p>差不多这样</p><p>最后，推荐一个雄文</p><p><a href="https://maskray.me/blog/2020-11-08-stack-unwinding">https://maskray.me/blog/2020-11-08-stack-unwinding</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;随手记录一些关于用户态栈回溯（Unwind）的一些杂记和想法。&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://www.manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://www.manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/Linux/"/>
    
    
    <category term="编程" scheme="https://www.manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://www.manjusaka.blog/tags/Linux/"/>
    
    <category term="笔记" scheme="https://www.manjusaka.blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="水文" scheme="https://www.manjusaka.blog/tags/%E6%B0%B4%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>子进程退出后，父进程有可能会收不到信号吗？</title>
    <link href="https://www.manjusaka.blog/posts/2023/08/10/is-it-possible-to-lose-the-signal-in-linux/"/>
    <id>https://www.manjusaka.blog/posts/2023/08/10/is-it-possible-to-lose-the-signal-in-linux/</id>
    <published>2023-08-10T14:09:00.000Z</published>
    <updated>2024-05-19T19:06:04.920Z</updated>
    
    <content type="html"><![CDATA[<p>最近工作强度有点大，写篇 Linux 相关的水文放松下</p><span id="more"></span><p>这个问题实际上是来源于在群里和人的一个讨论。一个基本常识是，子进程退出后，父进程会收到 <code>SIGCHLD</code> 信号，然后父进程可以通过 <code>wait</code> 或者 <code>waitpid</code> 等系统调用来获取子进程的退出状态。那么，子进程退出后，父进程有可能会收不到信号吗？答案毫无疑问是 yes 的</p><p>本文就来聊个其中一个比较好理解的场景 BTW 本文代码都基于最新分支的 Linux 源码</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="先来看一段代码"><a href="#先来看一段代码" class="headerlink" title="先来看一段代码"></a>先来看一段代码</h3><p>Fuck，哦不，Shut up，我们先来看一段代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line">count = <span class="number">20</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(os.getpid())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sigc_handler</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="keyword">global</span> result</span><br><span class="line">    result+=<span class="number">1</span></span><br><span class="line">    os.waitpid(-<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sig_int</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">abc</span>():</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">        <span class="keyword">if</span> os.fork()==<span class="number">0</span>:</span><br><span class="line">            time.sleep(<span class="number">15</span>)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br><span class="line">signal.signal(signal.SIGCHLD, sigc_handler)</span><br><span class="line"></span><br><span class="line">abc()</span><br></pre></td></tr></table></figure><p>小学生级别的代码，那么这段代码我们预期是什么？很简单嘛对嘛，最后 result 和 count 相等。那么我们来看一下这段代码的执行结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@kernel-dev-1:~/demo-script# python3 fork-demo.py </span><br><span class="line">33774</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">10</span><br></pre></td></tr></table></figure><p>emmmm？？？？，然后我们发现机器上也出现了 Z 进程</p><p><img src="https://github.com/Zheaoli/zheaoli.github.io/assets/7054676/d399f99a-9a69-4631-9800-8c8f4fe69e36" alt="Z进程"></p><p>为啥捏？这一切都是为啥捏</p><p>要聊清楚这个问题，就得从两方面入手</p><ol><li>进程退出后，内核里做了什么</li><li>信号是怎么处理的</li></ol><p>那就继续聊</p><h3 id="进程退出后，内核里做了什么"><a href="#进程退出后，内核里做了什么" class="headerlink" title="进程退出后，内核里做了什么"></a>进程退出后，内核里做了什么</h3><p>进程退出后，内核核心的一个函数调用是 do_exit, 位于 <code>/kernel/exit.c</code>，看一下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __noreturn <span class="title function_">do_exit</span><span class="params">(<span class="type">long</span> code)</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">exit_signals(tsk);  <span class="comment">/* sets PF_EXITING */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* sync mm&#x27;s RSS info before statistics gathering */</span></span><br><span class="line"><span class="keyword">if</span> (tsk-&gt;mm)</span><br><span class="line">sync_mm_rss(tsk-&gt;mm);</span><br><span class="line">acct_update_integrals(tsk);</span><br><span class="line">group_dead = atomic_dec_and_test(&amp;tsk-&gt;signal-&gt;live);</span><br><span class="line"><span class="keyword">if</span> (group_dead) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If the last thread of global init has exited, panic</span></span><br><span class="line"><span class="comment"> * immediately to get a useable coredump.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(is_global_init(tsk)))</span><br><span class="line">panic(<span class="string">&quot;Attempted to kill init! exitcode=0x%08x\n&quot;</span>,</span><br><span class="line">tsk-&gt;signal-&gt;group_exit_code ?: (<span class="type">int</span>)code);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (tsk-&gt;mm)</span><br><span class="line">setmax_mm_hiwater_rss(&amp;tsk-&gt;signal-&gt;maxrss, tsk-&gt;mm);</span><br><span class="line">&#125;</span><br><span class="line">acct_collect(code, group_dead);</span><br><span class="line"><span class="keyword">if</span> (group_dead)</span><br><span class="line">tty_audit_exit();</span><br><span class="line">audit_free(tsk);</span><br><span class="line"></span><br><span class="line">tsk-&gt;exit_code = code;</span><br><span class="line">taskstats_exit(tsk, group_dead);</span><br><span class="line"></span><br><span class="line">exit_mm();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (group_dead)</span><br><span class="line">acct_process();</span><br><span class="line">trace_sched_process_exit(tsk);</span><br><span class="line"></span><br><span class="line">exit_sem(tsk);</span><br><span class="line">exit_shm(tsk);</span><br><span class="line">exit_files(tsk);</span><br><span class="line">exit_fs(tsk);</span><br><span class="line"><span class="keyword">if</span> (group_dead)</span><br><span class="line">disassociate_ctty(<span class="number">1</span>);</span><br><span class="line">exit_task_namespaces(tsk);</span><br><span class="line">exit_task_work(tsk);</span><br><span class="line">exit_thread(tsk);</span><br><span class="line">    exit_notify(tsk, group_dead);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码其实看着很轻松，基本上看调用函数名就能知道在干啥，比如 <code>exit_fs</code> 卸载文件系统啊，<code>exit_files</code> 清理关联文件啊，<code>exit_notify</code> 进行 reap 之类的操作啊，然后我们能一眼到一个函数 <code>exit_signals</code>，这个函数是干啥的呢？看一下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">exit_signals</span><span class="params">(<span class="keyword">struct</span> task_struct *tsk)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> group_stop = <span class="number">0</span>;</span><br><span class="line"><span class="type">sigset_t</span> unblocked;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @tsk is about to have PF_EXITING set - lock out users which</span></span><br><span class="line"><span class="comment"> * expect stable threadgroup.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">cgroup_threadgroup_change_begin(tsk);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (thread_group_empty(tsk) || (tsk-&gt;signal-&gt;flags &amp; SIGNAL_GROUP_EXIT)) &#123;</span><br><span class="line">sched_mm_cid_exit_signals(tsk);</span><br><span class="line">tsk-&gt;flags |= PF_EXITING;</span><br><span class="line">cgroup_threadgroup_change_end(tsk);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">spin_lock_irq(&amp;tsk-&gt;sighand-&gt;siglock);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * From now this task is not visible for group-wide signals,</span></span><br><span class="line"><span class="comment"> * see wants_signal(), do_signal_stop().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">sched_mm_cid_exit_signals(tsk);</span><br><span class="line">tsk-&gt;flags |= PF_EXITING;</span><br><span class="line"></span><br><span class="line">cgroup_threadgroup_change_end(tsk);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!task_sigpending(tsk))</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">unblocked = tsk-&gt;blocked;</span><br><span class="line">signotset(&amp;unblocked);</span><br><span class="line">retarget_shared_pending(tsk, &amp;unblocked);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (unlikely(tsk-&gt;jobctl &amp; JOBCTL_STOP_PENDING) &amp;&amp;</span><br><span class="line">    task_participate_group_stop(tsk))</span><br><span class="line">group_stop = CLD_STOPPED;</span><br><span class="line">out:</span><br><span class="line">spin_unlock_irq(&amp;tsk-&gt;sighand-&gt;siglock);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If group stop has completed, deliver the notification.  This</span></span><br><span class="line"><span class="comment"> * should always go to the real parent of the group leader.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(group_stop)) &#123;</span><br><span class="line">read_lock(&amp;tasklist_lock);</span><br><span class="line">do_notify_parent_cldstop(tsk, <span class="literal">false</span>, group_stop);</span><br><span class="line">read_unlock(&amp;tasklist_lock);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实前面都是一些准备操作，比如加锁准备操作，cgroup 的前置操作啊，在这些完成后，<code>do_notify_parent_cldstop</code> 将是我们最终执行信号发送的地方，看一下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">do_notify_parent_cldstop</span><span class="params">(<span class="keyword">struct</span> task_struct *tsk,</span></span><br><span class="line"><span class="params">     <span class="type">bool</span> for_ptracer, <span class="type">int</span> why)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kernel_siginfo</span> <span class="title">info</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> flags;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">parent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sighand_struct</span> *<span class="title">sighand</span>;</span></span><br><span class="line">u64 utime, stime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (for_ptracer) &#123;</span><br><span class="line">parent = tsk-&gt;parent;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tsk = tsk-&gt;group_leader;</span><br><span class="line">parent = tsk-&gt;real_parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clear_siginfo(&amp;info);</span><br><span class="line">info.si_signo = SIGCHLD;</span><br><span class="line">info.si_errno = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * see comment in do_notify_parent() about the following 4 lines</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">rcu_read_lock();</span><br><span class="line">info.si_pid = task_pid_nr_ns(tsk, task_active_pid_ns(parent));</span><br><span class="line">info.si_uid = from_kuid_munged(task_cred_xxx(parent, user_ns), task_uid(tsk));</span><br><span class="line">rcu_read_unlock();</span><br><span class="line"></span><br><span class="line">task_cputime(tsk, &amp;utime, &amp;stime);</span><br><span class="line">info.si_utime = <span class="type">nsec_to_clock_t</span>(utime);</span><br><span class="line">info.si_stime = <span class="type">nsec_to_clock_t</span>(stime);</span><br><span class="line"></span><br><span class="line"> info.si_code = why;</span><br><span class="line"> <span class="keyword">switch</span> (why) &#123;</span><br><span class="line"> <span class="keyword">case</span> CLD_CONTINUED:</span><br><span class="line"> info.si_status = SIGCONT;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> CLD_STOPPED:</span><br><span class="line"> info.si_status = tsk-&gt;signal-&gt;group_exit_code &amp; <span class="number">0x7f</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> CLD_TRAPPED:</span><br><span class="line"> info.si_status = tsk-&gt;exit_code &amp; <span class="number">0x7f</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">default</span>:</span><br><span class="line"> BUG();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">sighand = parent-&gt;sighand;</span><br><span class="line">spin_lock_irqsave(&amp;sighand-&gt;siglock, flags);</span><br><span class="line"><span class="keyword">if</span> (sighand-&gt;action[SIGCHLD<span class="number">-1</span>].sa.sa_handler != SIG_IGN &amp;&amp;</span><br><span class="line">    !(sighand-&gt;action[SIGCHLD<span class="number">-1</span>].sa.sa_flags &amp; SA_NOCLDSTOP))</span><br><span class="line">send_signal_locked(SIGCHLD, &amp;info, parent, PIDTYPE_TGID);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Even if SIGCHLD is not generated, we must wake up wait4 calls.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">__wake_up_parent(tsk, parent);</span><br><span class="line">spin_unlock_irqrestore(&amp;sighand-&gt;siglock, flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数稍晚有点长，我们依次来解析下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (for_ptracer) &#123;</span><br><span class="line">parent = tsk-&gt;parent;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tsk = tsk-&gt;group_leader;</span><br><span class="line">parent = tsk-&gt;real_parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 task_struct 的定义，查找父进程，准备下面的操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clear_siginfo(&amp;info);</span><br><span class="line">info.si_signo = SIGCHLD;</span><br><span class="line">info.si_errno = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>设置 info 中的信号为 SIGCHLD</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (sighand-&gt;action[SIGCHLD<span class="number">-1</span>].sa.sa_handler != SIG_IGN &amp;&amp;</span><br><span class="line">    !(sighand-&gt;action[SIGCHLD<span class="number">-1</span>].sa.sa_flags &amp; SA_NOCLDSTOP))</span><br><span class="line">send_signal_locked(SIGCHLD, &amp;info, parent, PIDTYPE_TGID);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Even if SIGCHLD is not generated, we must wake up wait4 calls.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">__wake_up_parent(tsk, parent);</span><br><span class="line">spin_unlock_irqrestore(&amp;sighand-&gt;siglock, flags);</span><br></pre></td></tr></table></figure><p>发送信号，然后唤醒父进程，最后释放锁。</p><p>现在我们差不多搞清楚了在进程退出时，内核怎么发信号的。</p><p>但是一个问题还是没解决，为什么在我们的 case 里有信号没拿到？</p><p>那么接着聊</p><h3 id="信号是怎么处理的"><a href="#信号是怎么处理的" class="headerlink" title="信号是怎么处理的"></a>信号是怎么处理的</h3><p>花开两朵，各表一支，我们上文看到，最后我们在进程回收的时候，调用 <code>send_signal_locked</code> 发送信号。在继续聊这个问题之前，我们需要来了解一些简单的 Linux 信号的知识</p><p>在 Linux 中，Linux 将进程分为了 real-time 和 standard 信号。后者通常又有一个别名叫作不可靠信号。通常来讲，信号值小于 SIGTMIN 的为不可靠信号，信号值大于 SIGTMIN 的为 RT 信号。Linux 对于 RT 信号的特性有如下描述</p><blockquote><ol><li>Multiple instances of real-time signals can be queued.  By contrast, if multiple instances of a standard signal are delivered while that signal is currently blocked, then only one instance is queued.</li><li>If the signal is sent using sigqueue(3), an accompanying value (either an integer or a pointer) can be sent with the signal. If the receiving process establishes a handler for this signal using the SA_SIGINFO flag to sigaction(2), then it can obtain this data via the si_value field of the siginfo_t structure passed as the second argument to the handler.  Furthermore, the si_pid and si_uid fields of this structure can be used to obtain the PID and real user ID of the process sending the signal.</li><li>Real-time signals are delivered in a guaranteed order. Multiple real-time signals of the same type are delivered in the order they were sent.  If different real-time signals are sent to a process, they are delivered starting with the lowest-numbered signal.  (I.e., low-numbered signals have highest priority.)  By contrast, if multiple standard signals are pending for a process, the order in which they are delivered is unspecified.</li></ol></blockquote><p>简单来说，RT 信号是可靠且有序的，在内核中，task 的解构包含了两个关键结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigpending</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">list</span>;</span></span><br><span class="line"><span class="type">sigset_t</span> signal;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigqueue</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">list</span>;</span></span><br><span class="line"><span class="type">int</span> flags;</span><br><span class="line"><span class="type">kernel_siginfo_t</span> info;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ucounts</span> *<span class="title">ucounts</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>很明显，这两个结构体是内存中的链表，sigpending 中的 sigset_t signal 是个 64位整数，每个结构体占据一位，标注是否有信号触发。</p><p>我们来看下=<code>send_signal_locked</code> 的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">send_signal_locked</span><span class="params">(<span class="type">int</span> sig, <span class="keyword">struct</span> kernel_siginfo *info,</span></span><br><span class="line"><span class="params">       <span class="keyword">struct</span> task_struct *t, <span class="keyword">enum</span> pid_type type)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* Should SIGKILL or SIGSTOP be received by a pid namespace init? */</span></span><br><span class="line"><span class="type">bool</span> force = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (info == SEND_SIG_NOINFO) &#123;</span><br><span class="line"><span class="comment">/* Force if sent from an ancestor pid namespace */</span></span><br><span class="line">force = !task_pid_nr_ns(current, task_active_pid_ns(t));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (info == SEND_SIG_PRIV) &#123;</span><br><span class="line"><span class="comment">/* Don&#x27;t ignore kernel generated signals */</span></span><br><span class="line">force = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (has_si_pid_and_uid(info)) &#123;</span><br><span class="line"><span class="comment">/* SIGKILL and SIGSTOP is special or has ids */</span></span><br><span class="line"><span class="keyword">struct</span> user_namespace *t_user_ns;</span><br><span class="line"></span><br><span class="line">rcu_read_lock();</span><br><span class="line">t_user_ns = task_cred_xxx(t, user_ns);</span><br><span class="line"><span class="keyword">if</span> (current_user_ns() != t_user_ns) &#123;</span><br><span class="line"><span class="type">kuid_t</span> uid = make_kuid(current_user_ns(), info-&gt;si_uid);</span><br><span class="line">info-&gt;si_uid = from_kuid_munged(t_user_ns, uid);</span><br><span class="line">&#125;</span><br><span class="line">rcu_read_unlock();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* A kernel generated signal? */</span></span><br><span class="line">force = (info-&gt;si_code == SI_KERNEL);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* From an ancestor pid namespace? */</span></span><br><span class="line"><span class="keyword">if</span> (!task_pid_nr_ns(current, task_active_pid_ns(t))) &#123;</span><br><span class="line">info-&gt;si_pid = <span class="number">0</span>;</span><br><span class="line">force = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> __send_signal_locked(sig, info, t, type, force);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面又是一堆准备操作，我们直接把目光转向 <code>__send_signal_locked</code> 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> __send_signal_locked(<span class="type">int</span> sig, <span class="keyword">struct</span> kernel_siginfo *info,</span><br><span class="line"><span class="keyword">struct</span> task_struct *t, <span class="keyword">enum</span> pid_type type, <span class="type">bool</span> force)</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigpending</span> *<span class="title">pending</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigqueue</span> *<span class="title">q</span>;</span></span><br><span class="line"><span class="type">int</span> override_rlimit;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>, result;</span><br><span class="line"></span><br><span class="line">lockdep_assert_held(&amp;t-&gt;sighand-&gt;siglock);</span><br><span class="line"></span><br><span class="line">result = TRACE_SIGNAL_IGNORED;</span><br><span class="line"><span class="keyword">if</span> (!prepare_signal(sig, t, force))</span><br><span class="line"><span class="keyword">goto</span> ret;</span><br><span class="line"></span><br><span class="line">pending = (type != PIDTYPE_PID) ? &amp;t-&gt;signal-&gt;shared_pending : &amp;t-&gt;pending;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Short-circuit ignored signals and support queuing</span></span><br><span class="line"><span class="comment"> * exactly one non-rt signal, so that we can get more</span></span><br><span class="line"><span class="comment"> * detailed information about the cause of the signal.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">result = TRACE_SIGNAL_ALREADY_PENDING;</span><br><span class="line"><span class="keyword">if</span> (legacy_queue(pending, sig))</span><br><span class="line"><span class="keyword">goto</span> ret;</span><br><span class="line"></span><br><span class="line">result = TRACE_SIGNAL_DELIVERED;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Skip useless siginfo allocation for SIGKILL and kernel threads.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> ((sig == SIGKILL) || (t-&gt;flags &amp; PF_KTHREAD))</span><br><span class="line"><span class="keyword">goto</span> out_set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Real-time signals must be queued if sent by sigqueue, or</span></span><br><span class="line"><span class="comment"> * some other real-time mechanism.  It is implementation</span></span><br><span class="line"><span class="comment"> * defined whether kill() does so.  We attempt to do so, on</span></span><br><span class="line"><span class="comment"> * the principle of least surprise, but since kill is not</span></span><br><span class="line"><span class="comment"> * allowed to fail with EAGAIN when low on memory we just</span></span><br><span class="line"><span class="comment"> * make sure at least one signal gets delivered and don&#x27;t</span></span><br><span class="line"><span class="comment"> * pass on the info struct.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (sig &lt; SIGRTMIN)</span><br><span class="line">override_rlimit = (is_si_special(info) || info-&gt;si_code &gt;= <span class="number">0</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">override_rlimit = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">q = __sigqueue_alloc(sig, t, GFP_ATOMIC, override_rlimit, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (q) &#123;</span><br><span class="line">list_add_tail(&amp;q-&gt;<span class="built_in">list</span>, &amp;pending-&gt;<span class="built_in">list</span>);</span><br><span class="line"><span class="keyword">switch</span> ((<span class="type">unsigned</span> <span class="type">long</span>) info) &#123;</span><br><span class="line"><span class="keyword">case</span> (<span class="type">unsigned</span> <span class="type">long</span>) SEND_SIG_NOINFO:</span><br><span class="line">clear_siginfo(&amp;q-&gt;info);</span><br><span class="line">q-&gt;info.si_signo = sig;</span><br><span class="line">q-&gt;info.si_errno = <span class="number">0</span>;</span><br><span class="line">q-&gt;info.si_code = SI_USER;</span><br><span class="line">q-&gt;info.si_pid = task_tgid_nr_ns(current,</span><br><span class="line">task_active_pid_ns(t));</span><br><span class="line">rcu_read_lock();</span><br><span class="line">q-&gt;info.si_uid =</span><br><span class="line">from_kuid_munged(task_cred_xxx(t, user_ns),</span><br><span class="line"> current_uid());</span><br><span class="line">rcu_read_unlock();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> (<span class="type">unsigned</span> <span class="type">long</span>) SEND_SIG_PRIV:</span><br><span class="line">clear_siginfo(&amp;q-&gt;info);</span><br><span class="line">q-&gt;info.si_signo = sig;</span><br><span class="line">q-&gt;info.si_errno = <span class="number">0</span>;</span><br><span class="line">q-&gt;info.si_code = SI_KERNEL;</span><br><span class="line">q-&gt;info.si_pid = <span class="number">0</span>;</span><br><span class="line">q-&gt;info.si_uid = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">copy_siginfo(&amp;q-&gt;info, info);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!is_si_special(info) &amp;&amp;</span><br><span class="line">   sig &gt;= SIGRTMIN &amp;&amp; info-&gt;si_code != SI_USER) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Queue overflow, abort.  We may abort if the</span></span><br><span class="line"><span class="comment"> * signal was rt and sent by user using something</span></span><br><span class="line"><span class="comment"> * other than kill().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">result = TRACE_SIGNAL_OVERFLOW_FAIL;</span><br><span class="line">ret = -EAGAIN;</span><br><span class="line"><span class="keyword">goto</span> ret;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This is a silent loss of information.  We still</span></span><br><span class="line"><span class="comment"> * send the signal, but the *info bits are lost.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">result = TRACE_SIGNAL_LOSE_INFO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">out_set:</span><br><span class="line">signalfd_notify(t, sig);</span><br><span class="line">sigaddset(&amp;pending-&gt;signal, sig);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Let multiprocess signals appear after on-going forks */</span></span><br><span class="line"><span class="keyword">if</span> (type &gt; PIDTYPE_TGID) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">multiprocess_signals</span> *<span class="title">delayed</span>;</span></span><br><span class="line">hlist_for_each_entry(delayed, &amp;t-&gt;signal-&gt;multiprocess, node) &#123;</span><br><span class="line"><span class="type">sigset_t</span> *signal = &amp;delayed-&gt;signal;</span><br><span class="line"><span class="comment">/* Can&#x27;t queue both a stop and a continue signal */</span></span><br><span class="line"><span class="keyword">if</span> (sig == SIGCONT)</span><br><span class="line">sigdelsetmask(signal, SIG_KERNEL_STOP_MASK);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sig_kernel_stop(sig))</span><br><span class="line">sigdelset(signal, SIGCONT);</span><br><span class="line">sigaddset(signal, sig);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">complete_signal(sig, t, type);</span><br><span class="line">ret:</span><br><span class="line">trace_signal_generate(sig, info, t, type != PIDTYPE_PID, result);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们核心关注这样一些地方</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (legacy_queue(pending, sig))</span><br><span class="line"><span class="keyword">goto</span> ret;</span><br></pre></td></tr></table></figure><p>这里是判断当前发送的信号，是否已经在 sigpending 中的 sigset_t signal 中注册，如果注册了，就直接进入返回流程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="title function_">legacy_queue</span><span class="params">(<span class="keyword">struct</span> sigpending *signals, <span class="type">int</span> sig)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (sig &lt; SIGRTMIN) &amp;&amp; sigismember(&amp;signals-&gt;signal, sig);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯这段逻辑就很清晰了，继续回到 <code>__send_signal_locked</code> 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (sig &lt; SIGRTMIN)</span><br><span class="line">override_rlimit = (is_si_special(info) || info-&gt;si_code &gt;= <span class="number">0</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">override_rlimit = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">q = __sigqueue_alloc(sig, t, GFP_ATOMIC, override_rlimit, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (q) &#123;</span><br><span class="line">       ...</span><br></pre></td></tr></table></figure><p>这里判断是否需要强制超出系统 SIGNAL QUEUE 的长度限制，然后调用 <code>__sigqueue_alloc</code> 函数，这个函数的作用是分配一个 sigqueue 结构体，然后将其加入到 sigpending 的链表中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">sigqueue</span> *</span></span><br><span class="line"><span class="class">__<span class="title">sigqueue_alloc</span>(<span class="title">int</span> <span class="title">sig</span>, <span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">t</span>, <span class="title">gfp_t</span> <span class="title">gfp_flags</span>,</span></span><br><span class="line"><span class="class"> <span class="title">int</span> <span class="title">override_rlimit</span>, <span class="title">const</span> <span class="title">unsigned</span> <span class="title">int</span> <span class="title">sigqueue_flags</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigqueue</span> *<span class="title">q</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ucounts</span> *<span class="title">ucounts</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">long</span> sigpending;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Protect access to @t credentials. This can go away when all</span></span><br><span class="line"><span class="comment"> * callers hold rcu read lock.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * NOTE! A pending signal will hold on to the user refcount,</span></span><br><span class="line"><span class="comment"> * and we get/put the refcount only when the sigpending count</span></span><br><span class="line"><span class="comment"> * changes from/to zero.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">rcu_read_lock();</span><br><span class="line">ucounts = task_ucounts(t);</span><br><span class="line">sigpending = inc_rlimit_get_ucounts(ucounts, UCOUNT_RLIMIT_SIGPENDING);</span><br><span class="line">rcu_read_unlock();</span><br><span class="line"><span class="keyword">if</span> (!sigpending)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (override_rlimit || likely(sigpending &lt;= task_rlimit(t, RLIMIT_SIGPENDING))) &#123;</span><br><span class="line">q = kmem_cache_alloc(sigqueue_cachep, gfp_flags);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">print_dropped_signal(sig);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (unlikely(q == <span class="literal">NULL</span>)) &#123;</span><br><span class="line">dec_rlimit_put_ucounts(ucounts, UCOUNT_RLIMIT_SIGPENDING);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">INIT_LIST_HEAD(&amp;q-&gt;<span class="built_in">list</span>);</span><br><span class="line">q-&gt;flags = sigqueue_flags;</span><br><span class="line">q-&gt;ucounts = ucounts;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的逻辑就很清晰了，分配内存，返回指针。这里系统中 RLIMIT_SIGPENDING 的配置决定了我们 pending 队列的长度。各个发行版不同</p><p>差不多这样</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>回到我们最开始的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line">count = <span class="number">20</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(os.getpid())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sigc_handler</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="keyword">global</span> result</span><br><span class="line">    result+=<span class="number">1</span></span><br><span class="line">    os.waitpid(-<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sig_int</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">abc</span>():</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">        <span class="keyword">if</span> os.fork()==<span class="number">0</span>:</span><br><span class="line">            time.sleep(<span class="number">15</span>)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br><span class="line">signal.signal(signal.SIGCHLD, sigc_handler)</span><br><span class="line"></span><br><span class="line">abc()</span><br></pre></td></tr></table></figure><p>这段代码，在我们的回调函数中存在 block 行为，导致后续进程在 SIGCHLD 信号发送后，在 <code>legacy_queue</code> 处判断当前队列有同样的非可靠信号未被处理完，于是没有完成后续的信号处理流程</p><p>嗯，差不多就这样。简单写篇入门水文，希望大家看的开心</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近工作强度有点大，写篇 Linux 相关的水文放松下&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://www.manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://www.manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/Linux/"/>
    
    
    <category term="编程" scheme="https://www.manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://www.manjusaka.blog/tags/Linux/"/>
    
    <category term="笔记" scheme="https://www.manjusaka.blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="水文" scheme="https://www.manjusaka.blog/tags/%E6%B0%B4%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>聊聊公益和助学</title>
    <link href="https://www.manjusaka.blog/posts/2023/06/25/love-and-hope-is-all-we-need/"/>
    <id>https://www.manjusaka.blog/posts/2023/06/25/love-and-hope-is-all-we-need/</id>
    <published>2023-06-25T18:00:00.000Z</published>
    <updated>2024-05-19T19:06:04.920Z</updated>
    
    <content type="html"><![CDATA[<p>没什么特别的原因，就突然想来聊聊公益和助学。对了，感谢橘子酱同学深夜帮我做的本篇博客的 cover，我自己对设计实际上一窍不通。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先，今天毫无疑问是个 big day，接到了一个超好的消息。我资助的来自大凉山的一位女生，在父母都大部分失去劳动力，国家级贫困县的极度贫困家庭的情况下，在高考中拿下了550的成绩。超出一本线30分，算上凉山地区的加分，她应该可以去一个合格的公立学校接受完整的高等教育了。</p><p>当时接到消息的时候，我简直开心炸裂，我和女朋友都兴奋的跳了起来。原因很简单。她这一路走来太过不容易。</p><p>我是从她高一下学期开始资助她的，那时她的成绩仅仅排在年级中游，本科很悬。在后面的只言片语以及机构每学期的回访中。我都能看到她的迷茫，与坚持。她一步步的，一点点的努力着。然后在今天，终于圆梦。虽然这个梦对于很多网友来说微不足道。</p><p>我在推特和朋友圈分享这对我来说也是意义重大的喜讯后。迎来了很多的懂王。发表了一些典型的爹味和傻逼言论，“她研究生和博士你也帮吗”，“过去的贫困让她有心理疾病，没治愈之前没法说改变人生”，“出来还是当韭菜的命”</p><p>分开聊聊吧</p><p>“她研究生和博士你也帮吗”，对啊，我帮。咋了？</p><p>“过去的贫困让她有心理疾病，没治愈之前没法说改变人生”，她比你想的坚强，也比你想的阳光。三年里，我见证了她的蜕变于进步。她从未想过放弃自己，一步步的走了出来。我从未质疑过她面对未来的勇气，我相信包括我在内的所有人亦没有资格去质疑她面对未来的勇气与坚强</p><p>“出来还是当韭菜的命”，我自己也算是大凉山出来的（攀枝花），小时候家对面山上都能看到吸毒死亡的人，更别说凉山了，吸毒贩毒到处都是。上不了高中是常态中的常态。我资助的女孩子，父母都失去劳动能力，家里极度贫困。但是一步步的上了当地最好的高中，又一步步的超出一本线这么多（算上加分，超一本线能40），她的命运已经改变了。今后的她即便在城市里996，当着你们高等人所谓的韭菜。过着你们高等人所看不上，所觉得淡然无味的生活。但是这种生活远比她之前过的生活要强出千百倍，她不用担心家门口是不是有吸毒的人，也不用担心自己是不是要十五六嫁人换彩礼。然后如果她愿意，找个丈夫，结婚，生子，相守平淡一生。你们所看不上的生活，是她梦寐以求的生活。</p><p>说实话，公益和助学的意义永远不在于说一步到位，让人飞黄腾达。而是一点点的，让更多经历苦难的人，能够脱离环境桎梏。</p><p>我从大学时期进入救援队做公益，到现在也有11年了。后续历经2013雅安，2017年北京等大型事件。而且捐款助学的话，从2017年开始进行捐助。到现在也快7年了。说实话，很难去具体的描述我做公益的动机。不过强行解释的话，那么其实大概能概括成这几点</p><ol><li>奥特曼叫我去做的</li><li>这件事很酷</li><li>想做的时候就做了</li></ol><p>能从上面看出来，其实我没有太强的目的性去做这件事。实际上这也是我所推荐的状态。我个人觉得如果具有太强的功利心是做不好这件事的。</p><p>而从16年后，我整体的公益主要以线上为主了（因为我实在没时间和体能跑现场了，除了17年北京还跑了一次现场），剩下的主要有以下几个方面了</p><ol><li>日常的献血（18年身体状况转弱之前，我基本保持了一年一到两次献血）</li><li>罕见病项目捐款</li><li>助学捐款</li><li>号召身边人去一起做公益</li></ol><p>这里我想先说说4。实际上这是一件非常非常非常重要的事。很多同学可能会发现，我自己很喜欢在推上和朋友圈里分享自己的公益日常。开心的，不开心的。我估计有不少人实际上会认为这什么鸟人，这么喜欢秀。实际上不然，我是想通过分享我做公益的细节与瞬间，能让更多的人去发现公益的乐趣。然后投入到这件事。实际上效果不错。从18年到现在，我至少号召了四位身边的朋友助学捐款，还有一位成为了公益组织的义工。是不是很酷！</p><p>然后回到公益资助本身。2的话，我实际上没有很挑选过公益机构。在腾讯公益或者支付宝上捐个三五百的就完事（当然累计也有一定数额了）。我自己投入精力比较多的部分，也是大家比较关注的部分还是在3，即助学捐款上。我认为这是一件非常意义的事，如本篇博客 cover 中所记录的。教育是最好的公益</p><p>通常来说，目前我觉得比较靠谱的渠道有两个，一个是鲲鹏公益计划，一个是壹个村小，前者在支付宝公益和微信公益上都能找到，我目前捐款了几次，差不多一次2000以内。这个项目是典型的一对一项目。定期会有学生情况更新。所以相对来说更有保障。而我自己一直很喜欢的团队是<a href="http://one-school.org/">壹个村小</a>，他们的微信公众号是 cunxiao4u。这个团队我觉得很特殊，主要在以下几点</p><ol><li>本身自己的运作不依赖向学生捐款的抽成，包括人员薪资在内的费用由额外定向捐助承担。比如你们从他们的<a href="http://one-school.org/news/newsshow.asp?new_id=109">壹个村小2022年终工作简报</a> 上能看到，他们自己的薪资总计在五十万左右，和面向学生的捐款分开。</li><li>对于学生的资助不会过他们的账户，而是直接由捐款人每学期打款到学生账户</li><li>随访做的很及时，能定期让捐款人看到学生的近况。同时他们也鼓励捐款人和学生直接接触，来鼓励帮助学生</li><li>他们有额外的项目，来负责被资助的学生如果出现捐款人断捐，学生突发疾病的情况。</li></ol><p>每个学生的资助金额以学期计算，差不多1000-3000不等。具体金额是根据学生具体情况计算出来，每学期都会更新与你同步</p><p>那么他们有没有缺点？有，非常大的缺点，超级大的缺点，我怨念深重的缺点！就是他们学生<strong>太太太太太难抢了</strong>。真的。。说起来就是一把泪。。每次抢学生都需要八点过起来。然后到点一刷秒没。属实是人麻了。</p><p>这些差不多是我自己关于助学公益的一些建议。那么回到做公益这件事本身，可能会有人问你有没有自我怀疑的时候，那毫无疑问，有啊，非常有，常见不仅限于</p><ol><li>被人质疑的时候（第一次遇到是做雅安地震的义卖的时候，有个人过来说你们做这些有什么用。然后很温暖的是一个广东口语的大叔操着粤普直接说“你这个傻逼衰仔管人家学生娃娃做什么，不买就滚”，然后买了我们一本书，给我们了一个大拇指）</li><li>比如你看到你的付出被人滥用的时候</li><li>比如你看到各种公益基金会贪污的新闻的时候</li><li>比如你看到有很多人需要帮助，你会有一种无力感。</li></ol><p>这些我都有过，但是我后面想通了，可能说看淡了</p><p>继续聊之前，我先给大家科普一个知识，首先我们定义超长心肺复苏是指时间大于半小时的心肺复苏。即便在现代高度发达的医学下，根据现有的数据,一般在两百例超长心肺复苏才能遇见一位能痊愈出院的患者。这个比例很低对吧？但是大家换个角度想，如果全球每年有2000万例超长心肺复苏，那么意味着会有10w名患者获得新生。数字又不小了对吧。如果说，我们放弃了这2000万次超长心肺复苏，那么意味着有10w条本应该能救回来的生命再次逝去。</p><p>公益和心肺复苏一样</p><p>有很多钱没法用到正途，没错</p><p>有很多人骗取同情心，没错</p><p>很多重男轻女家庭用姐姐出来博同情心，给弟弟赚钱，太他妈对了</p><p>各种公益组织贪污情况太严重了，fucking right</p><p>有太多的人需要帮，我们帮不过来，damn right</p><p>但是这些都不是我们不去做，和犹豫的理由</p><p>我一直坚信只要我们做的事足够多，那么就一定有足够多的人获取帮助</p><p>水坑里的鱼太多？我救不完，fucking right，but so what？这绝不是我一条都不救的理由</p><p>所以我希望我们还是能一点点的尽力帮助所需要帮助的人。这个世界足够操蛋，我们也没有办法改变这个世界，但是我们可以让这个世界多那么一丝色彩</p><p>最后一起复习一下艾特奥特曼的愿望</p><blockquote><p>優しさを失わないでくれ。弱い者を労り互いに助け合い。<br>どこの国の人とも友達になろうとする気持ちを失わないでくれ。<br>たとえその気持ちが何百回裏切られようとも。<br>それが私の最後の願いだ。<br>热忱之心不可泯灭。要体恤、帮助弱者。<br>与任何国家的人都能成为朋友，别失去这份热心，纵使它已被背叛了千百回。<br>这就是我最后的愿望。</p></blockquote><p>To love, to lose, to give without expectation</p><p>Yeah, 其实公益很简单的，不需要有那么多顾虑，也不需要有那么多成本，我们随手捐一点，帮一点，我们所有人的力量就能够一定帮到足够多的人。就如同超长 CPR 里那10w条被拯救的生命</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这个世界越来越操蛋，也越来越混沌了。这个时代是否如狄更斯所说“这是一个最好的时代，也是一个最坏的时代”，我对前半句抱有怀疑。</p><p>但是我依旧愿意去相信爱，光和奥特曼，人生苦短，总得做点什么，让这个 fucking ridiculous 的世界变得有那么彩色一点。</p><p>Love and Hope is all we need.</p>]]></content>
    
    
    <summary type="html">很多时候，帮助人不需要那么多理由</summary>
    
    
    
    <category term="人生" scheme="https://www.manjusaka.blog/categories/%E4%BA%BA%E7%94%9F/"/>
    
    <category term="杂记" scheme="https://www.manjusaka.blog/categories/%E4%BA%BA%E7%94%9F/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="人生" scheme="https://www.manjusaka.blog/tags/%E4%BA%BA%E7%94%9F/"/>
    
    <category term="杂记" scheme="https://www.manjusaka.blog/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>为什么奥特曼是我的信仰</title>
    <link href="https://www.manjusaka.blog/posts/2023/06/19/why-do-I-love-ultraman/"/>
    <id>https://www.manjusaka.blog/posts/2023/06/19/why-do-I-love-ultraman/</id>
    <published>2023-06-19T20:00:00.000Z</published>
    <updated>2024-05-19T19:06:04.920Z</updated>
    
    <content type="html"><![CDATA[<p>突然着想写一篇文章，聊聊我所信仰的奥特曼。ウルトラマン大好きだ</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>今年对于我来说其实是挺 tough 的一年，双相的病情反反复复。自残的行为也重新出现。特别是在今年3月之后，我某种意义上的心理防线一度被击穿。</p><p>熟悉我的朋友可能已经反应过来了。没错，3月24日，杰克奥特曼人间体乡秀树扮演者团时郎先生的离世，实际上给了我不小的打击。</p><p>我依旧还记得那天的情景。在一个朋友给我转发了日媒报道乡秀树先生3月22日离世的消息后，当时嘣的一声，我脑子里的弦仿佛断了一根。眼泪就不由自主的流了下来。我甚至一度都没有反应过来我在流泪这件事。直到我妹子发现了我的异常问我怎么了。我才反应过来，原来我在流泪。当天实际上我一度无法正常工作了（即便现在，我回想起来也有点泪目），后面算是勉强打起精神，给当天的工作收尾。</p><p>实际上这件事对我的影响贯穿到现在，导致我4月/5月情绪非常的波动。我曾经给我设置了几道心理的防线，其中一道是和奥特曼相关的，然后这道防线在当时被击穿了。</p><p>实际上团时郎先生的逝世应该是个导火索。早在去年5月份，我最喜欢的奥系列中的一位演员渡边裕之先生（盖亚奥特曼中石室指挥官，我认为特摄史上塑造的最成功的人物之一）在公寓里自杀的消息实际上也深深的刺痛了我。只是当时的我没想到，事隔一年后，我还会迎来另外一位人物的离世。</p><p>很多人可能会很疑惑，为什么我会如此喜欢奥特曼。</p><p>这里我要更正一点，我不是喜欢奥特曼，而是“奥特曼是我的信仰”，或者说，我信仰着奥特精神。</p><p>这样一个信仰的形成，其实要追溯到我的过往。</p><p>我之前在博客上分享过，我在2007年初遭到了同性的强奸。虽然在后续父母对我保护的很好。但是因为事件之初没有进行相应的心理干涉。实际上这件事的诱发的 PTSD 一直持续到了现在。而在初高中，即我人生13-18岁这五年三观的成型期，强奸事件带来的残缺感与孤独感一直伴随着我（我其实是个很怕社交的人，没想到吧）。同时，这样一份残缺感+我并不愿意和父母做太多的沟通，导致我这个时期的阴暗的一面非常严重。你可能能想到的暴戾，自残，嗜血（比如时常扣掉伤疤舔血）的一面都在我身上存在。可能和新闻上人物的区别在于当时的我没去实施。如果这样发展下去，可能现在你们就会在新闻上看到我了。</p><p>所幸，这个世界上真的存在奥特曼</p><p>在这五年的时间里，我时常在苦闷，烦恼，暴戾情绪严重的时候，逃课或请假，找个奶茶店或者网吧（是的，我去网吧不打游戏），点点吃得，然后坐着看一天奥特曼。</p><p>这样一天天过去吗，我心里曾经空掉的东西，被一点点填了回来。某种意义上来说，奥特曼，或者说奥特精神是构成了我这个人现在所表现出来的一切正面元素的基石。</p><p>可能有很多人会问，奥特精神，到底是什么？这里我引用来自艾斯奥特曼最终话的台词，应该就能做出很好的解释</p><blockquote><p>優しさを失わないでくれ。弱い者を労り互いに助け合い。<br>どこの国の人とも友達になろうとする気持ちを失わないでくれ。<br>たとえその気持ちが何百回裏切られようとも。<br>それが私の最後の願いだ。<br>热忱之心不可泯灭。要体恤、帮助弱者。<br>与任何国家的人都能成为朋友，别失去这份热心，纵使它已被背叛了千百回。<br>这就是我最后的愿望。</p></blockquote><p>贯穿奥特曼全系列的，就是这样一份热忱之心，一份坚守的精神，一份不屈不挠的意志。这份精神，也是我一直以来所追求的。</p><p>这里我推荐大家如果有兴趣可以去看一下下面两作</p><ol><li>盖亚奥特曼第39话 悲しみの沼/悲伤的沼泽</li><li>赛文奥特曼98/99 OVA</li></ol><p>我觉得如果大家能看完，实际上会对奥系列一直传达的希望，反战，和平，理解，爱有非常深刻的感触。</p><p>13-18岁，这人生很关键的五年，奥特曼陪伴了我。基本上塑造了我现在的很大一部分人格和认知（我现在依旧坚信着平行世界一定存在的奥特曼的Hhhhh）。也会实际上影响我做事的方式。想做什么坏事的时候，心里想想，这可能不奥特精神。在帮不帮人犹犹豫豫的时候，我想如果做了那么奥特曼一定会替我开心的。</p><p>我一个好友这样评论我的想法（大家别说我幼稚啊）：很多人只是会把你这些想法抽象为佛主，或者上帝。而你只是抽象成奥特曼而已。</p><p>Exactly！</p><p>之前有推特上有懂哥跳出来评价</p><p><img src="https://user-images.githubusercontent.com/7054676/170878363-111b42b2-4471-47d2-8551-0b9b3650493c.png" alt="懂哥"></p><p>没错，我就喜欢了，我就傻逼了，怎么了？</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>随便碎碎念了一下，算是让心里一些一直想说的话说了出来（好受了许多）</p><p>谨以此文，献给团时郎先生，献给渡边裕之先生，献给我所深爱并信仰着的奥特曼。</p><p>如果有人能认识历年的主演们，请替我给他们转达一句话：谢谢你们，谢谢你们塑造的奥特曼拯救了我</p><p>最后的最后：ウルトラマン大好きだ</p>]]></content>
    
    
    <summary type="html">優しさを失わないでくれ。弱い者を労り互いに助け合い。</summary>
    
    
    
    <category term="人生" scheme="https://www.manjusaka.blog/categories/%E4%BA%BA%E7%94%9F/"/>
    
    <category term="杂记" scheme="https://www.manjusaka.blog/categories/%E4%BA%BA%E7%94%9F/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="人生" scheme="https://www.manjusaka.blog/tags/%E4%BA%BA%E7%94%9F/"/>
    
    <category term="杂记" scheme="https://www.manjusaka.blog/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>家庭 Homelab 升级计划</title>
    <link href="https://www.manjusaka.blog/posts/2023/06/16/how-do-I-build-homelab/"/>
    <id>https://www.manjusaka.blog/posts/2023/06/16/how-do-I-build-homelab/</id>
    <published>2023-06-16T16:00:00.000Z</published>
    <updated>2024-05-19T19:06:04.920Z</updated>
    
    <content type="html"><![CDATA[<p>最近家庭升级 Homelab 差不多告一段落，来写篇文章记录下我的折腾过程</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>熟悉我的朋友都知道，我是个 SRE，所以吧，对于家里的网络环境质量要求非常高。一直以来，我家的网络环境都在不断的迭代，不过我的网络环境一直围绕三个方向迭代</p><ol><li>稳定性毫无疑问的是第一要素，网络炸了，我就没法工作了</li><li>需要有足够优秀的内网速度，因为我有一些 NAS 之类的服务，承担我流媒体的需求</li><li>需要有一个可靠网关，来根据 GEO 和规则对于不同的流量做处理。</li><li>我家 IoT，电脑等移动设备的数量非常多，那么需要热点有足够的性能来保证网络的质量</li></ol><p>那么围绕这个，从今年开始，我围绕 Homelab 做了一系列的演进</p><h3 id="阶段1-机柜与有线-Mesh"><a href="#阶段1-机柜与有线-Mesh" class="headerlink" title="阶段1: 机柜与有线 Mesh"></a>阶段1: 机柜与有线 Mesh</h3><p>在今年4月搬到新家后，借着要重新安排所有东西的机会，我重新构造了家里的网络</p><p>首先来讲，从全屋的无线热点上，我做了这样的演进</p><ol><li>引入了 TPLink 一个8口的千兆交换机，来扩展端口</li><li>引入了 TPLink XDR 6080 和我原本的 XDR 10280 来做有线 Mesh</li></ol><p>在经过这样的改造后，我家里的网络结构变成了这样的模式</p><ol><li>从光猫往下，一根线走向原本的小米 AX3600 作为家里 IoT 设备的联网端。另一根走向一个 Intel 6305+ 8GRAM 的 x86 机器。在 X86 机器上，我会根据 GEO 规则，对于不同的流量包做一些处理，同时会对 DNS 做 AD 过滤。</li><li>从 x86机器往下，那么接入 交换机+路由器 x3 成为家里的主干网。</li></ol><p>另外，今年六月，好友赠送了我一个 Intel 12代 i7 的满配 NUC ，我自己也采购了两台零刻的机器做为家里的 NUC 集群，上面跑一些 Kubernetes 之类的自己用来测试的服务。</p><p>整体效果如下</p><p><img src="https://i.imgur.com/42S0PH1.jpeg" alt="v1"></p><p>从上往下：</p><ol><li>NUC</li><li>交换机&amp;光猫</li><li>x86 网关 &amp; UPS</li><li>群晖 DS1821+</li></ol><p>但是在现有结构下，还存在一些问题</p><ol><li>TPLink 交换机易用性极差，要设置比如链路聚合之类的非常头疼</li><li>路由器非常不美观，</li><li>x86 网关一旦 crash，如果我需要恢复网络，那么只能物理跳线。</li></ol><p>基于这样一些逻辑，我考虑进行如下改造</p><ol><li>替换交换机</li><li>将无线路由有线 Mesh 的方案切换为 AC+AP 的方案</li><li>将 x86 网关作为旁路网关</li></ol><h3 id="阶段2-更大的机柜，更好的设备"><a href="#阶段2-更大的机柜，更好的设备" class="headerlink" title="阶段2: 更大的机柜，更好的设备"></a>阶段2: 更大的机柜，更好的设备</h3><p>基于上面的一些考虑，在经过多方面选择后，我选择 UBNT 作为我的接入设备</p><p>整体的理由如下：</p><ol><li>性能不错</li><li>易用性极强</li><li>整体的设备美观度极高</li></ol><p>所以最开始设备的选择如下</p><ol><li>UDM-Pro 作为主路由</li><li>USW-24-Pro-POE 作为交换机</li><li>U6-Mesh <em> 2 + U6-IW </em> 2 作为 AP</li></ol><p>然后整体的效果如下</p><p><img src="https://i.imgur.com/kXgbRQa.jpeg" alt="v2"></p><p>但是在使用几天后，我发现了新的问题：我对容量的预估严重不足！</p><p>实际上千兆交换机理论吞吐是 1Gbps，但是实际上来说，刨除协议开销，有效负荷的速率大概在 940Mbps 左右。而这一点实际上对我现在的一些使用场景是有所不足的。比如在 PC 端转码然后回传 NAS 之类的。</p><p>而我目前又没有 10Gbps 常态化的传输需求。经过慎重考虑后，我决定将家中局域网的上限提升至 2.5Gbps。这样能达成性能与易用性的平衡点</p><p>那么我的设备选择如下、</p><ol><li>主路路由替换至 UDM-SE</li><li>交换机替换至 USE-Enterprise-24-POE</li><li>AP 替换两个为 U6-Enterprise-IW</li></ol><p>整体效果如下</p><p><img src="https://i.imgur.com/zIOH0Cr.jpeg" alt="v3"></p><p>当然中间穿插的小插曲是，在升级 2000M/200M 宽带后，我将家里的光猫替换成猫棒直接在主路由上接入光纤</p><p>然后我在网络上划分了三个 vlan</p><ol><li>192.168.0.1/16 作为工作网段，其中网关会指向 x86 机器</li><li>10.0.0.1/16 为日常网段，确保 x86 机器挂了不会影响其余设备</li><li>172.28.0.1/16 为 IoT 网段，给家里的 IOT 设备使用</li><li>中间添加了防火墙策略，确保 IoT 网段无法访问工作网段和日常网段的设备</li></ol><p>最后整体的网速差不多是这样</p><p><img src="https://i.imgur.com/RDmbgjU.png" alt="内网"></p><p><img src="https://i.imgur.com/2uaxhtt.png" alt="公网"></p><p>整体的拓扑如下</p><p><img src="https://i.imgur.com/NdDUnS5.png" alt="拓扑1"></p><p><img src="https://i.imgur.com/Un04brM.png" alt="拓扑2"></p><p>差不多就是这样</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过改造，我相信这样的整体结构能够满足我使用很长时间。当然估计有很多人不理解为啥我租房还要这么折腾。我想除了职业习惯的原因以外，也还是想给自己的日常生活找点乐子。毕竟房子是租的，但是生活不是。</p>]]></content>
    
    
    <summary type="html">人生嘛，Homelab 图个乐子</summary>
    
    
    
    <category term="Homelab" scheme="https://www.manjusaka.blog/categories/Homelab/"/>
    
    
    <category term="Linux" scheme="https://www.manjusaka.blog/tags/Linux/"/>
    
    <category term="笔记" scheme="https://www.manjusaka.blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="水文" scheme="https://www.manjusaka.blog/tags/%E6%B0%B4%E6%96%87/"/>
    
    <category term="Homelab" scheme="https://www.manjusaka.blog/tags/Homelab/"/>
    
  </entry>
  
  <entry>
    <title>简单聊聊 IaC：Infrastructure as Code</title>
    <link href="https://www.manjusaka.blog/posts/2023/03/12/a-simple-introduction-about-iac/"/>
    <id>https://www.manjusaka.blog/posts/2023/03/12/a-simple-introduction-about-iac/</id>
    <published>2023-03-12T13:00:00.000Z</published>
    <updated>2024-05-19T19:06:04.916Z</updated>
    
    <content type="html"><![CDATA[<p>实际上 IaC 这个概念的出现已经很久了，所以写篇水文来简单聊聊 IaC 的过去，现在，和将来</p><span id="more"></span><h2 id="IaC-的过去"><a href="#IaC-的过去" class="headerlink" title="IaC 的过去"></a>IaC 的过去</h2><p>实际上 IaC 的历史其实足够悠久。首先来看一下 IaC 的核心的特征</p><ol><li>最终的产物是 machine readable 的的产物。可能是一份代码，也可能是一份配制文件</li><li>基于 machine readable 的产物，可以进一步依赖已有的 VCS 系统（SVN，Git）等做版本管理</li><li>基于 machine readable 的产物，可以进一步依赖已有的 CI/CD 系统（Jenkins，Travis CI）等做持续集成/持续交付</li><li>状态的一致性，或者称为幂等性。即理论上来讲，基于同样一份 Code，同一套参数构建出的产物，其最终的行为应该是一致的</li></ol><p>实际上通过 IaC 这样的一些核心特征，我们现在能明白 IaC 兴起的原因。IaC 实际上的兴起，大背景是在千禧年之后，互联网世界迭代的速度愈发的快速，这个时候传统的手工式的维护面临着几个问题</p><ol><li>交互式变更所引入的人的因素太大，导致了变更的不可控性</li><li>人工变更面对愈发快速的 Infra 迭代力有不逮</li><li>交互式的变更导致管控的难做，让版本控制之类的手段变为空谈</li></ol><p>在这样的时代背景下，大家都在追求用更技术，更优雅的手段来解决这些问题。于是，IaC 这个概念就出现了</p><p>如果说要将 IaC 分为几个阶段的话，那么我觉得可以分为以下几个阶段</p><ol><li>刀根火种阶段</li><li>现代化的 IaC</li></ol><p>如同前面所说，IaC 实际上是一个自发的驱动，在面对不确定的时候，我们选择用代码来尽可能的消泯掉不确定性（实际上这个原则一直贯穿到现在）</p><p>那么在最早期，人们选择用最基础的代码的形式，来完成 IaC 的工作。其特征是对于之前的各种交互式的手段的精确化，程序化的描述。人们可能会选择直接用 bash 来解决这一切（祖传的来路不明的 bash 脚本.jpg），也可能会基于 Python Fabric 这样的框架进行简单的封装来完成所需的程序化描述的工作。</p><p>但是我们回头去看这一阶段，我们能直观的感受到一些缺陷</p><ol><li>代码复用性较差</li><li>各家都有一套祖传的 IaC 基建，没有统一的行业标准，导致新人入门门槛较高</li></ol><p>所以在面对这样一套的问题的时候。更现代化的 IaC 设施应运而生。其中典型的一些产物是</p><ol><li>Ansible</li><li>Chef</li><li>Puppet</li></ol><p>实际上这些工具，可能设计上各有所取舍（比如 Pull/Push 模型的取舍），但是其核心的特征不会变化</p><ol><li>框架内部提供了常见的比如 SSH 链接管理，多机并行执行，auto retry 等功能</li><li>基于上面描述的这一套基础功能，提供了一套 DSL 封装。让开发者更专注于 IaC 的逻辑，而非基础层面的细节</li><li>其开源开放，并形成了一套完善的插件机制。社区可以基于这一套提供更丰富的生态。比如 SDN 社区基于 ANSIBLE 提供了各种交换机的 playbook 等</li></ol><p>那么截至到现在，实际上 IaC 的发展其实到了一个相对完备的程度。其中不少工具，也依旧贯穿到了现在。</p><h2 id="新生代的-IaC"><a href="#新生代的-IaC" class="headerlink" title="新生代的 IaC"></a>新生代的 IaC</h2><p>从2006年8月25日，Amazon 正式宣布提供了 EC2 服务开始。整个基础设施开始快步向 Cloud 时代迈进。截止到目前，各家云厂商提供了各种各样的服务。通过十多年的演进，也诞生出了诸如 IaaS，PaaS，DaaS，FaaS 等等各种各样的服务模式。这些服务模式，让我们的基础设施的构建，变得更加的简单，更加的快速。但是这些服务模式，也带来了一些新的问题。</p><p>可能写到这里，有同学已经能意识到了问题的所在：在获取算力，获取资源越来越快捷的当下。我们怎么样去管理这样一些资源？</p><p>那么要解决这样的问题，我们似乎又需要去考虑怎么样用代码或者可声明式的配置来管理这些资源。有没有一点眼熟，历史始终就是一个圈圈.jpg</p><p>在起初的时候，我们各自会选择基于各家云厂商提供的 API 与 SDK 自行封装一套 IaC 工具，如同前面所说的一样。这样会带来一些额外的问题：</p><ol><li>代码复用性较差</li><li>各家都有一套祖传的 IaC 基建，没有统一的行业标准，导致新人入门门槛较高</li></ol><p>那么这个时候，云时代的，面向云资源管理的新型 IaC 工具的需求也愈发的迫切。这个时候，Terraform 这样的新型工具应运而生</p><p>在 Terraform 里，可能一台 EC2 Instance 的开启可能就是这样的一段简短的定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;aws_vpc&quot; &quot;my_vpc&quot; &#123;</span><br><span class="line">  cidr_block = &quot;172.16.0.0/16&quot;</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name = &quot;tf-example&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_subnet&quot; &quot;my_subnet&quot; &#123;</span><br><span class="line">  vpc_id            = aws_vpc.my_vpc.id</span><br><span class="line">  cidr_block        = &quot;172.16.10.0/24&quot;</span><br><span class="line">  availability_zone = &quot;us-west-2a&quot;</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name = &quot;tf-example&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_network_interface&quot; &quot;foo&quot; &#123;</span><br><span class="line">  subnet_id   = aws_subnet.my_subnet.id</span><br><span class="line">  private_ips = [&quot;172.16.10.100&quot;]</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name = &quot;primary_network_interface&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_instance&quot; &quot;foo&quot; &#123;</span><br><span class="line">  ami           = &quot;ami-005e54dee72cc1d00&quot; # us-west-2</span><br><span class="line">  instance_type = &quot;t2.micro&quot;</span><br><span class="line"></span><br><span class="line">  network_interface &#123;</span><br><span class="line">    network_interface_id = aws_network_interface.foo.id</span><br><span class="line">    device_index         = 0</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  credit_specification &#123;</span><br><span class="line">    cpu_credits = &quot;unlimited&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个基础上，我们可以继续将我们诸如 Database，Redis，MQ 等基础设施都进行代码化/描述式配置化，进而提升我们对资源维护的有效性。</p><p>同时，随着各家 SaaS 的发展，研发人员也尝试着将这些 SaaS 服务也进行代码化/描述式配置化。以 Terraform 为例，我们可以通过 Terraform 的 Provider 来进行对接。比如 <a href="https://newrelic.com/">newrelic</a> 提供的 <a href="https://registry.terraform.io/providers/newrelic/newrelic/latest/docs">Provider</a>，<a href="https://www.bytebase.com/">Bytebase</a> 提供的 <a href="https://registry.terraform.io/providers/bytebase/bytebase/latest/docs">Provider</a> 等等</p><p>同时，在 IaC 工具帮助我们完成基础设施描述的标准化之后，我们在此基础上能做更多有趣的事情。比如我们可以基于 <a href="https://www.infracost.io/">Infracost</a> 来计算每次资源变更所带来的资源花费变更。基于 <a href="https://www.runatlantis.io/">atlantis</a> 来完成集中式的资源变更等等进阶的工作。</p><p>那么到现在为止，我们已有的 IaC 产品的选择足够多，能满足我们大部分需求。那么是不是 IaC 整个产品的发展实际上就已经到了一个相对完备的程度呢？答案很明显是否定的</p><h2 id="未来的-IaC"><a href="#未来的-IaC" class="headerlink" title="未来的 IaC"></a>未来的 IaC</h2><p>所以这张主要来聊聊当下 IaC 产品所面临的一些问题，以及我对未来的一些思考吧</p><h3 id="缺陷一：现有基于-DSL-的语法体系的缺陷"><a href="#缺陷一：现有基于-DSL-的语法体系的缺陷" class="headerlink" title="缺陷一：现有基于 DSL 的语法体系的缺陷"></a>缺陷一：现有基于 DSL 的语法体系的缺陷</h3><p>先给大家看一个例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  dns_records = &#123;</span><br><span class="line">    # &quot;demo0&quot; : 0,</span><br><span class="line">    &quot;demo1&quot; : 1,</span><br><span class="line">    &quot;demo2&quot; : 2</span><br><span class="line">    &quot;demo3&quot; : 3,</span><br><span class="line">  &#125;</span><br><span class="line">  lb_listener_port  = 80</span><br><span class="line">  instance_rpc_port = 9545</span><br><span class="line"></span><br><span class="line">  default_target_group_attr = &#123;</span><br><span class="line">    backend_protocol     = &quot;HTTP&quot;</span><br><span class="line">    backend_port         = 9545</span><br><span class="line">    target_type          = &quot;instance&quot;</span><br><span class="line">    deregistration_delay = 10</span><br><span class="line">    protocol_version     = &quot;HTTP1&quot;</span><br><span class="line">    health_check = &#123;</span><br><span class="line">      enabled             = true</span><br><span class="line">      interval            = 15</span><br><span class="line">      path                = &quot;/status&quot;</span><br><span class="line">      port                = 9545</span><br><span class="line">      healthy_threshold   = 3</span><br><span class="line">      unhealthy_threshold = 3</span><br><span class="line">      timeout             = 5</span><br><span class="line">      protocol            = &quot;HTTP&quot;</span><br><span class="line">      matcher             = &quot;200-499&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module &quot;alb&quot; &#123;</span><br><span class="line">  source  = &quot;terraform-aws-modules/alb/aws&quot;</span><br><span class="line">  version = &quot;~&gt; 6.0&quot;</span><br><span class="line"></span><br><span class="line">  name                       = &quot;alb-demo-internal-rpc&quot;</span><br><span class="line">  load_balancer_type         = &quot;application&quot;</span><br><span class="line">  internal                   = true</span><br><span class="line">  enable_deletion_protection = true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  http_tcp_listeners = [</span><br><span class="line">    &#123;</span><br><span class="line">      protocol           = &quot;HTTP&quot;</span><br><span class="line">      port               = local.lb_listener_port</span><br><span class="line">      target_group_index = 0</span><br><span class="line">      action_type        = &quot;forward&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  http_tcp_listener_rules = concat([</span><br><span class="line">    for rec, pos in local.dns_records : &#123;</span><br><span class="line">      http_tcp_listener_index = 0</span><br><span class="line">      priority                = 105 + tonumber(pos)</span><br><span class="line">      actions = [</span><br><span class="line">        &#123;</span><br><span class="line">          type               = &quot;forward&quot;</span><br><span class="line">          target_group_index = tonumber(pos)</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">      conditions = [</span><br><span class="line">        &#123;</span><br><span class="line">          host_headers = [&quot;$&#123;rec&#125;.manjusaka.me&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    ], [&#123;</span><br><span class="line">      http_tcp_listener_index = 0</span><br><span class="line">      priority                = 120</span><br><span class="line">      actions = [</span><br><span class="line">        &#123;</span><br><span class="line">          type = &quot;weighted-forward&quot;</span><br><span class="line">          target_groups = [</span><br><span class="line">            &#123;</span><br><span class="line">              target_group_index = 0</span><br><span class="line">              weight             = 95</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              target_group_index = 5</span><br><span class="line">              weight             = 4</span><br><span class="line">            &#125;,</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">      conditions = [</span><br><span class="line">        &#123;</span><br><span class="line">          host_headers = [&quot;demo0.manjusaka.me&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;])</span><br><span class="line"></span><br><span class="line">  target_groups = [</span><br><span class="line">    merge(</span><br><span class="line">      &#123;</span><br><span class="line">        name_prefix = &quot;demo0&quot;</span><br><span class="line">        targets = &#123;</span><br><span class="line">          &quot;demo0-$&#123;module.ec2_instance_demo[0].tags_all[&quot;Name&quot;]&#125;&quot; = &#123;</span><br><span class="line">            target_id = module.ec2_instance_demo[0].id</span><br><span class="line">            port      = local.instance_rpc_port</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      local.default_target_group_attr,</span><br><span class="line">    ),</span><br><span class="line">    merge(</span><br><span class="line">      &#123;</span><br><span class="line">        name_prefix = &quot;demo1&quot;</span><br><span class="line">        targets = &#123;</span><br><span class="line">          &quot;demo1-$&#123;module.ec2_instance_demo[0].tags_all[&quot;Name&quot;]&#125;&quot; = &#123;</span><br><span class="line">            target_id = module.ec2_instance_demo[0].id</span><br><span class="line">            port      = local.instance_rpc_port</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      local.default_target_group_attr,</span><br><span class="line">    ),</span><br><span class="line">    merge(</span><br><span class="line">      &#123;</span><br><span class="line">        name_prefix = &quot;demo2&quot;</span><br><span class="line">        targets = &#123;</span><br><span class="line">          &quot;demo2-$&#123;module.ec2_family_c[0].tags_all[&quot;Name&quot;]&#125;&quot; = &#123;</span><br><span class="line">            target_id = module.ec2_family_c[0].id</span><br><span class="line">            port      = local.instance_rpc_port</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      local.default_target_group_attr,</span><br><span class="line">    ),</span><br><span class="line"></span><br><span class="line">    merge(</span><br><span class="line">      &#123;</span><br><span class="line">        name_prefix = &quot;demo3&quot;</span><br><span class="line">        targets = &#123;</span><br><span class="line">          &quot;demo3-$&#123;module.ec2_family_d[0].tags_all[&quot;Name&quot;]&#125;&quot; = &#123;</span><br><span class="line">            target_id = module.ec2_family_d[0].id</span><br><span class="line">            port      = local.instance_rpc_port</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      local.default_target_group_attr,</span><br><span class="line">    ), # target_group_index_3</span><br><span class="line">    merge(</span><br><span class="line">      &#123;</span><br><span class="line">        name_prefix = &quot;demonew&quot;</span><br><span class="line">        targets = &#123;</span><br><span class="line">          &quot;demo0-$&#123;module.ec2_instance_reader[0].tags_all[&quot;Name&quot;]&#125;&quot; = &#123;</span><br><span class="line">            target_id = module.ec2_instance_reader[0].id</span><br><span class="line">            port      = local.instance_rpc_port</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      local.default_target_group_attr,</span><br><span class="line">    ),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段 TF 配置描述虽然看起来长，但是实际上做的事很简单，根据不同的域名 <code>*.manjusaka.me</code> 将流量转发到不同的 instance 上。然后对于 <code>demo0.manjusaka.me</code> 这个域名，进行单独的流量灰度处理。</p><p>我们能发现，Terrafrom 这种 DSL 的解决方案所需要面临的问题就是在对于这种动态灵活的场景下，其表达能力将会有很大的局限性。</p><p>社区也充分意识到了这个问题。所以类似 Pulumi 这种基于 Python/Lua/Go/TS 等完整的编程语言的 IaC 产品就应运而生了。比如我们用 Pulumi + Python 改写上面的例子(此处由 ChatGPT 提供技术支持)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pulumi_aws <span class="keyword">import</span> alb</span><br><span class="line"></span><br><span class="line">dns_records = &#123;</span><br><span class="line">    <span class="comment"># &quot;demo0&quot; : 0,</span></span><br><span class="line">    <span class="string">&quot;demo1&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;demo2&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;demo3&quot;</span>: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line">lb_listener_port = <span class="number">80</span></span><br><span class="line">instance_rpc_port = <span class="number">9545</span></span><br><span class="line"></span><br><span class="line">default_target_group_attr = &#123;</span><br><span class="line">    <span class="string">&quot;backend_protocol&quot;</span>: <span class="string">&quot;HTTP&quot;</span>,</span><br><span class="line">    <span class="string">&quot;backend_port&quot;</span>: <span class="number">9545</span>,</span><br><span class="line">    <span class="string">&quot;target_type&quot;</span>: <span class="string">&quot;instance&quot;</span>,</span><br><span class="line">    <span class="string">&quot;deregistration_delay&quot;</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">&quot;protocol_version&quot;</span>: <span class="string">&quot;HTTP1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;health_check&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&quot;interval&quot;</span>: <span class="number">15</span>,</span><br><span class="line">        <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/status&quot;</span>,</span><br><span class="line">        <span class="string">&quot;port&quot;</span>: <span class="number">9545</span>,</span><br><span class="line">        <span class="string">&quot;healthy_threshold&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">&quot;unhealthy_threshold&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">&quot;timeout&quot;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">&quot;protocol&quot;</span>: <span class="string">&quot;HTTP&quot;</span>,</span><br><span class="line">        <span class="string">&quot;matcher&quot;</span>: <span class="string">&quot;200-499&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alb_module = alb.ApplicationLoadBalancer(</span><br><span class="line">    <span class="string">&quot;alb&quot;</span>,</span><br><span class="line">    name=<span class="string">&quot;alb-demo-internal-rpc&quot;</span>,</span><br><span class="line">    load_balancer_type=<span class="string">&quot;application&quot;</span>,</span><br><span class="line">    internal=<span class="literal">True</span>,</span><br><span class="line">    enable_deletion_protection=<span class="literal">True</span>,</span><br><span class="line">    http_tcp_listeners=[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;protocol&quot;</span>: <span class="string">&quot;HTTP&quot;</span>,</span><br><span class="line">            <span class="string">&quot;port&quot;</span>: lb_listener_port,</span><br><span class="line">            <span class="string">&quot;target_group_index&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;action_type&quot;</span>: <span class="string">&quot;forward&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    http_tcp_listener_rules=[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;http_tcp_listener_index&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;priority&quot;</span>: <span class="number">105</span> + pos,</span><br><span class="line">            <span class="string">&quot;actions&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;forward&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;target_group_index&quot;</span>: pos,</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;conditions&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;host_headers&quot;</span>: [<span class="string">f&quot;<span class="subst">&#123;rec&#125;</span>.manjusaka.me&quot;</span>],</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> rec, pos <span class="keyword">in</span> dns_records.items()</span><br><span class="line">    ]</span><br><span class="line">    + [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;http_tcp_listener_index&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;priority&quot;</span>: <span class="number">120</span>,</span><br><span class="line">            <span class="string">&quot;actions&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;weighted-forward&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;target_groups&quot;</span>: [</span><br><span class="line">                        &#123;<span class="string">&quot;target_group_index&quot;</span>: <span class="number">0</span>, <span class="string">&quot;weight&quot;</span>: <span class="number">95</span>&#125;,</span><br><span class="line">                        &#123;<span class="string">&quot;target_group_index&quot;</span>: <span class="number">5</span>, <span class="string">&quot;weight&quot;</span>: <span class="number">4</span>&#125;,</span><br><span class="line">                    ],</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;conditions&quot;</span>: [&#123;<span class="string">&quot;host_headers&quot;</span>: [<span class="string">&quot;demo0.manjusaka.me&quot;</span>]&#125;],</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    target_groups=[</span><br><span class="line">        alb.TargetGroup(</span><br><span class="line">            <span class="string">f&quot;demo0-<span class="subst">&#123;module.ec2_instance_demo[<span class="number">0</span>].tags_all[<span class="string">&#x27;Name&#x27;</span>].apply(<span class="keyword">lambda</span> x: x)&#125;</span>&quot;</span>,</span><br><span class="line">            name_prefix=<span class="string">&quot;demo0&quot;</span>,</span><br><span class="line">            targets=[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;target_id&quot;</span>: module.ec2_instance_demo[<span class="number">0</span>].<span class="built_in">id</span>,</span><br><span class="line">                    <span class="string">&quot;port&quot;</span>: instance_rpc_port,</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            **default_target_group_attr,</span><br><span class="line">        ),</span><br><span class="line">        alb.TargetGroup(</span><br><span class="line">            <span class="string">f&quot;demo1-<span class="subst">&#123;module.ec2_instance_demo[<span class="number">0</span>].tags_all[<span class="string">&#x27;Name&#x27;</span>].apply(<span class="keyword">lambda</span> x: x)&#125;</span>&quot;</span>,</span><br><span class="line">            name_prefix=<span class="string">&quot;demo1&quot;</span>,</span><br><span class="line">            targets=[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;target_id&quot;</span>: module.ec2_instance_demo[<span class="number">0</span>].<span class="built_in">id</span>,</span><br><span class="line">                    <span class="string">&quot;port&quot;</span>: instance_rpc_port,</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            **default_target_group_attr,</span><br><span class="line">        ),</span><br><span class="line">        alb.TargetGroup(</span><br><span class="line">            <span class="string">f&quot;demo2-<span class="subst">&#123;module.ec2_family_c[<span class="number">0</span>].tags_all[<span class="string">&#x27;Name&#x27;</span>].apply(<span class="keyword">lambda</span> x: x)&#125;</span>&quot;</span>,</span><br><span class="line">            name_prefix=<span class="string">&quot;demo2&quot;</span>,</span><br><span class="line">            targets=[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;target_id&quot;</span>: module.ec2_family_c[<span class="number">0</span>].<span class="built_in">id</span>,</span><br><span class="line">                    <span class="string">&quot;port&quot;</span>: instance_rpc_port,</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            **default_target_group_attr,</span><br><span class="line">        ),</span><br><span class="line">        alb.TargetGroup(</span><br><span class="line">            <span class="string">f&quot;demo3-<span class="subst">&#123;module.ec2_family_d[<span class="number">0</span>].tags_all[<span class="string">&#x27;Name&#x27;</span>].apply(<span class="keyword">lambda</span> x: x)&#125;</span>&quot;</span>,</span><br><span class="line">            name_prefix=<span class="string">&quot;demo3&quot;</span>,</span><br><span class="line">            targets=[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;target_id&quot;</span>: module.ec2_family_d[<span class="number">0</span>].<span class="built_in">id</span>,</span><br><span class="line">                    <span class="string">&quot;port&quot;</span>: instance_rpc_port,</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            **default_target_group_attr,</span><br><span class="line">        ),</span><br><span class="line">        alb.TargetGroup(</span><br><span class="line">            <span class="string">f&quot;demo0-<span class="subst">&#123;module.ec2_instance_reader[<span class="number">0</span>].tags_all[<span class="string">&#x27;Name&#x27;</span>].apply(<span class="keyword">lambda</span> x: x)&#125;</span>&quot;</span>,</span><br><span class="line">            name_prefix=<span class="string">&quot;demonew&quot;</span>,</span><br><span class="line">            targets=[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;target_id&quot;</span>: module.ec2_instance_reader[<span class="number">0</span>].<span class="built_in">id</span>,</span><br><span class="line">                    <span class="string">&quot;port&quot;</span>: instance_rpc_port,</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            **default_target_group_attr,</span><br><span class="line">        ),</span><br><span class="line">    ],</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>你看，整体的用法是不是更贴近于我们的使用习惯，其表达力也更好</p><h3 id="缺陷二：和业务需求之间的-Gap"><a href="#缺陷二：和业务需求之间的-Gap" class="headerlink" title="缺陷二：和业务需求之间的 Gap"></a>缺陷二：和业务需求之间的 Gap</h3><p>实际上在云时代的 IaC 工具，更多的去解决的是基础设施的存在性的问题。而对于已有基础设施的编排与更合理的利用实际上是存在比较大的 Gap 的。我们怎么样将应用部署到这些基础资源上。怎么样去调度这些资源。实际上是个很值得玩味的一个问题。</p><p>实际上可能出乎人们的意料，实际上 Kubernetes/Nomad 实际上就在尝试解决这样的问题。可能有人在思考，什么？这个也算是 IaC 工具？毫无疑问的是嘛，不信你对照一下我们前面列的 IaC 的几个核心特征</p><ol><li>最终的产物是 machine readable 的的产物。可能是一份代码，也可能是一份配制文件（YAML 工程师表示认可）</li><li>基于 machine readable 的产物，可以进一步依赖已有的 VCS 系统（SVN，Git）等做版本管理（manifest 随着仓库走）</li><li>基于 machine readable 的产物，可以进一步依赖已有的 CI/CD 系统（Jenkins，Travis CI）等做持续集成/持续交付（argocd 等平台提供了进一步的支持）</li></ol><p>同时我们在对应的配置文件里，可以声明我们所需要 CPU/Mem，需要的磁盘/远程盘，需要的网关等。同时这一套框架实际上将计算 Infra 进行了一个相对通用性的抽象，让业务百分之八十的场景下并不需要去考虑底层 Infra 的细节。</p><p>但是实际上这套已经存在的方案又会存在一些问题。比如其复杂度的飙升，self-hosted 的运维成本，以及一些抽象泄漏带来的问题。</p><h3 id="缺陷三：质量性的偏差"><a href="#缺陷三：质量性的偏差" class="headerlink" title="缺陷三：质量性的偏差"></a>缺陷三：质量性的偏差</h3><p>云时代新生的 IaC，其 scope 相较于传统的诸如 ansible 之类的 IaC 工具范围更大，野心也更大。所带来的副作用就是其质量的偏差。这个话题可以分为两方面说</p><p>第一点来看，诸如 Terraform 这样的 IaC 工具，通过官方提供的 Provider 实现了对 AWS/Azure/GCP 等平台的支持。但是即便是官方支持，其 Provider 里设计的一些逻辑，和平台侧在交互式界面里的设计逻辑并不一致。比如我之前吐槽过“比如 Aurora DB Instance 的 delete protection 在 Console 创建时默认打开，而 TF 里是默认关闭”。这实际上会在使用的时候，给开发者带来额外的心智负担</p><p>第二点来看，IaC 工具极度依赖社区（此处的社区饱含开源社区和各类商业公司）。不同于 Ansible 等老前辈，其周边设施的质量相对稳定。Terraform 等新生代的 IaC 周边的质量一言难尽。比如国内诸如福报云，华为云，腾讯云等厂商提供的 Provider 一直被人诟病。而不少大型的面向研发者的 SaaS 平台没有官方提供的 Provider 等（比如 Newrelic）</p><p>同时，云厂商所提供的一些功能实际上是和通用性 IaC 工具所冲突的。比如 AWS 的 WAF 工具，其中有一个功能是基于 IPSet 进行拦截，这个时候如果 IPSet 非常大，那么使用通用性的 IaC 工具进行描述将会是一个灾难性的存在。这个时候对于类似的场景，只能基于云厂商自己的 SDK 进行封装，云厂商提供的 SDK 质量合格还好。如果像福报云这样的神奇的 SDK 设计的话，那就只能自求多福了。。</p><h3 id="缺陷四：面对开发者体验的不足"><a href="#缺陷四：面对开发者体验的不足" class="headerlink" title="缺陷四：面对开发者体验的不足"></a>缺陷四：面对开发者体验的不足</h3><p>开发者体验实际上现在是一个比较热门的话题。毕竟没有人愿意将自己宝贵的生命来做重复的工作。就目前而言，主要的 IaC 工具都是 For Production Server 的，而不是 For Developer Experience 的，导致我们用的时候，其体验就很一般。</p><p>比如我们现在有一个场景，我们需要在 AWS 上给研发的同学批量开一批 EC2 Instance 作为开发机。怎么样保证研发同学在这些机器上开箱即用，就是很大的一个问题。</p><p>虽然我们可以通过预制镜像等方式提供相对统一的环境。不过我们可能会需要更进一步的去细调环境的话，那么就会比较蛋疼。</p><p>针对于类似的场景，老一点的有 Nix，新一点的有 <a href="https://github.com/tensorchord/envd">envd</a> 来解决这样一些问题。但是目前来讲，还是和已有的 IaC 产品有一些 gap。后续怎么样进行对接可能会是个很有趣的话题。</p><h3 id="缺陷五：面对新型技术栈的一些不足"><a href="#缺陷五：面对新型技术栈的一些不足" class="headerlink" title="缺陷五：面对新型技术栈的一些不足"></a>缺陷五：面对新型技术栈的一些不足</h3><p>最典型的是 Serverless 的场景。比如我举个例子，我现在有个简单的需求，就是用 Lambda 来实现一个简单的 SSR 的渲染</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">BlogPosts</span>(<span class="params">&#123; posts &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> posts.<span class="title function_">map</span>(<span class="function"><span class="params">post</span> =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">key</span>=<span class="string">&#123;post.id&#125;</span> <span class="attr">post</span>=<span class="string">&#123;post&#125;</span> /&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getServerSideProps</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> posts = <span class="keyword">await</span> <span class="title function_">getBlogPosts</span>();</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">props</span>: &#123; posts &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数本身非常简单，但是如果我们要将这个函数部署到 Production Enviorment 里将会是一个比较麻烦的事。比如我们来思考下我们现在需要为这个简单的函数准备什么样的 infra</p><ol><li>一个 lambda 实例</li><li>一个 S3 bucket</li><li>一个 APIGateway 及路由规则</li><li>接入 CDN （可选）</li><li>DNS 准备</li></ol><p>那么在 IaC Manifest + 业务代码彼此分离的情况下，我们的变更以及资源的管理将会是一个很大的问题。Vercel 在最近的 Blog <a href="https://vercel.com/blog/framework-defined-infrastructure">Framework-defined infrastructure</a> 也描述了这样的问题。我们怎么样能进一步发展为 Domain Code as Infrastructure 将会是未来的一个挑战</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章写了两天，差不多作为自己对于 IaC 这个事物的一些碎碎念（而不是 Terraform Tutorial！（逃。祝大家读的开心</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;实际上 IaC 这个概念的出现已经很久了，所以写篇水文来简单聊聊 IaC 的过去，现在，和将来&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://www.manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="杂记" scheme="https://www.manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="编程" scheme="https://www.manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="水文" scheme="https://www.manjusaka.blog/tags/%E6%B0%B4%E6%96%87/"/>
    
    <category term="SRE" scheme="https://www.manjusaka.blog/tags/SRE/"/>
    
    <category term="Tools" scheme="https://www.manjusaka.blog/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>从一个重构项目中能学到什么东西</title>
    <link href="https://www.manjusaka.blog/posts/2023/01/26/what-I-can-learn-from-a-refactor-project/"/>
    <id>https://www.manjusaka.blog/posts/2023/01/26/what-I-can-learn-from-a-refactor-project/</id>
    <published>2023-01-26T16:00:00.000Z</published>
    <updated>2024-05-19T19:06:04.920Z</updated>
    
    <content type="html"><![CDATA[<p>本来这篇文章是要在 2022 最后一个工作日前写完的，但是拖延癌发作，到现在才写完。不过还是发出来，希望里面的内容能帮到大家</p><span id="more"></span><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>这个重构项目如果从我第一个超大型重构 PR 算起（22年12月11日），到现在已经历史一个半月了。目前重构进度已经超过了 80%，超过6+位贡献者集体贡献。这绝对是个不小的工程了</p><p>那问题来了，我为什么要发起这个重构项目呢？</p><p>在重构项目之前，nerdctl 项目存在一个很大的问题，即 command 的入口处，flag 的处理和逻辑耦合的问题，比如用 <code>nerdctl apparmor</code> 系列的代码来举一个例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;text/tabwriter&quot;</span></span><br><span class="line"><span class="string">&quot;text/template&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/containerd/nerdctl/pkg/apparmorutil&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/spf13/cobra&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newApparmorLsCommand</span><span class="params">()</span></span> *cobra.Command &#123;</span><br><span class="line">cmd := &amp;cobra.Command&#123;</span><br><span class="line">Use:           <span class="string">&quot;ls&quot;</span>,</span><br><span class="line">Aliases:       []<span class="type">string</span>&#123;<span class="string">&quot;list&quot;</span>&#125;,</span><br><span class="line">Short:         <span class="string">&quot;List the loaded AppArmor profiles&quot;</span>,</span><br><span class="line">Args:          cobra.NoArgs,</span><br><span class="line">RunE:          apparmorLsAction,</span><br><span class="line">SilenceUsage:  <span class="literal">true</span>,</span><br><span class="line">SilenceErrors: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line">cmd.Flags().BoolP(<span class="string">&quot;quiet&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="literal">false</span>, <span class="string">&quot;Only display profile names&quot;</span>)</span><br><span class="line"><span class="comment">// Alias &quot;-f&quot; is reserved for &quot;--filter&quot;</span></span><br><span class="line">cmd.Flags().String(<span class="string">&quot;format&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;Format the output using the given go template&quot;</span>)</span><br><span class="line">cmd.RegisterFlagCompletionFunc(<span class="string">&quot;format&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>, toComplete <span class="type">string</span>)</span></span> ([]<span class="type">string</span>, cobra.ShellCompDirective) &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="type">string</span>&#123;<span class="string">&quot;json&quot;</span>, <span class="string">&quot;table&quot;</span>, <span class="string">&quot;wide&quot;</span>&#125;, cobra.ShellCompDirectiveNoFileComp</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> cmd</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">apparmorLsAction</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">quiet, err := cmd.Flags().GetBool(<span class="string">&quot;quiet&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">w := cmd.OutOrStdout()</span><br><span class="line"><span class="keyword">var</span> tmpl *template.Template</span><br><span class="line">format, err := cmd.Flags().GetString(<span class="string">&quot;format&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> format &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;&quot;</span>, <span class="string">&quot;table&quot;</span>, <span class="string">&quot;wide&quot;</span>:</span><br><span class="line">w = tabwriter.NewWriter(cmd.OutOrStdout(), <span class="number">4</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="string">&#x27; &#x27;</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> !quiet &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="string">&quot;NAME\tMODE&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;raw&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;unsupported format: \&quot;raw\&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">if</span> quiet &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;format and quiet must not be specified together&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">tmpl, err = parseTemplate(format)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">profiles, err := apparmorutil.Profiles()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, f := <span class="keyword">range</span> profiles &#123;</span><br><span class="line"><span class="keyword">if</span> tmpl != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">var</span> b bytes.Buffer</span><br><span class="line"><span class="keyword">if</span> err := tmpl.Execute(&amp;b, f); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> _, err = fmt.Fprintf(w, b.String()+<span class="string">&quot;\n&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> quiet &#123;</span><br><span class="line">fmt.Fprintln(w, f.Name)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;%s\t%s\n&quot;</span>, f.Name, f.Mode)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> f, ok := w.(Flusher); ok &#123;</span><br><span class="line"><span class="keyword">return</span> f.Flush()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你能看到在函数 <code>apparmorLsAction</code> 的逻辑中包含了两个部分的东西</p><ol><li>flag 的处理（大道至简的 err 处理（XDDDDD</li><li>command logic 的处理</li></ol><p>这样的设计存在很明显的问题</p><ol><li>代码可读性与可维护性的问题，比如我需要添加一个 flag 的时候，那么需要在多处添加。而且满天飞的 flagging process 会导致提升新人进入项目的门槛</li><li>logic 的处理与 flag 的处理耦合在一起，这样会额外导致如果社区在试图基于 nerdctl 封装一套自定义的 CLI 脚手架的时候，那么会出现非常难处理的情况。</li></ol><p>同时 nercdctl 还存在另外一个问题。在 cmd 的入口处，因为同归属于一个 sub package，于是之前的开发过程中为了省事，文件之间为了省事，交叉引用了彼此的 internal helper function</p><p>在 nerdctl 项目最开始只作为 containerd CLI 的一个替代品的时候。之前的设计缺陷实际上暴露的并不明显。但是 nerdctl 完整提供了一套基于 containerd 的容器生命周期及网络管理（base on CNI）及其余进阶特性（比如 cosign，IPFS 等），开始作为 containerd 实质上的一个入口标准的时候。社区无疑会提出更高的需求。比如 <a href="https://github.com/containerd/nerdctl/issues/1631">Move *.go files for subcommand out main package nerdctl#1631</a> 就是一个很典型的例子。</p><p>在这种情况下，对于 nerdctl 的入口进行一个合理的但是大范围的重构，就是一个必须且迫在眉睫的事了。</p><blockquote><p>又到了<del>白色相薄</del>重构的季节 —- 蛮久抚子（Nadeshiko Manju）</p></blockquote><h2 id="重构过程分析"><a href="#重构过程分析" class="headerlink" title="重构过程分析"></a>重构过程分析</h2><p>好了，社区有需要，saka 哦不，蛮久抚子（Nadeshiko Manju）我就得站出来了，重构嘛，很简单嘛，Goland 搞一搞就完事了嘛。好说好说。于是我有了一个超大的 PR ：<a href="https://github.com/containerd/nerdctl/pull/1639">Refactor the package structure in cmd/nerdctl nerdctl#1639</a>。规模 +5000 -4000</p><p><img src="https://user-images.githubusercontent.com/7054676/214850761-da34600d-a9b0-42de-88e8-97643a27d61d.png" alt="よし、気合いが勝っとる!"></p><p>不过，因为这个 PR 太过于惊世骇俗，在我 COVID-19 Positive 后，Suda 开始帮我 carry 这个 PR。但是最后 Suda 也高呼不可 carry（Suda の惊く：ばか saka！）</p><blockquote><p>どうしてこうなるんだろう…初めて、リファクタリングしたいという欲求があり、リファクタリングの必要性がありました。嬉しいことが二つ重なって。その二つの嬉しさが、また、たくさんの嬉しさを連れてきてくれて。夢のように幸せな時間を手に入れたはずなのに…なのに、どうして、こうなっちゃうんだろう…<br>为什么会变成这样呢，第一次有了想重构的欲望，又有了重构的必要。两件快乐事情重合在一起。而这两份快乐，又给我带来更多的快乐。得到的，本该是像梦境一般幸福的时间……但是，为什么，会变成这样呢…… —— 《nerdctl 相薄》</p></blockquote><p>实际上原因很简单 <del>冬马小三</del> ，哦不是，是我小三，哦，不是，是我脑子被门夹了</p><p>言归正传，其实这个 PR 是个教科书式的反面例子</p><ol><li>在启动大型项目之前没有达成社区的共识</li><li>违背了 One PR for One Thing 的基本原则</li><li>重构时的无关的改动太多，导致 review 难度过大</li></ol><p>所以在吸取了 <a href="https://github.com/containerd/nerdctl/pull/1639">Refactor the package structure in cmd/nerdctl nerdctl#1639</a> 的教训后，我正式在社区提出了一个重构 Proposal <a href="https://github.com/containerd/nerdctl/issues/1680">Let’s refactor the nerdctl CLI package nerdctl#1680</a> ，在这个 Proposal 中我做了几个事情</p><ol><li>完整阐述了重构的必要性，方便社区成员后续回溯</li><li>定义了重构的几个 step</li><li>约定好了多人协作重构时所共同遵守的约定</li></ol><p>社区其余几位 maintainer 在这个 Proposal 下额外讨论了一些细节，并达成了一些共识</p><ol><li>将最终的重构范围缩小为仅处理 flagging process</li><li>优化了一些文件结构的设计</li></ol><p>截止到现在，nerdctl 的重构才算开始正式进入了一个快车道的状态。毕竟重构不是乱写，要是写错了，要向社区谢罪的。</p><p>这里面其实还有个插曲，最开始我在 Issue 中创建 TODO Task 之后，为了方便 track project 的进度，我将这些 TODO Task 直接全部转成了 Issue（然后就相当于给 subscribe 了这个 repo 的老哥们来了一个邮箱 DDOS）。这里不得不吐槽一句，GitHub 的项目管理工具真的很弱诶（XDDDDD</p><p>花开两朵，各表一只，在 Proposal 正式通过了之后，整体的重构就开始进入了快车道了，这里列一些有意思的讨论，大家有兴趣可以去看看</p><ol><li><a href="https://github.com/containerd/nerdctl/pull/1774">Refactor the apparmor flagging process nerdctl#1774</a>，Proposal 接收后的一个模板 PR，在这个 PR 下，继续细化了一些在 Proposal 中讨论没有完善的细节</li><li><a href="https://github.com/containerd/nerdctl/pull/1792">[Refactor] Refactor the build subcommand flagging process nerdctl#1792</a>，Proposal 接收后第一个比较大命令的重构，某种意义上也是一个模板 PR 了，里面就讨论了不少参数设计风格的问题</li><li><a href="https://github.com/containerd/nerdctl/pull/1837">refactor: consolidate main logic of volume.List into volume.Volumes</a>, 不属于 Proposal 原本涵盖的范围内，但是里面关于函数语义设计的讨论值得关注一下</li><li><a href="https://github.com/containerd/nerdctl/issues/1889">pkg/cmd: inconsistent arguments ordering nerdctl#1889</a>，关于函数设计风格的问题。</li></ol><p>当然还有很多 PR 中的讨论也是非常有意思的，这里就不完整列出来了。欢迎大家去直接看原始的 PR（当然欢迎加入讨论）</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>差不多就这样吧，大概复盘了一下到现在为止重构过程中的得失。希望大家能喜欢</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本来这篇文章是要在 2022 最后一个工作日前写完的，但是拖延癌发作，到现在才写完。不过还是发出来，希望里面的内容能帮到大家&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://www.manjusaka.blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="杂记" scheme="https://www.manjusaka.blog/categories/%E6%8A%80%E6%9C%AF/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="杂记" scheme="https://www.manjusaka.blog/tags/%E6%9D%82%E8%AE%B0/"/>
    
    <category term="技术" scheme="https://www.manjusaka.blog/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>蓝莲花公益小组简报</title>
    <link href="https://www.manjusaka.blog/posts/2023/01/19/simple-brief-about-blue-lotus-group/"/>
    <id>https://www.manjusaka.blog/posts/2023/01/19/simple-brief-about-blue-lotus-group/</id>
    <published>2023-01-19T11:00:00.000Z</published>
    <updated>2024-05-19T19:06:04.920Z</updated>
    
    <content type="html"><![CDATA[<p>愿每个人心里，都盛开着永不凋零的蓝莲花</p><p><img src="https://raw.githubusercontent.com/Zheaoli/do-something-right/71724a0e2de9d49bde5a59d4abf20c8ae3cf3710/assets/logo.svg" alt="logo"></p><span id="more"></span><p>从2021年11月第一次发起刷题公益计划，到现在也一年多时间了。起初是为了让大家有一些特殊的动力去刷题，所以有了这样的基础规则</p><ol><li>1题一元人民币，在打卡后向公益基金捐款。</li></ol><p>基金池最开始由群主承担，后续有超过25位+群友集体捐款</p><p>再后来，这个群就发展成了基于技术的各种闲聊群，推荐番毒害群友群。</p><p>到目前也差不多一年多时间了，写个简报回顾一下</p><h2 id="一、刷题公益计划"><a href="#一、刷题公益计划" class="headerlink" title="一、刷题公益计划"></a>一、刷题公益计划</h2><p>截至目前，从2021年11月开始，到2022年6月作为一个阶段的结束。</p><ol><li>共计捐款 1625 元人民币</li></ol><p>在2022年6月，经过群友同意，再经过一轮扩资后，蓝莲花小组向一个村小项目捐款 6000 元人民币</p><p><img src="https://user-images.githubusercontent.com/7054676/213406866-6de061b8-6394-4bf8-a73b-cf5a0f9c8b19.JPG" alt="村小捐款"></p><p>前不久得到反馈，这笔钱已经用在应该用的地方了。开心</p><h2 id="二-技术分享"><a href="#二-技术分享" class="headerlink" title="二. 技术分享"></a>二. 技术分享</h2><p>从2022年6月开始，群友决定在群内以一周两次的频率进行分享，截至目前举行了八次分享</p><ol><li>SRE 二三事</li><li>当前端在讨论字体时，我们在讨论什么</li><li>编译原理入门到出家</li><li>OLAP 入门出家</li><li>简单聊聊家庭网络</li><li>Homelab 101</li><li>稳定性建设101</li><li>物联网简介</li></ol><h2 id="三-开源项目"><a href="#三-开源项目" class="headerlink" title="三. 开源项目"></a>三. 开源项目</h2><p>截至目前，群友的足迹包括不仅限于</p><ol><li>Vue</li><li>SWR</li><li>containerd</li><li>envd</li></ol><p>2022 年群内也新诞生了两位开源项目的 maintainer</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>时间过的很快，转眼这个群就一年多了。很荣幸能在这个浮躁的时代里认识一些很纯粹的人。2023 一起加油</p><p>最后，<strong>愿每个人心中都能盛开着永不凋零的蓝莲花</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;愿每个人心里，都盛开着永不凋零的蓝莲花&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Zheaoli/do-something-right/71724a0e2de9d49bde5a59d4abf20c8ae3cf3710/assets/logo.svg&quot; alt=&quot;logo&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://www.manjusaka.blog/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="总结" scheme="https://www.manjusaka.blog/categories/%E9%9A%8F%E7%AC%94/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="随笔" scheme="https://www.manjusaka.blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="总结" scheme="https://www.manjusaka.blog/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>排查一个特殊的 No space left on device</title>
    <link href="https://www.manjusaka.blog/posts/2023/01/07/special-case-no-space-left-on-device/"/>
    <id>https://www.manjusaka.blog/posts/2023/01/07/special-case-no-space-left-on-device/</id>
    <published>2023-01-07T15:30:00.000Z</published>
    <updated>2024-05-19T19:06:04.920Z</updated>
    
    <content type="html"><![CDATA[<p>好久没写水文了，新年第一篇水文总得写一下，完成下 OKR，正好最近帮群友查了一个特殊的 No space left on device 问题，记录一下。</p><span id="more"></span><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>半夜接到群友求助，说自己的测试环境遇到了点问题，正好我还没睡，那就来看一下</p><p>问题的情况很简单，</p><blockquote><p>用 <code>docker run -d  --env-file .oss_env --mount type=bind,src=/data1,dst=/cache &#123;image&#125;</code> 启动了一个容器，然后发现在启动后业务代码报错，抛出 <strong>OSError: [Errno 28] No space left on device</strong> 的异常</p></blockquote><p>这个问题其实很典型，但是最终排查出来的结果确实非典型的。不过排查思路其实应该是很典型的线上问题的一步步分析 root casue 的过程。希望能对看官就帮助</p><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>首先群友提供了第一个关键信息，空间有余量，但是就 <strong>OSError: [Errno 28] No space left on device</strong> 。那么熟悉 Linux 的同学可能第一步的排查工作就是排查对应的 inode 情况</p><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -ih</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/7054676/211155731-c54b1146-2daa-48b3-8e1e-294040d73201.png" alt="inode"></p><p>我们能看到 /data1 实际上的 inode 和整机的 inode 数量都是足够的（备注：这里是我自己在我自己的机器上复现问题的截图，第一步由群友完成，然后给我提供了信息）</p><p>那么我们继续排查，我们看到了我们使用了 <a href="#refer-anchor-1">mount bind<sup>1</sup></a> 的方式将宿主机的 /data1 挂载到了容器内部的 /cache 目录下, mount bind 可以用下面一张图来表示和 volume 的区别</p><p><img src="https://docs.docker.com/storage/images/types-of-mounts-bind.png" alt="mount bind"></p><p>都在不同版本的内核上，mount bind 的行为有一些特殊的情况，所以我们需要确认下 mount bind 的情况是否正确，我们用 <a href="#refer-anchor-2">fallocate<sup>2</sup></a> 来创建一个 1G 的文件，然后在容器内部查看文件的大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fallocate -l 10G /cache/test</span><br></pre></td></tr></table></figure><p>文件创建没有问题，实际上我们就可以排除掉 mount bind 的缺陷了</p><p>接着，群友提供了这个盘是云厂商的云盘（经过扩容），我让群友确认下是具体的 ESSD 还是 NAS 这种走 NFS 挂载的 Block Device（这块也有坑）。确认是标准的 ESSD 后进入下一步（驱动的问题可以先排除）</p><p>接着，我们需要考虑 mount —bind 在跨文件系统情况下的问题。虽然前面一步我们成功创建了文件。但是为了保险起见，我们执行 <code>fdisk -l</code> 和 <code>tune2fs -l</code> 两个命令，来确认分区和文件系统的正确性，确认文件系统的类型都是 ext4，那么没有问题。具体两个命令的使用方式参见 <a href="#refer-anchor-3">fdisk<sup>3</sup></a> 和 <a href="#refer-anchor-4">tune2fs<sup>4</sup></a></p><p>然后再回顾我们之前直接在 <code>/cache</code> 下创建问题没有问题，那么这个时候我们心里应该大概有底，这个应该不是代码问题，也不是权限问题（这一步我额外排除镜像的构建里没有额外的用户操作），那么我们需要排除一下扩容的问题。我们将 /data1 unmount 之后，重新 mount 后，再执行容器，发现问题依旧存在，那么我们就可以去排除扩容的问题了。</p><p>现在一些常见的问题已经基本排除，那么我们来考虑文件系统本身的问题。我登录到机器上，执行了以下两个操作</p><ol><li>在出问题的目录 <code>/cache/xxx/</code> 下，我用 <code>fallocate -l</code> 创建一个报错的文件（长文件名），失败</li><li>在出问题的目录 <code>/cache/xxx/</code> 下，我用 <code>fallocate -l</code> 创建一个短文件名），成功 </li></ol><p>OK，我们现在排查路径就往文件系统异常的方向上靠了，执行命令 <a href="#refer-anchor-5">dmesg<sup>5</sup></a> 查看内核日志，发现了如下错误</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[13155344.231942] EXT4-fs warning (device sdd): ext4_dx_add_entry:2461: Directory (ino: 3145729) index full, reach max htree level :2</span><br><span class="line">[13155344.231944] EXT4-fs warning (device sdd): ext4_dx_add_entry:2465: Large directory feature is not enabled on this filesystem</span><br></pre></td></tr></table></figure><p>OK，我们期待的异常信息找到了。原因是，ext4 基于的 BTree 索引，默认情况下只允许树的层高为2，实际上就大概限制了目录下的文件数量大概在 2k-3kw 以内。经过确认，这个问题目录下的确有大量小文件。我们再用 <code>tune2fs -l</code> 确认下是否是如我们猜想，得到结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Filesystem revision #:    1 (dynamic)</span><br><span class="line">Filesystem features:      has_journal ext_attr resize_inode dir_index filetype needs_recovery extent 64bit flex_bg sparse_super large_file huge_file dir_nlink extra_isize metadata_csum</span><br><span class="line">Filesystem flags:         signed_directory_hash</span><br></pre></td></tr></table></figure><p>bingo，的确没有开启 <code>large_dir</code> 的选项。那么我们执行 <code>tune2fs -O large_dir /dev/sdd</code> 开启这个选项，然后再次执行 <code>tune2fs -l</code> 确认下，发现已经开启了。然后我们再次执行容器，发现问题已经解决。</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>上面的问题排查看似告一段落。但是实际上并没有闭环。一个问题的闭环有两个特征</p><ol><li>定位到具体的异常代码</li><li>有最小可复现版本确认我们找到 root cause 是符合预期的。</li></ol><p>从上面 dmesg 的信息我们能定位到内核中的函数，其实现如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ext4_dx_add_entry</span><span class="params">(<span class="type">handle_t</span> *handle, <span class="keyword">struct</span> ext4_filename *fname,</span></span><br><span class="line"><span class="params">     <span class="keyword">struct</span> inode *dir, <span class="keyword">struct</span> inode *inode)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dx_frame</span> <span class="title">frames</span>[<span class="title">EXT4_HTREE_LEVEL</span>], *<span class="title">frame</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dx_entry</span> *<span class="title">entries</span>, *<span class="title">at</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">buffer_head</span> *<span class="title">bh</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">super_block</span> *<span class="title">sb</span> =</span> dir-&gt;i_sb;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ext4_dir_entry_2</span> *<span class="title">de</span>;</span></span><br><span class="line"><span class="type">int</span> restart;</span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">again:</span><br><span class="line">restart = <span class="number">0</span>;</span><br><span class="line">frame = dx_probe(fname, dir, <span class="literal">NULL</span>, frames);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(frame))</span><br><span class="line"><span class="keyword">return</span> PTR_ERR(frame);</span><br><span class="line">entries = frame-&gt;entries;</span><br><span class="line">at = frame-&gt;at;</span><br><span class="line">bh = ext4_read_dirblock(dir, dx_get_block(frame-&gt;at), DIRENT_HTREE);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(bh)) &#123;</span><br><span class="line">err = PTR_ERR(bh);</span><br><span class="line">bh = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">goto</span> cleanup;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BUFFER_TRACE(bh, <span class="string">&quot;get_write_access&quot;</span>);</span><br><span class="line">err = ext4_journal_get_write_access(handle, sb, bh, EXT4_JTR_NONE);</span><br><span class="line"><span class="keyword">if</span> (err)</span><br><span class="line"><span class="keyword">goto</span> journal_error;</span><br><span class="line"></span><br><span class="line">err = add_dirent_to_buf(handle, fname, dir, inode, <span class="literal">NULL</span>, bh);</span><br><span class="line"><span class="keyword">if</span> (err != -ENOSPC)</span><br><span class="line"><span class="keyword">goto</span> cleanup;</span><br><span class="line"></span><br><span class="line">err = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* Block full, should compress but for now just split */</span></span><br><span class="line">dxtrace(printk(KERN_DEBUG <span class="string">&quot;using %u of %u node entries\n&quot;</span>,</span><br><span class="line">       dx_get_count(entries), dx_get_limit(entries)));</span><br><span class="line"><span class="comment">/* Need to split index? */</span></span><br><span class="line"><span class="keyword">if</span> (dx_get_count(entries) == dx_get_limit(entries)) &#123;</span><br><span class="line"><span class="type">ext4_lblk_t</span> newblock;</span><br><span class="line"><span class="type">int</span> levels = frame - frames + <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> icount;</span><br><span class="line"><span class="type">int</span> add_level = <span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dx_entry</span> *<span class="title">entries2</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dx_node</span> *<span class="title">node2</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">buffer_head</span> *<span class="title">bh2</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (frame &gt; frames) &#123;</span><br><span class="line"><span class="keyword">if</span> (dx_get_count((frame - <span class="number">1</span>)-&gt;entries) &lt;</span><br><span class="line">    dx_get_limit((frame - <span class="number">1</span>)-&gt;entries)) &#123;</span><br><span class="line">add_level = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">frame--; <span class="comment">/* split higher index block */</span></span><br><span class="line">at = frame-&gt;at;</span><br><span class="line">entries = frame-&gt;entries;</span><br><span class="line">restart = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (add_level &amp;&amp; levels == ext4_dir_htree_level(sb)) &#123;</span><br><span class="line">ext4_warning(sb, <span class="string">&quot;Directory (ino: %lu) index full, &quot;</span></span><br><span class="line"> <span class="string">&quot;reach max htree level :%d&quot;</span>,</span><br><span class="line"> dir-&gt;i_ino, levels);</span><br><span class="line"><span class="keyword">if</span> (ext4_dir_htree_level(sb) &lt; EXT4_HTREE_LEVEL) &#123;</span><br><span class="line">ext4_warning(sb, <span class="string">&quot;Large directory feature is &quot;</span></span><br><span class="line"> <span class="string">&quot;not enabled on this &quot;</span></span><br><span class="line"> <span class="string">&quot;filesystem&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">err = -ENOSPC;</span><br><span class="line"><span class="keyword">goto</span> cleanup;</span><br><span class="line">&#125;</span><br><span class="line">icount = dx_get_count(entries);</span><br><span class="line">bh2 = ext4_append(handle, dir, &amp;newblock);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(bh2)) &#123;</span><br><span class="line">err = PTR_ERR(bh2);</span><br><span class="line"><span class="keyword">goto</span> cleanup;</span><br><span class="line">&#125;</span><br><span class="line">node2 = (<span class="keyword">struct</span> dx_node *)(bh2-&gt;b_data);</span><br><span class="line">entries2 = node2-&gt;entries;</span><br><span class="line"><span class="built_in">memset</span>(&amp;node2-&gt;fake, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> fake_dirent));</span><br><span class="line">node2-&gt;fake.rec_len = ext4_rec_len_to_disk(sb-&gt;s_blocksize,</span><br><span class="line">   sb-&gt;s_blocksize);</span><br><span class="line">BUFFER_TRACE(frame-&gt;bh, <span class="string">&quot;get_write_access&quot;</span>);</span><br><span class="line">err = ext4_journal_get_write_access(handle, sb, frame-&gt;bh,</span><br><span class="line">    EXT4_JTR_NONE);</span><br><span class="line"><span class="keyword">if</span> (err)</span><br><span class="line"><span class="keyword">goto</span> journal_error;</span><br><span class="line"><span class="keyword">if</span> (!add_level) &#123;</span><br><span class="line"><span class="type">unsigned</span> icount1 = icount/<span class="number">2</span>, icount2 = icount - icount1;</span><br><span class="line"><span class="type">unsigned</span> hash2 = dx_get_hash(entries + icount1);</span><br><span class="line">dxtrace(printk(KERN_DEBUG <span class="string">&quot;Split index %i/%i\n&quot;</span>,</span><br><span class="line">       icount1, icount2));</span><br><span class="line"></span><br><span class="line">BUFFER_TRACE(frame-&gt;bh, <span class="string">&quot;get_write_access&quot;</span>); <span class="comment">/* index root */</span></span><br><span class="line">err = ext4_journal_get_write_access(handle, sb,</span><br><span class="line">    (frame - <span class="number">1</span>)-&gt;bh,</span><br><span class="line">    EXT4_JTR_NONE);</span><br><span class="line"><span class="keyword">if</span> (err)</span><br><span class="line"><span class="keyword">goto</span> journal_error;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>((<span class="type">char</span> *) entries2, (<span class="type">char</span> *) (entries + icount1),</span><br><span class="line">       icount2 * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> dx_entry));</span><br><span class="line">dx_set_count(entries, icount1);</span><br><span class="line">dx_set_count(entries2, icount2);</span><br><span class="line">dx_set_limit(entries2, dx_node_limit(dir));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Which index block gets the new entry? */</span></span><br><span class="line"><span class="keyword">if</span> (at - entries &gt;= icount1) &#123;</span><br><span class="line">frame-&gt;at = at - entries - icount1 + entries2;</span><br><span class="line">frame-&gt;entries = entries = entries2;</span><br><span class="line">swap(frame-&gt;bh, bh2);</span><br><span class="line">&#125;</span><br><span class="line">dx_insert_block((frame - <span class="number">1</span>), hash2, newblock);</span><br><span class="line">dxtrace(dx_show_index(<span class="string">&quot;node&quot;</span>, frame-&gt;entries));</span><br><span class="line">dxtrace(dx_show_index(<span class="string">&quot;node&quot;</span>,</span><br><span class="line">       ((<span class="keyword">struct</span> dx_node *) bh2-&gt;b_data)-&gt;entries));</span><br><span class="line">err = ext4_handle_dirty_dx_node(handle, dir, bh2);</span><br><span class="line"><span class="keyword">if</span> (err)</span><br><span class="line"><span class="keyword">goto</span> journal_error;</span><br><span class="line">brelse (bh2);</span><br><span class="line">err = ext4_handle_dirty_dx_node(handle, dir,</span><br><span class="line">   (frame - <span class="number">1</span>)-&gt;bh);</span><br><span class="line"><span class="keyword">if</span> (err)</span><br><span class="line"><span class="keyword">goto</span> journal_error;</span><br><span class="line">err = ext4_handle_dirty_dx_node(handle, dir,</span><br><span class="line">frame-&gt;bh);</span><br><span class="line"><span class="keyword">if</span> (restart || err)</span><br><span class="line"><span class="keyword">goto</span> journal_error;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">struct</span> dx_root *dxroot;</span><br><span class="line"><span class="built_in">memcpy</span>((<span class="type">char</span> *) entries2, (<span class="type">char</span> *) entries,</span><br><span class="line">       icount * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> dx_entry));</span><br><span class="line">dx_set_limit(entries2, dx_node_limit(dir));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Set up root */</span></span><br><span class="line">dx_set_count(entries, <span class="number">1</span>);</span><br><span class="line">dx_set_block(entries + <span class="number">0</span>, newblock);</span><br><span class="line">dxroot = (<span class="keyword">struct</span> dx_root *)frames[<span class="number">0</span>].bh-&gt;b_data;</span><br><span class="line">dxroot-&gt;info.indirect_levels += <span class="number">1</span>;</span><br><span class="line">dxtrace(printk(KERN_DEBUG</span><br><span class="line">       <span class="string">&quot;Creating %d level index...\n&quot;</span>,</span><br><span class="line">       dxroot-&gt;info.indirect_levels));</span><br><span class="line">err = ext4_handle_dirty_dx_node(handle, dir, frame-&gt;bh);</span><br><span class="line"><span class="keyword">if</span> (err)</span><br><span class="line"><span class="keyword">goto</span> journal_error;</span><br><span class="line">err = ext4_handle_dirty_dx_node(handle, dir, bh2);</span><br><span class="line">brelse(bh2);</span><br><span class="line">restart = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">goto</span> journal_error;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">de = do_split(handle, dir, &amp;bh, frame, &amp;fname-&gt;hinfo);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(de)) &#123;</span><br><span class="line">err = PTR_ERR(de);</span><br><span class="line"><span class="keyword">goto</span> cleanup;</span><br><span class="line">&#125;</span><br><span class="line">err = add_dirent_to_buf(handle, fname, dir, inode, de, bh);</span><br><span class="line"><span class="keyword">goto</span> cleanup;</span><br><span class="line"></span><br><span class="line">journal_error:</span><br><span class="line">ext4_std_error(dir-&gt;i_sb, err); <span class="comment">/* this is a no-op if err == 0 */</span></span><br><span class="line">cleanup:</span><br><span class="line">brelse(bh);</span><br><span class="line">dx_release(frames);</span><br><span class="line"><span class="comment">/* @restart is true means htree-path has been changed, we need to</span></span><br><span class="line"><span class="comment"> * repeat dx_probe() to find out valid htree-path</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (restart &amp;&amp; err == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> again;</span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ext4_dx_add_entry</code> 函数的主要功能是将新的目录项添加到目录索引中，我们能看到这段函数在 <code>add_level &amp;&amp; levels == ext4_dir_htree_level(sb)</code> 这里检查对应的特性是否打开，以及当前 BTree 层高，如果超出限制，则返回 <code>ENOSPC</code> 即 ERROR 28</p><p>好了，在复现异常之前，我们来获取下这个函数的被调用路径。这里我用 eBPF 的 trace 来获取 stacktrace，因为与主体无关，我在这里就不放代码了</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ext4_dx_add_entry</span><br><span class="line">ext4_add_nondir</span><br><span class="line">ext4_create</span><br><span class="line">path_openat</span><br><span class="line">do_filp_open</span><br><span class="line">do_sys_openat2</span><br><span class="line">do_sys_open</span><br><span class="line">__x64_sys_openat</span><br><span class="line">do_syscall_64</span><br><span class="line">entry_SYSCALL_64_after_hwframe</span><br><span class="line">[unknown]</span><br><span class="line">[unknown]</span><br></pre></td></tr></table></figure><p>那么我们怎么验证这个是我们的异常呢</p><p>首先我们利用 eBPF + kretproble 来获取 <code>ext4_dx_add_entry</code> 的返回值，如果返回值是 <code>ENOSPC</code>，则我们就可以确定这个是我们的异常</p><p>代码如下（不要问我这里为啥不用 Python 写，要写 C 了（</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bcc <span class="keyword">import</span> BPF</span><br><span class="line"></span><br><span class="line">bpf_text = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">#include &lt;uapi/linux/ptrace.h&gt;</span></span><br><span class="line"><span class="string">BPF_RINGBUF_OUTPUT(events, 65536);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">struct event_data_t &#123;</span></span><br><span class="line"><span class="string">    u32 pid;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">int trace_ext4_dx_add_entry_return(struct pt_regs *ctx) &#123;</span></span><br><span class="line"><span class="string">    int ret = PT_REGS_RC(ctx);</span></span><br><span class="line"><span class="string">    if (ret == 0) &#123;</span></span><br><span class="line"><span class="string">        return 0;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    u32 pid=bpf_get_current_pid_tgid()&gt;&gt;32;</span></span><br><span class="line"><span class="string">    struct event_data_t *event_data = events.ringbuf_reserve(sizeof(struct event_data_t));</span></span><br><span class="line"><span class="string">    if (!event_data) &#123;</span></span><br><span class="line"><span class="string">        return 0;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    event_data-&gt;pid = pid;</span></span><br><span class="line"><span class="string">    events.ringbuf_submit(event_data, sizeof(event_data));</span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bpf = BPF(text=bpf_text)</span><br><span class="line"></span><br><span class="line">bpf.attach_kretprobe(event=<span class="string">&quot;ext4_dx_add_entry&quot;</span>, fn_name=<span class="string">&quot;trace_ext4_dx_add_entry_return&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_event_data</span>(<span class="params">cpu, data, size</span>):</span><br><span class="line">    event =  bpf[<span class="string">&quot;events&quot;</span>].event(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Process <span class="subst">&#123;event.pid&#125;</span> ext4 failed&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bpf[<span class="string">&quot;events&quot;</span>].open_ring_buffer(process_event_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        bpf.ring_buffer_consume()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        exit()</span><br></pre></td></tr></table></figure><p>然后我们写段很短的 Python 脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200000000</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">100000</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;we have created <span class="subst">&#123;i&#125;</span> files&quot;</span>)</span><br><span class="line">    filename=<span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line">    file_name=<span class="string">f&quot;/data1/cache/<span class="subst">&#123;filename&#125;</span>+<span class="subst">&#123;filename&#125;</span>.txt&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&quot;w+&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>然后我们看到执行结果</p><p><img src="https://user-images.githubusercontent.com/7054676/211157342-812406e1-45c4-42f0-9ff4-3c4c3d5bcb05.png" alt="执行结果"></p><p>符合预期，那么我们可以说这个问题的排查路径的因果关系链完整了。那么我们也可以正式宣告解决了这个问题了</p><p>那么锦上添花的一点，对于这种上游的问题，我们如果能找到具体在什么时间点进行了修复，那就更好了。就这个 case 而言，ext4 的 large_dir 在 Linux 4.13 中得到引入，具体可以参见 <a href="#refer-anchor-6">88a399955a97fe58ddb2a46ca5d988caedac731b<sup>6</sup></a> 这个 commit。</p><p>OK 这个问题就告一段落</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实这个问题比较冷门，但是排查方式其实是挺典型的线上问题的排查方法。对于问题，不要预设结果，一步步的根据现象去逼近最终的结论。以及 eBPF 真的好东西，能帮助做很多内核的事。最后我的 Linux 文件系统方面的底子还是太薄弱了，希望后面能重点加强一下</p><p>差不多就这样</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><div id="refer-anchor-1"></div><ul><li>[1]. <a href="https://docs.docker.com/storage/bind-mounts/">https://docs.docker.com/storage/bind-mounts/</a></li></ul><div id="refer-anchor-2"></div>]- [2]. [https://man7.org/linux/man-pages/man2/fallocate.2.html](https://man7.org/linux/man-pages/man2/fallocate.2.html)<div id="refer-anchor-3"></div><ul><li>[3]. <a href="https://man7.org/linux/man-pages/man8/fdisk.8.html">https://man7.org/linux/man-pages/man8/fdisk.8.html</a></li></ul><div id="refer-anchor-4"></div><ul><li>[4]. <a href="https://linux.die.net/man/8/tune2fs">https://linux.die.net/man/8/tune2fs</a></li></ul><div id="refer-anchor-5"></div><ul><li>[5]. <a href="https://man7.org/linux/man-pages/man1/dmesg.1.html">https://man7.org/linux/man-pages/man1/dmesg.1.html</a></li></ul><div id="refer-anchor-6"></div><ul><li>[6]. <a href="https://git.kernel.org/pub/scm/linux/kernel/git/tytso/ext4.git/commit/?h=dev&amp;id=88a399955a97fe58ddb2a46ca5d988caedac731b">https://git.kernel.org/pub/scm/linux/kernel/git/tytso/ext4.git/commit/?h=dev&amp;id=88a399955a97fe58ddb2a46ca5d988caedac731b</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;好久没写水文了，新年第一篇水文总得写一下，完成下 OKR，正好最近帮群友查了一个特殊的 No space left on device 问题，记录一下。&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://www.manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://www.manjusaka.blog/categories/%E7%BC%96%E7%A8%8B/Linux/"/>
    
    
    <category term="编程" scheme="https://www.manjusaka.blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://www.manjusaka.blog/tags/Linux/"/>
    
    <category term="容器" scheme="https://www.manjusaka.blog/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Stay Simple, Stay Naive</title>
    <link href="https://www.manjusaka.blog/posts/2023/01/01/stay-simple-stay-naive/"/>
    <id>https://www.manjusaka.blog/posts/2023/01/01/stay-simple-stay-naive/</id>
    <published>2023-01-01T19:00:00.000Z</published>
    <updated>2024-05-19T19:06:04.920Z</updated>
    
    <content type="html"><![CDATA[<p>本来想在农历年前交年终总结的，不过想了想，去年的年终总结就因为太懒导致我鸽了。所以这个“双年”怎么也得总结下2022了。不过说起来怎么还没去字节，就开始 ego 了起来。</p><span id="more"></span><h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>实际上每年都在觉得这一年很魔幻，但是下一年总会跳出来说“这一年更魔幻”。不过这也是人生的乐趣吧。</p><p>看了下20年总结的标题叫做”但行好事，莫问前程“，去年一下想不起标题，群内求助了下，发现”Stay Simple，Stay Naive“这个标题还不错，挺适合作为去年的总结与展望的。不过在写下这点文字的时候发现当年 +1S 的对象也已经仙去了。怎么说心里也还是有点很奇怪的感觉在里面。</p><p>不过，一日膜法，终身膜法，所以就还是 Naive 的 +1S 吧</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>去年从年初开始，我从太极图形离职后，就开始进入了我数字游民的生活。作为一个 FreeLancer，可能最大的好处就在于说免去了通勤的时间后，我可以有更多的时间做自己的事（睡大觉（不是</p><p>在离职之后，和女朋友一起换了一个新的房子，有着很大的落地窗的露台，采光很好，所以让我在这里有时间安心做一些自己的事情</p><p><img src="https://user-images.githubusercontent.com/7054676/166151791-40f3b47c-a649-4b9e-bb79-c58ccd263fd2.png" alt="老夫的专属少女阳台！"></p><p>所以去年在有自己的时间的情况下，我开始看之前没有怎么涉猎的杂书，印象比较深的有这样几本</p><ol><li>人造美人</li><li>置身事内：中国政府与经济发展</li><li>唐史并不如烟</li><li>最伟大的交易</li><li>病人家属，请来一下</li><li>昨日的世界</li><li>成为一颗星：宇航学员日记</li></ol><p>整体的阅读量在20本左右吧。然后发现，你去慢慢找书，然后发现某个作者的风格很符合你的 XP 是件非常幸福的事。</p><p>在看书之余，我也开始看番了，这个行动一度占据了我 Q3/Q4 很多业余时间（导致我这段时间不去干其余事了（你们这个群害人不浅啊。当然，补剧，看纪录片，也都是这一年的一部分，过这对于我来说实际上也是全新的体验了。技术和睡觉之外的世界也是格外的大啊</p><p>然后家里新入职了两只猫咪，现在家里整整有六只猫，这对于我来说完全是幸福的烦恼。撸猫一时爽，一直撸猫一直爽。（当然铲屎和猫咪集体生病的时候就很不爽了。</p><p>当然好事说了这么多，当然要说点坏事了，去年的减肥计划执行的很不彻底，以及去年的运动计划也没有执行，呜呜呜呜呜。</p><p>从去年开始再次勇敢面对抑郁症的现实后，在药物和整体相对自由的环境的情况下，我自己的精神状态控制的也还不错。不过可能因为这一年是我被性侵到现在第十五个年头的缘故吧，去年的噩梦有点多，希望时间能继续治愈一切吧。（不过说起来，我讨厌药物副作用（真的让人很不爽</p><p>说回来，去年有了自己时间后，家里也添置了不少能极大提升自己生活幸福度的物件</p><ol><li>一个 8*16T 的 NAS，妈妈再也不担心我的动漫没地方放了！</li><li>一个 4090 + i9-13900K 的台式机，工作娱乐都很爽</li><li>Apple TV 4K 配合局域网 NAS，我和妹子一起看了不少的电影（</li><li>一个尺寸合格的 Android 手机，追网络小说（</li><li>一个顶配的 iPad Pro 12.9 寸，轻办公和看微信读书都很好用（我真的没用来盖泡面看爱奇艺！</li></ol><p>另外一提的是，去年公益我也在继续坚持坐着，我自己累计捐款10k+，然后公益群的小伙伴一起凑了点钱给一个村小捐款6K+，另外一点非常开心的是，我也带动了身边的人，去捐助学生。教育是最好的公益.jpg。不知道还能坚持多久，但是还是做一些力所能及的事吧。</p><p>差不多是这样，2022 整体的生活也还算是有滋有味。不过心里还是会隐隐约约有点担心，在整体局势下行的情况下，我这样小确幸的生活又能持续多久呢？</p><h2 id="感情"><a href="#感情" class="headerlink" title="感情"></a>感情</h2><p>感情步入了第四个年头，去年因为北京疫情的原因，和荆澈同学一起朝夕相处（这是真的朝夕相处）了一年了。用我很喜欢的《士兵突击》里的一句台词</p><blockquote><p>常相守是个考验，随时随地，一生。</p></blockquote><p>两个人朝夕相处，因为各种细节上的差异，一定会有一些小的争执与摩擦。这个时候就需要两个人相互包容。相互理解。说道这里我就很庆幸荆澈同学对我的包容与监督了。她经常碎碎念的督促我起床，督促我运动，督促我继续改掉我很多不好的习惯Hhhhhh（mua.jpg</p><p>很多时候，我半夜噩梦醒来，总会下意识的去抱着荆澈同学，她即便迷迷糊糊搞不清情况，也会转过来给我抱抱。某种意义上，荆澈同学的陪伴，是让我不断走下去的勇气的源泉</p><p>说回来，朝夕相处也未必是个坏事，去年和荆澈同学一起去公园散步，一起逛吃逛吃的时间多了很多。也一起去泡了温泉，一起去了环球影城（Remote 万岁！）。</p><p>希望 2023 年也和荆澈同学也能一起顺顺利利的走下去，完成对荆澈同学的承诺（我要有八块腹肌.jpg（以及去旅游，去做更多的手工艺品！</p><p>反正我一如既往的 <strong>感激并享受着荆澈同学的爱</strong> 。</p><h2 id="工作与技术"><a href="#工作与技术" class="headerlink" title="工作与技术"></a>工作与技术</h2><p>首先聊聊我自己的变更，如前面所说，在22年初，因为自己的规划和身体的原因，我正式离开了太极（说实话挺舍不得这群同事的），正式开始了我数字游民的生活。目前来说，我依靠给一些客户做 SRE 方面的能力输出为生。这对于我来讲其实是个蛮大的挑战。因为我之前的定位其实更多的还是偏向于一个 Infra Developer，将 SRE 作为我正式工作方向，其实对于我来讲，也是开天辟地头一回了（感谢客户爸爸的信任</p><p>去年其实工作内容也发生了很大的转变，也让我更多的意识到了自己的不足。如果说自己之前是一个纯粹的 IC 的角色，那么去年我的工作内容的边界实际上有了不少的扩展。我需要去更多的考虑协调的有效性，体系化的建设。很多时候我都在笑称我自己这周写的文档可能比我写的代码还多了（XD</p><p>不过这对于我来说也是一个好事，思路的转变我相信会让我提升很多。</p><p>2022另外一个比较重大的改变就是从2022二月开始，在 Xuanwo 几位好友的启发下，我开始正式的以公开的方式，记录自己每周的生活与技术学习（我老板说会看我周报（摊手。这一点其实对于我自己来说，也是比较好的一个手段吧。用一个锚点，去约束自己的生活（面向周报有内容式学习（不是），去记录自己的一些感悟与心得（输出了不少稳定性与可观测性的东西。希望23年能继续坚持。</p><p>技术方面的话，去年的成长我自己觉得也还是比较明显的。一方面是在开源社区这块。年初因为寻找 Docker 替代品，机缘巧合之下开始为 <a href="https://github.com/containerd/nerdctl">nerdctl</a> 做输出，6月被 Promote 成为 Reviewer，12月被 Promote 成为 Committer。这也是我比较深度的参与开源社区了。同时我自己也会和身边的好友去交流关于开源社区的东西，比如和 Xuanwo 一起聊聊他的 OpenDAL，和 GaoCe GG 一起聊聊/吐槽他的创业项目 envd （他时常因为我比他还看好这个项目而惊讶（这个项目真的是好项目啊！。我自己觉得这一年去给不同社区贡献代码，参与讨论，对于我自己的提升是全方位的，更明确的意识到自己的 naive，也接受来自不同人的帮助与指导。如同我之前在一篇文章中的感悟一样</p><blockquote><p>从互联网诞生之初到现在，开源这一极具理想主义气质的行为事实上的改变了这个世界。世界各地的人都在开源的旗帜下，自由的挥发着自己的创意，尽情的一点点的改变着这个世界。有些时候想到我会有机会去参与到这样一个伟大的活动中，我会不由自主的颤栗。我很庆幸在我最初的职业生涯里就加入到了这个伟大的事业，我也希望我身边会有越来越多的人参与进来，一起挥洒着汗水，一起在这个操蛋但是又美好的世界里，找到自己心灵的应许之地。</p></blockquote><p>另外一方面的话，去年在技术深度这块做的也还算 OK，继续在之前自己积累的可观测性和稳定性方面精进，系统性的提升自己的一些体系化的思考（抽象成方法论），也继续在内核和 eBPF 这块做一些有意思的工作（比如帮助人去做一些小的工具）。希望23年也能继续勇猛精进</p><p>说起来，去年有一个很大的收获不知道算不算技术这块的，姑且算吧。之前组建的刷题群在去年格外的活跃，大家一起刷题，一起捐款，一起推荐番祸害群主（不是），一起做开源（去年群内诞生了两位开源项目的 maintainer），我很多时候遇到各种事情的时候都会在群里和群友们一起吐槽和发泄。很多时候我自己在感叹，在这个人心浮躁的时代，能遇到这样一群热情又纯粹的人，实则人生幸事，当浮一大白（不过我肝不好，就以零度代酒干了这杯）</p><p>差不多就这些，去年也还零零碎碎的做了很多其余的工作，开始翻译人生第一本书,保持了每日一题，读了十多篇论文，组织了好几次群内分享，写自己的 toy，很多很多。很多人觉得程序员是个很枯燥的行业。但是说实话，这一行真的让人迷醉</p><p><img src="https://user-images.githubusercontent.com/7054676/210173110-89ff93d9-9b9d-467c-b8e4-58de1d4a5f50.png" alt="勉强没有虚度的一年"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对比了下年初的目标，然后自评了一下差不多能给自己个3.5的绩效吧<br>优点和缺点都比较明显，聊聊缺点吧</p><ol><li>是自己在开源这块有技术深度的产出还是不够</li><li>自律性还是差了一些，花了不少时间在睡懒觉，玩游戏，看番上了</li><li>专注度上差了一些，一些拟好的目标经常走神</li><li>自己的运动目标没达成</li></ol><p>缺点和改进方向还是比较明确的，希望明年继续努力。我自己目前列好的一些 OKR 差不多是这样</p><ol><li>O1：代码能力<ol><li>学习前端，成为一个前端开源项目的 maintainer</li><li>继续保持 Leetcode 每日一题，确保百分之70以上的 daily 随机 medium 及以上题目能不看题解写出来</li></ol></li><li>O2: 读书<ol><li>重读 TCP 卷一</li><li>读完 CSAPP，并保证每章作业完成率不低于百分之八十</li><li>剩下的书待定</li></ol></li><li>O3：分享<ol><li>参考 xdp-tutorial 写一个 netfilter-tutorial</li><li>全年群内分享5次以上</li><li>六篇有效博客</li></ol></li><li>O4: 努力生活<ol><li>通过运动的方式，将体重降到 145（和某位群友赌了两千块的公益捐款）</li><li>和女朋友去三个以上地方玩</li><li>争取每周超过3点睡觉不超过两天（现在就emmm</li></ol></li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>2022 实际上真的挺魔幻的，不过套用狄更斯的一句老掉牙的话</p><blockquote><p>这是最坏的一年，这也是最好的一年</p></blockquote><p>说实话我也不知道23年会怎么样，未来几年会怎么样。不过无论怎么样，爱与希望总是会支撑我们走过一年年。嗯，Everything is gonna be OK.</p><p>说起来，今年有人问过我我想成为一个怎么样的人，我想了下，这么回答到</p><blockquote><p>我希望身边的人在很多年后，和老头老太太聊天或者给自己孙子提到我的时候会这么说”我之前认识一个叫 saka 的人，是个还不错的人“，那么我心满意足了</p></blockquote><p>Stay Simple，Stay Naive，永远谦逊，敬畏生活，勇敢前行</p><p>再见 2022，你好 2023</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本来想在农历年前交年终总结的，不过想了想，去年的年终总结就因为太懒导致我鸽了。所以这个“双年”怎么也得总结下2022了。不过说起来怎么还没去字节，就开始 ego 了起来。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://www.manjusaka.blog/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="总结" scheme="https://www.manjusaka.blog/categories/%E9%9A%8F%E7%AC%94/%E6%80%BB%E7%BB%93/"/>
    
    <category term="秀恩爱" scheme="https://www.manjusaka.blog/categories/%E9%9A%8F%E7%AC%94/%E6%80%BB%E7%BB%93/%E7%A7%80%E6%81%A9%E7%88%B1/"/>
    
    
    <category term="随笔" scheme="https://www.manjusaka.blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="总结" scheme="https://www.manjusaka.blog/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
